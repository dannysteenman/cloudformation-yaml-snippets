{
    "AWS::ACMPCA::Certificate": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ACMPCA::Certificate",
            "  Properties:",
            "    CertificateAuthorityArn: ${2:String} #required",
            "    CertificateSigningRequest: ${3:String} #required",
            "    SigningAlgorithm: ${4:String} #required",
            "    TemplateArn: ${5:String}",
            "    Validity: #required",
            "      ${6:Validity}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-acmpca-certificate.html",
            "Attributes: ",
            "  Certificate",
            "  Arn"
        ],
        "prefix": "acmpca-certificate",
        "scope": "source.cloudformation"
    },
    "AWS::ACMPCA::CertificateAuthority": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ACMPCA::CertificateAuthority",
            "  Properties:",
            "    KeyAlgorithm: ${2:String} #required",
            "    RevocationConfiguration:",
            "      ${3:RevocationConfiguration}",
            "    SigningAlgorithm: ${4:String} #required",
            "    Subject: #required",
            "      ${5:Subject}",
            "    Tags:",
            "      - ${6:Tag}",
            "    Type: ${7:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-acmpca-certificateauthority.html",
            "Attributes: ",
            "  Arn",
            "  CertificateSigningRequest"
        ],
        "prefix": "acmpca-certificateauthority",
        "scope": "source.cloudformation"
    },
    "AWS::ACMPCA::CertificateAuthorityActivation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ACMPCA::CertificateAuthorityActivation",
            "  Properties:",
            "    Certificate: ${2:String} #required",
            "    CertificateAuthorityArn: ${3:String} #required",
            "    CertificateChain: ${4:String}",
            "    Status: ${5:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-acmpca-certificateauthorityactivation.html",
            "Attributes: ",
            "  CompleteCertificateChain"
        ],
        "prefix": "acmpca-certificateauthorityactivation",
        "scope": "source.cloudformation"
    },
    "AWS::AccessAnalyzer::Analyzer": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AccessAnalyzer::Analyzer",
            "  Properties:",
            "    AnalyzerName: ${2:String}",
            "    ArchiveRules:",
            "      - ${3:ArchiveRule}",
            "    Tags:",
            "      - ${4:Tag}",
            "    Type: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-accessanalyzer-analyzer.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "accessanalyzer-analyzer",
        "scope": "source.cloudformation"
    },
    "AWS::AmazonMQ::Broker": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AmazonMQ::Broker",
            "  Properties:",
            "    AuthenticationStrategy: ${2:String}",
            "    AutoMinorVersionUpgrade: ${3:Boolean} #required",
            "    BrokerName: ${4:String} #required",
            "    Configuration:",
            "      ${5:ConfigurationId}",
            "    DeploymentMode: ${6:String} #required",
            "    EncryptionOptions:",
            "      ${7:EncryptionOptions}",
            "    EngineType: ${8:String} #required",
            "    EngineVersion: ${9:String} #required",
            "    HostInstanceType: ${10:String} #required",
            "    LdapServerMetadata:",
            "      ${11:LdapServerMetadata}",
            "    Logs:",
            "      ${12:LogList}",
            "    MaintenanceWindowStartTime:",
            "      ${13:MaintenanceWindow}",
            "    PubliclyAccessible: ${14:Boolean} #required",
            "    SecurityGroups:",
            "      - ${15:String}",
            "    StorageType: ${16:String}",
            "    SubnetIds:",
            "      - ${17:String}",
            "    Tags:",
            "      - ${18:TagsEntry}",
            "    Users: #required",
            "      - ${19:User}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amazonmq-broker.html",
            "Attributes: ",
            "  IpAddresses",
            "  OpenWireEndpoints",
            "  ConfigurationRevision",
            "  StompEndpoints",
            "  MqttEndpoints",
            "  AmqpEndpoints",
            "  Arn",
            "  ConfigurationId",
            "  WssEndpoints"
        ],
        "prefix": "amazonmq-broker",
        "scope": "source.cloudformation"
    },
    "AWS::AmazonMQ::Configuration": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AmazonMQ::Configuration",
            "  Properties:",
            "    Data: ${2:String} #required",
            "    Description: ${3:String}",
            "    EngineType: ${4:String} #required",
            "    EngineVersion: ${5:String} #required",
            "    Name: ${6:String} #required",
            "    Tags:",
            "      - ${7:TagsEntry}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amazonmq-configuration.html",
            "Attributes: ",
            "  Revision",
            "  Id",
            "  Arn"
        ],
        "prefix": "amazonmq-configuration",
        "scope": "source.cloudformation"
    },
    "AWS::AmazonMQ::ConfigurationAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AmazonMQ::ConfigurationAssociation",
            "  Properties:",
            "    Broker: ${2:String} #required",
            "    Configuration: #required",
            "      ${3:ConfigurationId}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amazonmq-configurationassociation.html"
        ],
        "prefix": "amazonmq-configurationassociation",
        "scope": "source.cloudformation"
    },
    "AWS::Amplify::App": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Amplify::App",
            "  Properties:",
            "    AccessToken: ${2:String}",
            "    AutoBranchCreationConfig:",
            "      ${3:AutoBranchCreationConfig}",
            "    BasicAuthConfig:",
            "      ${4:BasicAuthConfig}",
            "    BuildSpec: ${5:String}",
            "    CustomHeaders: ${6:String}",
            "    CustomRules:",
            "      - ${7:CustomRule}",
            "    Description: ${8:String}",
            "    EnableBranchAutoDeletion: ${9:Boolean}",
            "    EnvironmentVariables:",
            "      - ${10:EnvironmentVariable}",
            "    IAMServiceRole: ${11:String}",
            "    Name: ${12:String} #required",
            "    OauthToken: ${13:String}",
            "    Repository: ${14:String}",
            "    Tags:",
            "      - ${15:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amplify-app.html",
            "Attributes: ",
            "  AppId",
            "  Arn",
            "  DefaultDomain",
            "  AppName"
        ],
        "prefix": "amplify-app",
        "scope": "source.cloudformation"
    },
    "AWS::Amplify::Branch": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Amplify::Branch",
            "  Properties:",
            "    AppId: ${2:String} #required",
            "    BasicAuthConfig:",
            "      ${3:BasicAuthConfig}",
            "    BranchName: ${4:String} #required",
            "    BuildSpec: ${5:String}",
            "    Description: ${6:String}",
            "    EnableAutoBuild: ${7:Boolean}",
            "    EnablePerformanceMode: ${8:Boolean}",
            "    EnablePullRequestPreview: ${9:Boolean}",
            "    EnvironmentVariables:",
            "      - ${10:EnvironmentVariable}",
            "    PullRequestEnvironmentName: ${11:String}",
            "    Stage: ${12:String}",
            "    Tags:",
            "      - ${13:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amplify-branch.html",
            "Attributes: ",
            "  BranchName",
            "  Arn"
        ],
        "prefix": "amplify-branch",
        "scope": "source.cloudformation"
    },
    "AWS::Amplify::Domain": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Amplify::Domain",
            "  Properties:",
            "    AppId: ${2:String} #required",
            "    AutoSubDomainCreationPatterns:",
            "      - ${3:String}",
            "    AutoSubDomainIAMRole: ${4:String}",
            "    DomainName: ${5:String} #required",
            "    EnableAutoSubDomain: ${6:Boolean}",
            "    SubDomainSettings: #required",
            "      - ${7:SubDomainSetting}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-amplify-domain.html",
            "Attributes: ",
            "  AutoSubDomainIAMRole",
            "  DomainName",
            "  StatusReason",
            "  EnableAutoSubDomain",
            "  Arn",
            "  DomainStatus",
            "  AutoSubDomainCreationPatterns",
            "  CertificateRecord"
        ],
        "prefix": "amplify-domain",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::Account": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::Account",
            "  Properties:",
            "    CloudWatchRoleArn: ${2:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-account.html"
        ],
        "prefix": "apigateway-account",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::ApiKey": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::ApiKey",
            "  Properties:",
            "    CustomerId: ${2:String}",
            "    Description: ${3:String}",
            "    Enabled: ${4:Boolean}",
            "    GenerateDistinctId: ${5:Boolean}",
            "    Name: ${6:String}",
            "    StageKeys:",
            "      - ${7:StageKey}",
            "    Tags:",
            "      - ${8:Tag}",
            "    Value: ${9:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-apikey.html"
        ],
        "prefix": "apigateway-apikey",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::Authorizer": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::Authorizer",
            "  Properties:",
            "    AuthType: ${2:String}",
            "    AuthorizerCredentials: ${3:String}",
            "    AuthorizerResultTtlInSeconds: ${4:Integer}",
            "    AuthorizerUri: ${5:String}",
            "    IdentitySource: ${6:String}",
            "    IdentityValidationExpression: ${7:String}",
            "    Name: ${8:String}",
            "    ProviderARNs:",
            "      - ${9:String}",
            "    RestApiId: ${10:String} #required",
            "    Type: ${11:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html"
        ],
        "prefix": "apigateway-authorizer",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::BasePathMapping": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::BasePathMapping",
            "  Properties:",
            "    BasePath: ${2:String}",
            "    DomainName: ${3:String} #required",
            "    RestApiId: ${4:String}",
            "    Stage: ${5:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-basepathmapping.html"
        ],
        "prefix": "apigateway-basepathmapping",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::ClientCertificate": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::ClientCertificate",
            "  Properties:",
            "    Description: ${2:String}",
            "    Tags:",
            "      - ${3:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-clientcertificate.html"
        ],
        "prefix": "apigateway-clientcertificate",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::Deployment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::Deployment",
            "  Properties:",
            "    DeploymentCanarySettings:",
            "      ${2:DeploymentCanarySettings}",
            "    Description: ${3:String}",
            "    RestApiId: ${4:String} #required",
            "    StageDescription:",
            "      ${5:StageDescription}",
            "    StageName: ${6:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-deployment.html"
        ],
        "prefix": "apigateway-deployment",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::DocumentationPart": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::DocumentationPart",
            "  Properties:",
            "    Location: #required",
            "      ${2:Location}",
            "    Properties: ${3:String} #required",
            "    RestApiId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-documentationpart.html"
        ],
        "prefix": "apigateway-documentationpart",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::DocumentationVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::DocumentationVersion",
            "  Properties:",
            "    Description: ${2:String}",
            "    DocumentationVersion: ${3:String} #required",
            "    RestApiId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-documentationversion.html"
        ],
        "prefix": "apigateway-documentationversion",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::DomainName": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::DomainName",
            "  Properties:",
            "    CertificateArn: ${2:String}",
            "    DomainName: ${3:String}",
            "    EndpointConfiguration:",
            "      ${4:EndpointConfiguration}",
            "    MutualTlsAuthentication:",
            "      ${5:MutualTlsAuthentication}",
            "    RegionalCertificateArn: ${6:String}",
            "    SecurityPolicy: ${7:String}",
            "    Tags:",
            "      - ${8:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-domainname.html",
            "Attributes: ",
            "  DistributionDomainName",
            "  DistributionHostedZoneId",
            "  RegionalDomainName",
            "  RegionalHostedZoneId"
        ],
        "prefix": "apigateway-domainname",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::GatewayResponse": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::GatewayResponse",
            "  Properties:",
            "    ResponseParameters:",
            "      ${2:Map}",
            "    ResponseTemplates:",
            "      ${3:Map}",
            "    ResponseType: ${4:String} #required",
            "    RestApiId: ${5:String} #required",
            "    StatusCode: ${6:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-gatewayresponse.html"
        ],
        "prefix": "apigateway-gatewayresponse",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::Method": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::Method",
            "  Properties:",
            "    ApiKeyRequired: ${2:Boolean}",
            "    AuthorizationScopes:",
            "      - ${3:String}",
            "    AuthorizationType: ${4:String}",
            "    AuthorizerId: ${5:String}",
            "    HttpMethod: ${6:String} #required",
            "    Integration:",
            "      ${7:Integration}",
            "    MethodResponses:",
            "      - ${8:MethodResponse}",
            "    OperationName: ${9:String}",
            "    RequestModels:",
            "      ${10:Map}",
            "    RequestParameters:",
            "      ${11:Map}",
            "    RequestValidatorId: ${12:String}",
            "    ResourceId: ${13:String} #required",
            "    RestApiId: ${14:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html"
        ],
        "prefix": "apigateway-method",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::Model": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::Model",
            "  Properties:",
            "    ContentType: ${2:String}",
            "    Description: ${3:String}",
            "    Name: ${4:String}",
            "    RestApiId: ${5:String} #required",
            "    Schema: ${6:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-model.html"
        ],
        "prefix": "apigateway-model",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::RequestValidator": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::RequestValidator",
            "  Properties:",
            "    Name: ${2:String}",
            "    RestApiId: ${3:String} #required",
            "    ValidateRequestBody: ${4:Boolean}",
            "    ValidateRequestParameters: ${5:Boolean}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-requestvalidator.html"
        ],
        "prefix": "apigateway-requestvalidator",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::Resource": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::Resource",
            "  Properties:",
            "    ParentId: ${2:String} #required",
            "    PathPart: ${3:String} #required",
            "    RestApiId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-resource.html"
        ],
        "prefix": "apigateway-resource",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::RestApi": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::RestApi",
            "  Properties:",
            "    ApiKeySourceType: ${2:String}",
            "    BinaryMediaTypes:",
            "      - ${3:String}",
            "    Body: ${4:Json}",
            "    BodyS3Location:",
            "      ${5:S3Location}",
            "    CloneFrom: ${6:String}",
            "    Description: ${7:String}",
            "    EndpointConfiguration:",
            "      ${8:EndpointConfiguration}",
            "    FailOnWarnings: ${9:Boolean}",
            "    MinimumCompressionSize: ${10:Integer}",
            "    Name: ${11:String}",
            "    Parameters:",
            "      ${12:Map}",
            "    Policy: ${13:Json}",
            "    Tags:",
            "      - ${14:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html",
            "Attributes: ",
            "  RootResourceId"
        ],
        "prefix": "apigateway-restapi",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::Stage": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::Stage",
            "  Properties:",
            "    AccessLogSetting:",
            "      ${2:AccessLogSetting}",
            "    CacheClusterEnabled: ${3:Boolean}",
            "    CacheClusterSize: ${4:String}",
            "    CanarySetting:",
            "      ${5:CanarySetting}",
            "    ClientCertificateId: ${6:String}",
            "    DeploymentId: ${7:String}",
            "    Description: ${8:String}",
            "    DocumentationVersion: ${9:String}",
            "    MethodSettings:",
            "      - ${10:MethodSetting}",
            "    RestApiId: ${11:String} #required",
            "    StageName: ${12:String}",
            "    Tags:",
            "      - ${13:Tag}",
            "    TracingEnabled: ${14:Boolean}",
            "    Variables:",
            "      ${15:Map}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-stage.html"
        ],
        "prefix": "apigateway-stage",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::UsagePlan": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::UsagePlan",
            "  Properties:",
            "    ApiStages:",
            "      - ${2:ApiStage}",
            "    Description: ${3:String}",
            "    Quota:",
            "      ${4:QuotaSettings}",
            "    Tags:",
            "      - ${5:Tag}",
            "    Throttle:",
            "      ${6:ThrottleSettings}",
            "    UsagePlanName: ${7:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-usageplan.html"
        ],
        "prefix": "apigateway-usageplan",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::UsagePlanKey": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::UsagePlanKey",
            "  Properties:",
            "    KeyId: ${2:String} #required",
            "    KeyType: ${3:String} #required",
            "    UsagePlanId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-usageplankey.html"
        ],
        "prefix": "apigateway-usageplankey",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGateway::VpcLink": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGateway::VpcLink",
            "  Properties:",
            "    Description: ${2:String}",
            "    Name: ${3:String} #required",
            "    TargetArns: #required",
            "      - ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-vpclink.html"
        ],
        "prefix": "apigateway-vpclink",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGatewayV2::Api": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGatewayV2::Api",
            "  Properties:",
            "    ApiKeySelectionExpression: ${2:String}",
            "    BasePath: ${3:String}",
            "    Body: ${4:Json}",
            "    BodyS3Location:",
            "      ${5:BodyS3Location}",
            "    CorsConfiguration:",
            "      ${6:Cors}",
            "    CredentialsArn: ${7:String}",
            "    Description: ${8:String}",
            "    DisableExecuteApiEndpoint: ${9:Boolean}",
            "    DisableSchemaValidation: ${10:Boolean}",
            "    FailOnWarnings: ${11:Boolean}",
            "    Name: ${12:String}",
            "    ProtocolType: ${13:String}",
            "    RouteKey: ${14:String}",
            "    RouteSelectionExpression: ${15:String}",
            "    Tags: ${16:Json}",
            "    Target: ${17:String}",
            "    Version: ${18:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-api.html",
            "Attributes: ",
            "  ApiEndpoint"
        ],
        "prefix": "apigatewayv2-api",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGatewayV2::ApiGatewayManagedOverrides": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGatewayV2::ApiGatewayManagedOverrides",
            "  Properties:",
            "    ApiId: ${2:String} #required",
            "    Integration:",
            "      ${3:IntegrationOverrides}",
            "    Route:",
            "      ${4:RouteOverrides}",
            "    Stage:",
            "      ${5:StageOverrides}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-apigatewaymanagedoverrides.html"
        ],
        "prefix": "apigatewayv2-apigatewaymanagedoverrides",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGatewayV2::ApiMapping": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGatewayV2::ApiMapping",
            "  Properties:",
            "    ApiId: ${2:String} #required",
            "    ApiMappingKey: ${3:String}",
            "    DomainName: ${4:String} #required",
            "    Stage: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-apimapping.html"
        ],
        "prefix": "apigatewayv2-apimapping",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGatewayV2::Authorizer": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGatewayV2::Authorizer",
            "  Properties:",
            "    ApiId: ${2:String} #required",
            "    AuthorizerCredentialsArn: ${3:String}",
            "    AuthorizerPayloadFormatVersion: ${4:String}",
            "    AuthorizerResultTtlInSeconds: ${5:Integer}",
            "    AuthorizerType: ${6:String} #required",
            "    AuthorizerUri: ${7:String}",
            "    EnableSimpleResponses: ${8:Boolean}",
            "    IdentitySource: #required",
            "      - ${9:String}",
            "    IdentityValidationExpression: ${10:String}",
            "    JwtConfiguration:",
            "      ${11:JWTConfiguration}",
            "    Name: ${12:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-authorizer.html"
        ],
        "prefix": "apigatewayv2-authorizer",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGatewayV2::Deployment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGatewayV2::Deployment",
            "  Properties:",
            "    ApiId: ${2:String} #required",
            "    Description: ${3:String}",
            "    StageName: ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-deployment.html"
        ],
        "prefix": "apigatewayv2-deployment",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGatewayV2::DomainName": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGatewayV2::DomainName",
            "  Properties:",
            "    DomainName: ${2:String} #required",
            "    DomainNameConfigurations:",
            "      - ${3:DomainNameConfiguration}",
            "    MutualTlsAuthentication:",
            "      ${4:MutualTlsAuthentication}",
            "    Tags: ${5:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-domainname.html",
            "Attributes: ",
            "  RegionalHostedZoneId",
            "  RegionalDomainName"
        ],
        "prefix": "apigatewayv2-domainname",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGatewayV2::Integration": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGatewayV2::Integration",
            "  Properties:",
            "    ApiId: ${2:String} #required",
            "    ConnectionId: ${3:String}",
            "    ConnectionType: ${4:String}",
            "    ContentHandlingStrategy: ${5:String}",
            "    CredentialsArn: ${6:String}",
            "    Description: ${7:String}",
            "    IntegrationMethod: ${8:String}",
            "    IntegrationSubtype: ${9:String}",
            "    IntegrationType: ${10:String} #required",
            "    IntegrationUri: ${11:String}",
            "    PassthroughBehavior: ${12:String}",
            "    PayloadFormatVersion: ${13:String}",
            "    RequestParameters: ${14:Json}",
            "    RequestTemplates: ${15:Json}",
            "    TemplateSelectionExpression: ${16:String}",
            "    TimeoutInMillis: ${17:Integer}",
            "    TlsConfig:",
            "      ${18:TlsConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-integration.html"
        ],
        "prefix": "apigatewayv2-integration",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGatewayV2::IntegrationResponse": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGatewayV2::IntegrationResponse",
            "  Properties:",
            "    ApiId: ${2:String} #required",
            "    ContentHandlingStrategy: ${3:String}",
            "    IntegrationId: ${4:String} #required",
            "    IntegrationResponseKey: ${5:String} #required",
            "    ResponseParameters: ${6:Json}",
            "    ResponseTemplates: ${7:Json}",
            "    TemplateSelectionExpression: ${8:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-integrationresponse.html"
        ],
        "prefix": "apigatewayv2-integrationresponse",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGatewayV2::Model": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGatewayV2::Model",
            "  Properties:",
            "    ApiId: ${2:String} #required",
            "    ContentType: ${3:String}",
            "    Description: ${4:String}",
            "    Name: ${5:String} #required",
            "    Schema: ${6:Json} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-model.html"
        ],
        "prefix": "apigatewayv2-model",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGatewayV2::Route": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGatewayV2::Route",
            "  Properties:",
            "    ApiId: ${2:String} #required",
            "    ApiKeyRequired: ${3:Boolean}",
            "    AuthorizationScopes:",
            "      - ${4:String}",
            "    AuthorizationType: ${5:String}",
            "    AuthorizerId: ${6:String}",
            "    ModelSelectionExpression: ${7:String}",
            "    OperationName: ${8:String}",
            "    RequestModels: ${9:Json}",
            "    RequestParameters: ${10:Json}",
            "    RouteKey: ${11:String} #required",
            "    RouteResponseSelectionExpression: ${12:String}",
            "    Target: ${13:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-route.html"
        ],
        "prefix": "apigatewayv2-route",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGatewayV2::RouteResponse": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGatewayV2::RouteResponse",
            "  Properties:",
            "    ApiId: ${2:String} #required",
            "    ModelSelectionExpression: ${3:String}",
            "    ResponseModels: ${4:Json}",
            "    ResponseParameters: ${5:Json}",
            "    RouteId: ${6:String} #required",
            "    RouteResponseKey: ${7:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-routeresponse.html"
        ],
        "prefix": "apigatewayv2-routeresponse",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGatewayV2::Stage": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGatewayV2::Stage",
            "  Properties:",
            "    AccessLogSettings:",
            "      ${2:AccessLogSettings}",
            "    ApiId: ${3:String} #required",
            "    AutoDeploy: ${4:Boolean}",
            "    ClientCertificateId: ${5:String}",
            "    DefaultRouteSettings:",
            "      ${6:RouteSettings}",
            "    DeploymentId: ${7:String}",
            "    Description: ${8:String}",
            "    RouteSettings: ${9:Json}",
            "    StageName: ${10:String} #required",
            "    StageVariables: ${11:Json}",
            "    Tags: ${12:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-stage.html"
        ],
        "prefix": "apigatewayv2-stage",
        "scope": "source.cloudformation"
    },
    "AWS::ApiGatewayV2::VpcLink": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApiGatewayV2::VpcLink",
            "  Properties:",
            "    Name: ${2:String} #required",
            "    SecurityGroupIds:",
            "      - ${3:String}",
            "    SubnetIds: #required",
            "      - ${4:String}",
            "    Tags: ${5:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-vpclink.html"
        ],
        "prefix": "apigatewayv2-vpclink",
        "scope": "source.cloudformation"
    },
    "AWS::AppConfig::Application": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppConfig::Application",
            "  Properties:",
            "    Description: ${2:String}",
            "    Name: ${3:String} #required",
            "    Tags:",
            "      - ${4:Tags}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appconfig-application.html"
        ],
        "prefix": "appconfig-application",
        "scope": "source.cloudformation"
    },
    "AWS::AppConfig::ConfigurationProfile": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppConfig::ConfigurationProfile",
            "  Properties:",
            "    ApplicationId: ${2:String} #required",
            "    Description: ${3:String}",
            "    LocationUri: ${4:String} #required",
            "    Name: ${5:String} #required",
            "    RetrievalRoleArn: ${6:String}",
            "    Tags:",
            "      - ${7:Tags}",
            "    Validators:",
            "      - ${8:Validators}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appconfig-configurationprofile.html"
        ],
        "prefix": "appconfig-configurationprofile",
        "scope": "source.cloudformation"
    },
    "AWS::AppConfig::Deployment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppConfig::Deployment",
            "  Properties:",
            "    ApplicationId: ${2:String} #required",
            "    ConfigurationProfileId: ${3:String} #required",
            "    ConfigurationVersion: ${4:String} #required",
            "    DeploymentStrategyId: ${5:String} #required",
            "    Description: ${6:String}",
            "    EnvironmentId: ${7:String} #required",
            "    Tags:",
            "      - ${8:Tags}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appconfig-deployment.html"
        ],
        "prefix": "appconfig-deployment",
        "scope": "source.cloudformation"
    },
    "AWS::AppConfig::DeploymentStrategy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppConfig::DeploymentStrategy",
            "  Properties:",
            "    DeploymentDurationInMinutes: ${2:Double} #required",
            "    Description: ${3:String}",
            "    FinalBakeTimeInMinutes: ${4:Double}",
            "    GrowthFactor: ${5:Double} #required",
            "    GrowthType: ${6:String}",
            "    Name: ${7:String} #required",
            "    ReplicateTo: ${8:String} #required",
            "    Tags:",
            "      - ${9:Tags}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appconfig-deploymentstrategy.html"
        ],
        "prefix": "appconfig-deploymentstrategy",
        "scope": "source.cloudformation"
    },
    "AWS::AppConfig::Environment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppConfig::Environment",
            "  Properties:",
            "    ApplicationId: ${2:String} #required",
            "    Description: ${3:String}",
            "    Monitors:",
            "      - ${4:Monitors}",
            "    Name: ${5:String} #required",
            "    Tags:",
            "      - ${6:Tags}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appconfig-environment.html"
        ],
        "prefix": "appconfig-environment",
        "scope": "source.cloudformation"
    },
    "AWS::AppConfig::HostedConfigurationVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppConfig::HostedConfigurationVersion",
            "  Properties:",
            "    ApplicationId: ${2:String} #required",
            "    ConfigurationProfileId: ${3:String} #required",
            "    Content: ${4:String} #required",
            "    ContentType: ${5:String} #required",
            "    Description: ${6:String}",
            "    LatestVersionNumber: ${7:Double}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appconfig-hostedconfigurationversion.html"
        ],
        "prefix": "appconfig-hostedconfigurationversion",
        "scope": "source.cloudformation"
    },
    "AWS::AppFlow::ConnectorProfile": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppFlow::ConnectorProfile",
            "  Properties:",
            "    ConnectionMode: ${2:String} #required",
            "    ConnectorProfileConfig:",
            "      ${3:ConnectorProfileConfig}",
            "    ConnectorProfileName: ${4:String} #required",
            "    ConnectorType: ${5:String} #required",
            "    KMSArn: ${6:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appflow-connectorprofile.html",
            "Attributes: ",
            "  ConnectorProfileArn",
            "  CredentialsArn"
        ],
        "prefix": "appflow-connectorprofile",
        "scope": "source.cloudformation"
    },
    "AWS::AppFlow::Flow": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppFlow::Flow",
            "  Properties:",
            "    Description: ${2:String}",
            "    DestinationFlowConfigList: #required",
            "      - ${3:DestinationFlowConfig}",
            "    FlowName: ${4:String} #required",
            "    KMSArn: ${5:String}",
            "    SourceFlowConfig: #required",
            "      ${6:SourceFlowConfig}",
            "    Tags:",
            "      - ${7:Tag}",
            "    Tasks: #required",
            "      - ${8:Task}",
            "    TriggerConfig: #required",
            "      ${9:TriggerConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appflow-flow.html",
            "Attributes: ",
            "  FlowArn"
        ],
        "prefix": "appflow-flow",
        "scope": "source.cloudformation"
    },
    "AWS::AppMesh::GatewayRoute": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppMesh::GatewayRoute",
            "  Properties:",
            "    GatewayRouteName: ${2:String} #required",
            "    MeshName: ${3:String} #required",
            "    MeshOwner: ${4:String}",
            "    Spec: #required",
            "      ${5:GatewayRouteSpec}",
            "    Tags:",
            "      - ${6:Tag}",
            "    VirtualGatewayName: ${7:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appmesh-gatewayroute.html",
            "Attributes: ",
            "  Uid",
            "  MeshName",
            "  VirtualGatewayName",
            "  MeshOwner",
            "  ResourceOwner",
            "  GatewayRouteName",
            "  Arn"
        ],
        "prefix": "appmesh-gatewayroute",
        "scope": "source.cloudformation"
    },
    "AWS::AppMesh::Mesh": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppMesh::Mesh",
            "  Properties:",
            "    MeshName: ${2:String} #required",
            "    Spec:",
            "      ${3:MeshSpec}",
            "    Tags:",
            "      - ${4:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appmesh-mesh.html",
            "Attributes: ",
            "  Uid",
            "  MeshName",
            "  MeshOwner",
            "  ResourceOwner",
            "  Arn"
        ],
        "prefix": "appmesh-mesh",
        "scope": "source.cloudformation"
    },
    "AWS::AppMesh::Route": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppMesh::Route",
            "  Properties:",
            "    MeshName: ${2:String} #required",
            "    MeshOwner: ${3:String}",
            "    RouteName: ${4:String} #required",
            "    Spec: #required",
            "      ${5:RouteSpec}",
            "    Tags:",
            "      - ${6:Tag}",
            "    VirtualRouterName: ${7:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appmesh-route.html",
            "Attributes: ",
            "  Uid",
            "  MeshName",
            "  VirtualRouterName",
            "  MeshOwner",
            "  ResourceOwner",
            "  RouteName",
            "  Arn"
        ],
        "prefix": "appmesh-route",
        "scope": "source.cloudformation"
    },
    "AWS::AppMesh::VirtualGateway": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppMesh::VirtualGateway",
            "  Properties:",
            "    MeshName: ${2:String} #required",
            "    MeshOwner: ${3:String}",
            "    Spec: #required",
            "      ${4:VirtualGatewaySpec}",
            "    Tags:",
            "      - ${5:Tag}",
            "    VirtualGatewayName: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appmesh-virtualgateway.html",
            "Attributes: ",
            "  Uid",
            "  VirtualGatewayName",
            "  MeshName",
            "  MeshOwner",
            "  ResourceOwner",
            "  Arn"
        ],
        "prefix": "appmesh-virtualgateway",
        "scope": "source.cloudformation"
    },
    "AWS::AppMesh::VirtualNode": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppMesh::VirtualNode",
            "  Properties:",
            "    MeshName: ${2:String} #required",
            "    MeshOwner: ${3:String}",
            "    Spec: #required",
            "      ${4:VirtualNodeSpec}",
            "    Tags:",
            "      - ${5:Tag}",
            "    VirtualNodeName: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appmesh-virtualnode.html",
            "Attributes: ",
            "  Uid",
            "  MeshName",
            "  MeshOwner",
            "  ResourceOwner",
            "  Arn",
            "  VirtualNodeName"
        ],
        "prefix": "appmesh-virtualnode",
        "scope": "source.cloudformation"
    },
    "AWS::AppMesh::VirtualRouter": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppMesh::VirtualRouter",
            "  Properties:",
            "    MeshName: ${2:String} #required",
            "    MeshOwner: ${3:String}",
            "    Spec: #required",
            "      ${4:VirtualRouterSpec}",
            "    Tags:",
            "      - ${5:Tag}",
            "    VirtualRouterName: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appmesh-virtualrouter.html",
            "Attributes: ",
            "  Uid",
            "  MeshName",
            "  VirtualRouterName",
            "  MeshOwner",
            "  ResourceOwner",
            "  Arn"
        ],
        "prefix": "appmesh-virtualrouter",
        "scope": "source.cloudformation"
    },
    "AWS::AppMesh::VirtualService": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppMesh::VirtualService",
            "  Properties:",
            "    MeshName: ${2:String} #required",
            "    MeshOwner: ${3:String}",
            "    Spec: #required",
            "      ${4:VirtualServiceSpec}",
            "    Tags:",
            "      - ${5:Tag}",
            "    VirtualServiceName: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appmesh-virtualservice.html",
            "Attributes: ",
            "  Uid",
            "  MeshName",
            "  MeshOwner",
            "  ResourceOwner",
            "  VirtualServiceName",
            "  Arn"
        ],
        "prefix": "appmesh-virtualservice",
        "scope": "source.cloudformation"
    },
    "AWS::AppStream::DirectoryConfig": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppStream::DirectoryConfig",
            "  Properties:",
            "    DirectoryName: ${2:String} #required",
            "    OrganizationalUnitDistinguishedNames: #required",
            "      - ${3:String}",
            "    ServiceAccountCredentials: #required",
            "      ${4:ServiceAccountCredentials}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appstream-directoryconfig.html"
        ],
        "prefix": "appstream-directoryconfig",
        "scope": "source.cloudformation"
    },
    "AWS::AppStream::Fleet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppStream::Fleet",
            "  Properties:",
            "    ComputeCapacity: #required",
            "      ${2:ComputeCapacity}",
            "    Description: ${3:String}",
            "    DisconnectTimeoutInSeconds: ${4:Integer}",
            "    DisplayName: ${5:String}",
            "    DomainJoinInfo:",
            "      ${6:DomainJoinInfo}",
            "    EnableDefaultInternetAccess: ${7:Boolean}",
            "    FleetType: ${8:String}",
            "    IamRoleArn: ${9:String}",
            "    IdleDisconnectTimeoutInSeconds: ${10:Integer}",
            "    ImageArn: ${11:String}",
            "    ImageName: ${12:String}",
            "    InstanceType: ${13:String} #required",
            "    MaxUserDurationInSeconds: ${14:Integer}",
            "    Name: ${15:String} #required",
            "    StreamView: ${16:String}",
            "    Tags:",
            "      - ${17:Tag}",
            "    VpcConfig:",
            "      ${18:VpcConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appstream-fleet.html"
        ],
        "prefix": "appstream-fleet",
        "scope": "source.cloudformation"
    },
    "AWS::AppStream::ImageBuilder": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppStream::ImageBuilder",
            "  Properties:",
            "    AccessEndpoints:",
            "      - ${2:AccessEndpoint}",
            "    AppstreamAgentVersion: ${3:String}",
            "    Description: ${4:String}",
            "    DisplayName: ${5:String}",
            "    DomainJoinInfo:",
            "      ${6:DomainJoinInfo}",
            "    EnableDefaultInternetAccess: ${7:Boolean}",
            "    IamRoleArn: ${8:String}",
            "    ImageArn: ${9:String}",
            "    ImageName: ${10:String}",
            "    InstanceType: ${11:String} #required",
            "    Name: ${12:String} #required",
            "    Tags:",
            "      - ${13:Tag}",
            "    VpcConfig:",
            "      ${14:VpcConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appstream-imagebuilder.html",
            "Attributes: ",
            "  StreamingUrl"
        ],
        "prefix": "appstream-imagebuilder",
        "scope": "source.cloudformation"
    },
    "AWS::AppStream::Stack": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppStream::Stack",
            "  Properties:",
            "    AccessEndpoints:",
            "      - ${2:AccessEndpoint}",
            "    ApplicationSettings:",
            "      ${3:ApplicationSettings}",
            "    AttributesToDelete:",
            "      - ${4:String}",
            "    DeleteStorageConnectors: ${5:Boolean}",
            "    Description: ${6:String}",
            "    DisplayName: ${7:String}",
            "    EmbedHostDomains:",
            "      - ${8:String}",
            "    FeedbackURL: ${9:String}",
            "    Name: ${10:String}",
            "    RedirectURL: ${11:String}",
            "    StorageConnectors:",
            "      - ${12:StorageConnector}",
            "    Tags:",
            "      - ${13:Tag}",
            "    UserSettings:",
            "      - ${14:UserSetting}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appstream-stack.html"
        ],
        "prefix": "appstream-stack",
        "scope": "source.cloudformation"
    },
    "AWS::AppStream::StackFleetAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppStream::StackFleetAssociation",
            "  Properties:",
            "    FleetName: ${2:String} #required",
            "    StackName: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appstream-stackfleetassociation.html"
        ],
        "prefix": "appstream-stackfleetassociation",
        "scope": "source.cloudformation"
    },
    "AWS::AppStream::StackUserAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppStream::StackUserAssociation",
            "  Properties:",
            "    AuthenticationType: ${2:String} #required",
            "    SendEmailNotification: ${3:Boolean}",
            "    StackName: ${4:String} #required",
            "    UserName: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appstream-stackuserassociation.html"
        ],
        "prefix": "appstream-stackuserassociation",
        "scope": "source.cloudformation"
    },
    "AWS::AppStream::User": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppStream::User",
            "  Properties:",
            "    AuthenticationType: ${2:String} #required",
            "    FirstName: ${3:String}",
            "    LastName: ${4:String}",
            "    MessageAction: ${5:String}",
            "    UserName: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appstream-user.html"
        ],
        "prefix": "appstream-user",
        "scope": "source.cloudformation"
    },
    "AWS::AppSync::ApiCache": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppSync::ApiCache",
            "  Properties:",
            "    ApiCachingBehavior: ${2:String} #required",
            "    ApiId: ${3:String} #required",
            "    AtRestEncryptionEnabled: ${4:Boolean}",
            "    TransitEncryptionEnabled: ${5:Boolean}",
            "    Ttl: ${6:Double} #required",
            "    Type: ${7:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apicache.html"
        ],
        "prefix": "appsync-apicache",
        "scope": "source.cloudformation"
    },
    "AWS::AppSync::ApiKey": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppSync::ApiKey",
            "  Properties:",
            "    ApiId: ${2:String} #required",
            "    ApiKeyId: ${3:String}",
            "    Description: ${4:String}",
            "    Expires: ${5:Double}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-apikey.html",
            "Attributes: ",
            "  ApiKey",
            "  Arn"
        ],
        "prefix": "appsync-apikey",
        "scope": "source.cloudformation"
    },
    "AWS::AppSync::DataSource": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppSync::DataSource",
            "  Properties:",
            "    ApiId: ${2:String} #required",
            "    Description: ${3:String}",
            "    DynamoDBConfig:",
            "      ${4:DynamoDBConfig}",
            "    ElasticsearchConfig:",
            "      ${5:ElasticsearchConfig}",
            "    HttpConfig:",
            "      ${6:HttpConfig}",
            "    LambdaConfig:",
            "      ${7:LambdaConfig}",
            "    Name: ${8:String} #required",
            "    RelationalDatabaseConfig:",
            "      ${9:RelationalDatabaseConfig}",
            "    ServiceRoleArn: ${10:String}",
            "    Type: ${11:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html",
            "Attributes: ",
            "  DataSourceArn",
            "  Name"
        ],
        "prefix": "appsync-datasource",
        "scope": "source.cloudformation"
    },
    "AWS::AppSync::FunctionConfiguration": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppSync::FunctionConfiguration",
            "  Properties:",
            "    ApiId: ${2:String} #required",
            "    DataSourceName: ${3:String} #required",
            "    Description: ${4:String}",
            "    FunctionVersion: ${5:String} #required",
            "    Name: ${6:String} #required",
            "    RequestMappingTemplate: ${7:String}",
            "    RequestMappingTemplateS3Location: ${8:String}",
            "    ResponseMappingTemplate: ${9:String}",
            "    ResponseMappingTemplateS3Location: ${10:String}",
            "    SyncConfig:",
            "      ${11:SyncConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html",
            "Attributes: ",
            "  FunctionId",
            "  FunctionArn",
            "  DataSourceName",
            "  Name"
        ],
        "prefix": "appsync-functionconfiguration",
        "scope": "source.cloudformation"
    },
    "AWS::AppSync::GraphQLApi": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppSync::GraphQLApi",
            "  Properties:",
            "    AdditionalAuthenticationProviders:",
            "      ${2:AdditionalAuthenticationProviders}",
            "    AuthenticationType: ${3:String} #required",
            "    LogConfig:",
            "      ${4:LogConfig}",
            "    Name: ${5:String} #required",
            "    OpenIDConnectConfig:",
            "      ${6:OpenIDConnectConfig}",
            "    Tags:",
            "      ${7:Tags}",
            "    UserPoolConfig:",
            "      ${8:UserPoolConfig}",
            "    XrayEnabled: ${9:Boolean}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlapi.html",
            "Attributes: ",
            "  GraphQLUrl",
            "  Arn",
            "  ApiId"
        ],
        "prefix": "appsync-graphqlapi",
        "scope": "source.cloudformation"
    },
    "AWS::AppSync::GraphQLSchema": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppSync::GraphQLSchema",
            "  Properties:",
            "    ApiId: ${2:String} #required",
            "    Definition: ${3:String}",
            "    DefinitionS3Location: ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-graphqlschema.html"
        ],
        "prefix": "appsync-graphqlschema",
        "scope": "source.cloudformation"
    },
    "AWS::AppSync::Resolver": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AppSync::Resolver",
            "  Properties:",
            "    ApiId: ${2:String} #required",
            "    CachingConfig:",
            "      ${3:CachingConfig}",
            "    DataSourceName: ${4:String}",
            "    FieldName: ${5:String} #required",
            "    Kind: ${6:String}",
            "    PipelineConfig:",
            "      ${7:PipelineConfig}",
            "    RequestMappingTemplate: ${8:String}",
            "    RequestMappingTemplateS3Location: ${9:String}",
            "    ResponseMappingTemplate: ${10:String}",
            "    ResponseMappingTemplateS3Location: ${11:String}",
            "    SyncConfig:",
            "      ${12:SyncConfig}",
            "    TypeName: ${13:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html",
            "Attributes: ",
            "  TypeName",
            "  ResolverArn",
            "  FieldName"
        ],
        "prefix": "appsync-resolver",
        "scope": "source.cloudformation"
    },
    "AWS::ApplicationAutoScaling::ScalableTarget": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApplicationAutoScaling::ScalableTarget",
            "  Properties:",
            "    MaxCapacity: ${2:Integer} #required",
            "    MinCapacity: ${3:Integer} #required",
            "    ResourceId: ${4:String} #required",
            "    RoleARN: ${5:String} #required",
            "    ScalableDimension: ${6:String} #required",
            "    ScheduledActions:",
            "      - ${7:ScheduledAction}",
            "    ServiceNamespace: ${8:String} #required",
            "    SuspendedState:",
            "      ${9:SuspendedState}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationautoscaling-scalabletarget.html"
        ],
        "prefix": "applicationautoscaling-scalabletarget",
        "scope": "source.cloudformation"
    },
    "AWS::ApplicationAutoScaling::ScalingPolicy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApplicationAutoScaling::ScalingPolicy",
            "  Properties:",
            "    PolicyName: ${2:String} #required",
            "    PolicyType: ${3:String} #required",
            "    ResourceId: ${4:String}",
            "    ScalableDimension: ${5:String}",
            "    ScalingTargetId: ${6:String}",
            "    ServiceNamespace: ${7:String}",
            "    StepScalingPolicyConfiguration:",
            "      ${8:StepScalingPolicyConfiguration}",
            "    TargetTrackingScalingPolicyConfiguration:",
            "      ${9:TargetTrackingScalingPolicyConfiguration}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationautoscaling-scalingpolicy.html"
        ],
        "prefix": "applicationautoscaling-scalingpolicy",
        "scope": "source.cloudformation"
    },
    "AWS::ApplicationInsights::Application": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ApplicationInsights::Application",
            "  Properties:",
            "    AutoConfigurationEnabled: ${2:Boolean}",
            "    CWEMonitorEnabled: ${3:Boolean}",
            "    ComponentMonitoringSettings:",
            "      - ${4:ComponentMonitoringSetting}",
            "    CustomComponents:",
            "      - ${5:CustomComponent}",
            "    LogPatternSets:",
            "      - ${6:LogPatternSet}",
            "    OpsCenterEnabled: ${7:Boolean}",
            "    OpsItemSNSTopicArn: ${8:String}",
            "    ResourceGroupName: ${9:String} #required",
            "    Tags:",
            "      - ${10:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-applicationinsights-application.html",
            "Attributes: ",
            "  ApplicationARN"
        ],
        "prefix": "applicationinsights-application",
        "scope": "source.cloudformation"
    },
    "AWS::Athena::DataCatalog": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Athena::DataCatalog",
            "  Properties:",
            "    Description: ${2:String}",
            "    Name: ${3:String} #required",
            "    Parameters:",
            "      ${4:Map}",
            "    Tags:",
            "      ${5:Tags}",
            "    Type: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-athena-datacatalog.html"
        ],
        "prefix": "athena-datacatalog",
        "scope": "source.cloudformation"
    },
    "AWS::Athena::NamedQuery": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Athena::NamedQuery",
            "  Properties:",
            "    Database: ${2:String} #required",
            "    Description: ${3:String}",
            "    Name: ${4:String}",
            "    QueryString: ${5:String} #required",
            "    WorkGroup: ${6:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-athena-namedquery.html",
            "Attributes: ",
            "  NamedQueryId"
        ],
        "prefix": "athena-namedquery",
        "scope": "source.cloudformation"
    },
    "AWS::Athena::WorkGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Athena::WorkGroup",
            "  Properties:",
            "    Description: ${2:String}",
            "    Name: ${3:String} #required",
            "    RecursiveDeleteOption: ${4:Boolean}",
            "    State: ${5:String}",
            "    Tags:",
            "      ${6:Tags}",
            "    WorkGroupConfiguration:",
            "      ${7:WorkGroupConfiguration}",
            "    WorkGroupConfigurationUpdates:",
            "      ${8:WorkGroupConfigurationUpdates}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-athena-workgroup.html",
            "Attributes: ",
            "  CreationTime"
        ],
        "prefix": "athena-workgroup",
        "scope": "source.cloudformation"
    },
    "AWS::AuditManager::Assessment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AuditManager::Assessment",
            "  Properties:",
            "    assessmentReportsDestination:",
            "      ${2:AssessmentReportsDestination}",
            "    awsAccount:",
            "      ${3:AWSAccount}",
            "    description: ${4:String}",
            "    frameworkId: ${5:String}",
            "    name: ${6:String}",
            "    roles:",
            "      ${7:Roles}",
            "    scope:",
            "      ${8:Scope}",
            "    status: ${9:String}",
            "    tags:",
            "      ${10:Tags}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-auditmanager-assessment.html",
            "Attributes: ",
            "  frameworkId",
            "  assessmentId",
            "  arn",
            "  delegations",
            "  creationTime"
        ],
        "prefix": "auditmanager-assessment",
        "scope": "source.cloudformation"
    },
    "AWS::AutoScaling::AutoScalingGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AutoScaling::AutoScalingGroup",
            "  Properties:",
            "    AutoScalingGroupName: ${2:String}",
            "    AvailabilityZones:",
            "      - ${3:String}",
            "    CapacityRebalance: ${4:Boolean}",
            "    Cooldown: ${5:String}",
            "    DesiredCapacity: ${6:String}",
            "    HealthCheckGracePeriod: ${7:Integer}",
            "    HealthCheckType: ${8:String}",
            "    InstanceId: ${9:String}",
            "    LaunchConfigurationName: ${10:String}",
            "    LaunchTemplate:",
            "      ${11:LaunchTemplateSpecification}",
            "    LifecycleHookSpecificationList:",
            "      - ${12:LifecycleHookSpecification}",
            "    LoadBalancerNames:",
            "      - ${13:String}",
            "    MaxInstanceLifetime: ${14:Integer}",
            "    MaxSize: ${15:String} #required",
            "    MetricsCollection:",
            "      - ${16:MetricsCollection}",
            "    MinSize: ${17:String} #required",
            "    MixedInstancesPolicy:",
            "      ${18:MixedInstancesPolicy}",
            "    NewInstancesProtectedFromScaleIn: ${19:Boolean}",
            "    NotificationConfigurations:",
            "      - ${20:NotificationConfiguration}",
            "    PlacementGroup: ${21:String}",
            "    ServiceLinkedRoleARN: ${22:String}",
            "    Tags:",
            "      - ${23:TagProperty}",
            "    TargetGroupARNs:",
            "      - ${24:String}",
            "    TerminationPolicies:",
            "      - ${25:String}",
            "    VPCZoneIdentifier:",
            "      - ${26:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html",
            "Attributes: ",
            "  LaunchConfigurationName",
            "  LaunchTemplateSpecification",
            "  MixedInstancesPolicy",
            "  PlacementGroup",
            "  VPCZoneIdentifier"
        ],
        "prefix": "autoscaling-autoscalinggroup",
        "scope": "source.cloudformation"
    },
    "AWS::AutoScaling::LaunchConfiguration": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AutoScaling::LaunchConfiguration",
            "  Properties:",
            "    AssociatePublicIpAddress: ${2:Boolean}",
            "    BlockDeviceMappings:",
            "      - ${3:BlockDeviceMapping}",
            "    ClassicLinkVPCId: ${4:String}",
            "    ClassicLinkVPCSecurityGroups:",
            "      - ${5:String}",
            "    EbsOptimized: ${6:Boolean}",
            "    IamInstanceProfile: ${7:String}",
            "    ImageId: ${8:String} #required",
            "    InstanceId: ${9:String}",
            "    InstanceMonitoring: ${10:Boolean}",
            "    InstanceType: ${11:String} #required",
            "    KernelId: ${12:String}",
            "    KeyName: ${13:String}",
            "    LaunchConfigurationName: ${14:String}",
            "    MetadataOptions:",
            "      ${15:MetadataOptions}",
            "    PlacementTenancy: ${16:String}",
            "    RamDiskId: ${17:String}",
            "    SecurityGroups:",
            "      - ${18:String}",
            "    SpotPrice: ${19:String}",
            "    UserData: ${20:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html"
        ],
        "prefix": "autoscaling-launchconfiguration",
        "scope": "source.cloudformation"
    },
    "AWS::AutoScaling::LifecycleHook": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AutoScaling::LifecycleHook",
            "  Properties:",
            "    AutoScalingGroupName: ${2:String} #required",
            "    DefaultResult: ${3:String}",
            "    HeartbeatTimeout: ${4:Integer}",
            "    LifecycleHookName: ${5:String}",
            "    LifecycleTransition: ${6:String} #required",
            "    NotificationMetadata: ${7:String}",
            "    NotificationTargetARN: ${8:String}",
            "    RoleARN: ${9:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-as-lifecyclehook.html"
        ],
        "prefix": "autoscaling-lifecyclehook",
        "scope": "source.cloudformation"
    },
    "AWS::AutoScaling::ScalingPolicy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AutoScaling::ScalingPolicy",
            "  Properties:",
            "    AdjustmentType: ${2:String}",
            "    AutoScalingGroupName: ${3:String} #required",
            "    Cooldown: ${4:String}",
            "    EstimatedInstanceWarmup: ${5:Integer}",
            "    MetricAggregationType: ${6:String}",
            "    MinAdjustmentMagnitude: ${7:Integer}",
            "    PolicyType: ${8:String}",
            "    ScalingAdjustment: ${9:Integer}",
            "    StepAdjustments:",
            "      - ${10:StepAdjustment}",
            "    TargetTrackingConfiguration:",
            "      ${11:TargetTrackingConfiguration}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-policy.html"
        ],
        "prefix": "autoscaling-scalingpolicy",
        "scope": "source.cloudformation"
    },
    "AWS::AutoScaling::ScheduledAction": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AutoScaling::ScheduledAction",
            "  Properties:",
            "    AutoScalingGroupName: ${2:String} #required",
            "    DesiredCapacity: ${3:Integer}",
            "    EndTime: ${4:String}",
            "    MaxSize: ${5:Integer}",
            "    MinSize: ${6:Integer}",
            "    Recurrence: ${7:String}",
            "    StartTime: ${8:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-as-scheduledaction.html"
        ],
        "prefix": "autoscaling-scheduledaction",
        "scope": "source.cloudformation"
    },
    "AWS::AutoScalingPlans::ScalingPlan": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::AutoScalingPlans::ScalingPlan",
            "  Properties:",
            "    ApplicationSource: #required",
            "      ${2:ApplicationSource}",
            "    ScalingInstructions: #required",
            "      - ${3:ScalingInstruction}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscalingplans-scalingplan.html",
            "Attributes: ",
            "  ScalingPlanName",
            "  ScalingPlanVersion"
        ],
        "prefix": "autoscalingplans-scalingplan",
        "scope": "source.cloudformation"
    },
    "AWS::Backup::BackupPlan": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Backup::BackupPlan",
            "  Properties:",
            "    BackupPlan: #required",
            "      ${2:BackupPlanResourceType}",
            "    BackupPlanTags: ${3:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-backup-backupplan.html",
            "Attributes: ",
            "  VersionId",
            "  BackupPlanId",
            "  BackupPlanArn"
        ],
        "prefix": "backup-backupplan",
        "scope": "source.cloudformation"
    },
    "AWS::Backup::BackupSelection": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Backup::BackupSelection",
            "  Properties:",
            "    BackupPlanId: ${2:String} #required",
            "    BackupSelection: #required",
            "      ${3:BackupSelectionResourceType}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-backup-backupselection.html",
            "Attributes: ",
            "  BackupPlanId",
            "  SelectionId"
        ],
        "prefix": "backup-backupselection",
        "scope": "source.cloudformation"
    },
    "AWS::Backup::BackupVault": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Backup::BackupVault",
            "  Properties:",
            "    AccessPolicy: ${2:Json}",
            "    BackupVaultName: ${3:String} #required",
            "    BackupVaultTags: ${4:Json}",
            "    EncryptionKeyArn: ${5:String}",
            "    Notifications:",
            "      ${6:NotificationObjectType}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-backup-backupvault.html",
            "Attributes: ",
            "  BackupVaultName",
            "  BackupVaultArn"
        ],
        "prefix": "backup-backupvault",
        "scope": "source.cloudformation"
    },
    "AWS::Batch::ComputeEnvironment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Batch::ComputeEnvironment",
            "  Properties:",
            "    ComputeEnvironmentName: ${2:String}",
            "    ComputeResources:",
            "      ${3:ComputeResources}",
            "    ServiceRole: ${4:String} #required",
            "    State: ${5:String}",
            "    Tags: ${6:Json}",
            "    Type: ${7:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-batch-computeenvironment.html"
        ],
        "prefix": "batch-computeenvironment",
        "scope": "source.cloudformation"
    },
    "AWS::Batch::JobDefinition": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Batch::JobDefinition",
            "  Properties:",
            "    ContainerProperties:",
            "      ${2:ContainerProperties}",
            "    JobDefinitionName: ${3:String}",
            "    NodeProperties:",
            "      ${4:NodeProperties}",
            "    Parameters: ${5:Json}",
            "    PlatformCapabilities:",
            "      - ${6:String}",
            "    PropagateTags: ${7:Boolean}",
            "    RetryStrategy:",
            "      ${8:RetryStrategy}",
            "    Tags: ${9:Json}",
            "    Timeout:",
            "      ${10:Timeout}",
            "    Type: ${11:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-batch-jobdefinition.html"
        ],
        "prefix": "batch-jobdefinition",
        "scope": "source.cloudformation"
    },
    "AWS::Batch::JobQueue": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Batch::JobQueue",
            "  Properties:",
            "    ComputeEnvironmentOrder: #required",
            "      - ${2:ComputeEnvironmentOrder}",
            "    JobQueueName: ${3:String}",
            "    Priority: ${4:Integer} #required",
            "    State: ${5:String}",
            "    Tags: ${6:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-batch-jobqueue.html"
        ],
        "prefix": "batch-jobqueue",
        "scope": "source.cloudformation"
    },
    "AWS::Budgets::Budget": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Budgets::Budget",
            "  Properties:",
            "    Budget: #required",
            "      ${2:BudgetData}",
            "    NotificationsWithSubscribers:",
            "      - ${3:NotificationWithSubscribers}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-budgets-budget.html"
        ],
        "prefix": "budgets-budget",
        "scope": "source.cloudformation"
    },
    "AWS::CE::CostCategory": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CE::CostCategory",
            "  Properties:",
            "    Name: ${2:String} #required",
            "    RuleVersion: ${3:String} #required",
            "    Rules: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ce-costcategory.html",
            "Attributes: ",
            "  Arn",
            "  EffectiveStart"
        ],
        "prefix": "ce-costcategory",
        "scope": "source.cloudformation"
    },
    "AWS::Cassandra::Keyspace": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Cassandra::Keyspace",
            "  Properties:",
            "    KeyspaceName: ${2:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cassandra-keyspace.html"
        ],
        "prefix": "cassandra-keyspace",
        "scope": "source.cloudformation"
    },
    "AWS::Cassandra::Table": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Cassandra::Table",
            "  Properties:",
            "    BillingMode:",
            "      ${2:BillingMode}",
            "    ClusteringKeyColumns:",
            "      - ${3:ClusteringKeyColumn}",
            "    KeyspaceName: ${4:String} #required",
            "    PartitionKeyColumns: #required",
            "      - ${5:Column}",
            "    RegularColumns:",
            "      - ${6:Column}",
            "    TableName: ${7:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cassandra-table.html"
        ],
        "prefix": "cassandra-table",
        "scope": "source.cloudformation"
    },
    "AWS::CertificateManager::Certificate": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CertificateManager::Certificate",
            "  Properties:",
            "    CertificateAuthorityArn: ${2:String}",
            "    CertificateTransparencyLoggingPreference: ${3:String}",
            "    DomainName: ${4:String} #required",
            "    DomainValidationOptions:",
            "      - ${5:DomainValidationOption}",
            "    SubjectAlternativeNames:",
            "      - ${6:String}",
            "    Tags:",
            "      - ${7:Tag}",
            "    ValidationMethod: ${8:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html"
        ],
        "prefix": "certificatemanager-certificate",
        "scope": "source.cloudformation"
    },
    "AWS::Chatbot::SlackChannelConfiguration": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Chatbot::SlackChannelConfiguration",
            "  Properties:",
            "    ConfigurationName: ${2:String} #required",
            "    IamRoleArn: ${3:String} #required",
            "    LoggingLevel: ${4:String}",
            "    SlackChannelId: ${5:String} #required",
            "    SlackWorkspaceId: ${6:String} #required",
            "    SnsTopicArns:",
            "      - ${7:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-chatbot-slackchannelconfiguration.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "chatbot-slackchannelconfiguration",
        "scope": "source.cloudformation"
    },
    "AWS::Cloud9::EnvironmentEC2": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Cloud9::EnvironmentEC2",
            "  Properties:",
            "    AutomaticStopTimeMinutes: ${2:Integer}",
            "    ConnectionType: ${3:String}",
            "    Description: ${4:String}",
            "    InstanceType: ${5:String} #required",
            "    Name: ${6:String}",
            "    OwnerArn: ${7:String}",
            "    Repositories:",
            "      - ${8:Repository}",
            "    SubnetId: ${9:String}",
            "    Tags:",
            "      - ${10:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloud9-environmentec2.html",
            "Attributes: ",
            "  Arn",
            "  Name"
        ],
        "prefix": "cloud9-environmentec2",
        "scope": "source.cloudformation"
    },
    "AWS::CloudFormation::CustomResource": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudFormation::CustomResource",
            "  Properties:",
            "    ServiceToken: ${2:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html"
        ],
        "prefix": "cloudformation-customresource",
        "scope": "source.cloudformation"
    },
    "AWS::CloudFormation::Macro": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudFormation::Macro",
            "  Properties:",
            "    Description: ${2:String}",
            "    FunctionName: ${3:String} #required",
            "    LogGroupName: ${4:String}",
            "    LogRoleARN: ${5:String}",
            "    Name: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-macro.html"
        ],
        "prefix": "cloudformation-macro",
        "scope": "source.cloudformation"
    },
    "AWS::CloudFormation::ModuleDefaultVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudFormation::ModuleDefaultVersion",
            "  Properties:",
            "    Arn: ${2:String}",
            "    ModuleName: ${3:String}",
            "    VersionId: ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-moduledefaultversion.html"
        ],
        "prefix": "cloudformation-moduledefaultversion",
        "scope": "source.cloudformation"
    },
    "AWS::CloudFormation::ModuleVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudFormation::ModuleVersion",
            "  Properties:",
            "    ModuleName: ${2:String} #required",
            "    ModulePackage: ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-moduleversion.html",
            "Attributes: ",
            "  Arn",
            "  Description",
            "  DocumentationUrl",
            "  IsDefaultVersion",
            "  Schema",
            "  TimeCreated",
            "  VersionId",
            "  Visibility"
        ],
        "prefix": "cloudformation-moduleversion",
        "scope": "source.cloudformation"
    },
    "AWS::CloudFormation::Stack": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudFormation::Stack",
            "  Properties:",
            "    NotificationARNs:",
            "      - ${2:String}",
            "    Parameters:",
            "      ${3:Map}",
            "    Tags:",
            "      - ${4:Tag}",
            "    TemplateURL: ${5:String} #required",
            "    TimeoutInMinutes: ${6:Integer}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-stack.html"
        ],
        "prefix": "cloudformation-stack",
        "scope": "source.cloudformation"
    },
    "AWS::CloudFormation::StackSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudFormation::StackSet",
            "  Properties:",
            "    AdministrationRoleARN: ${2:String}",
            "    AutoDeployment:",
            "      ${3:AutoDeployment}",
            "    Capabilities:",
            "      - ${4:String}",
            "    Description: ${5:String}",
            "    ExecutionRoleName: ${6:String}",
            "    OperationPreferences:",
            "      ${7:OperationPreferences}",
            "    Parameters:",
            "      - ${8:Parameter}",
            "    PermissionModel: ${9:String} #required",
            "    StackInstancesGroup:",
            "      - ${10:StackInstances}",
            "    StackSetName: ${11:String} #required",
            "    Tags:",
            "      - ${12:Tag}",
            "    TemplateBody: ${13:String}",
            "    TemplateURL: ${14:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-stackset.html",
            "Attributes: ",
            "  StackSetId"
        ],
        "prefix": "cloudformation-stackset",
        "scope": "source.cloudformation"
    },
    "AWS::CloudFormation::WaitCondition": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudFormation::WaitCondition",
            "  Properties:",
            "    Count: ${2:Integer}",
            "    Handle: ${3:String}",
            "    Timeout: ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-waitcondition.html",
            "Attributes: ",
            "  Data"
        ],
        "prefix": "cloudformation-waitcondition",
        "scope": "source.cloudformation"
    },
    "AWS::CloudFront::CachePolicy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudFront::CachePolicy",
            "  Properties:",
            "    CachePolicyConfig: #required",
            "      ${2:CachePolicyConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-cachepolicy.html",
            "Attributes: ",
            "  Id",
            "  LastModifiedTime"
        ],
        "prefix": "cloudfront-cachepolicy",
        "scope": "source.cloudformation"
    },
    "AWS::CloudFront::CloudFrontOriginAccessIdentity": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudFront::CloudFrontOriginAccessIdentity",
            "  Properties:",
            "    CloudFrontOriginAccessIdentityConfig: #required",
            "      ${2:CloudFrontOriginAccessIdentityConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-cloudfrontoriginaccessidentity.html",
            "Attributes: ",
            "  S3CanonicalUserId"
        ],
        "prefix": "cloudfront-cloudfrontoriginaccessidentity",
        "scope": "source.cloudformation"
    },
    "AWS::CloudFront::Distribution": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudFront::Distribution",
            "  Properties:",
            "    DistributionConfig: #required",
            "      ${2:DistributionConfig}",
            "    Tags:",
            "      - ${3:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-distribution.html",
            "Attributes: ",
            "  DomainName"
        ],
        "prefix": "cloudfront-distribution",
        "scope": "source.cloudformation"
    },
    "AWS::CloudFront::KeyGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudFront::KeyGroup",
            "  Properties:",
            "    KeyGroupConfig: #required",
            "      ${2:KeyGroupConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-keygroup.html",
            "Attributes: ",
            "  Id",
            "  LastModifiedTime"
        ],
        "prefix": "cloudfront-keygroup",
        "scope": "source.cloudformation"
    },
    "AWS::CloudFront::OriginRequestPolicy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudFront::OriginRequestPolicy",
            "  Properties:",
            "    OriginRequestPolicyConfig: #required",
            "      ${2:OriginRequestPolicyConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-originrequestpolicy.html",
            "Attributes: ",
            "  Id",
            "  LastModifiedTime"
        ],
        "prefix": "cloudfront-originrequestpolicy",
        "scope": "source.cloudformation"
    },
    "AWS::CloudFront::PublicKey": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudFront::PublicKey",
            "  Properties:",
            "    PublicKeyConfig: #required",
            "      ${2:PublicKeyConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-publickey.html",
            "Attributes: ",
            "  CreatedTime",
            "  Id"
        ],
        "prefix": "cloudfront-publickey",
        "scope": "source.cloudformation"
    },
    "AWS::CloudFront::RealtimeLogConfig": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudFront::RealtimeLogConfig",
            "  Properties:",
            "    EndPoints: #required",
            "      - ${2:EndPoint}",
            "    Fields: #required",
            "      - ${3:String}",
            "    Name: ${4:String} #required",
            "    SamplingRate: ${5:Double} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-realtimelogconfig.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "cloudfront-realtimelogconfig",
        "scope": "source.cloudformation"
    },
    "AWS::CloudFront::StreamingDistribution": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudFront::StreamingDistribution",
            "  Properties:",
            "    StreamingDistributionConfig: #required",
            "      ${2:StreamingDistributionConfig}",
            "    Tags: #required",
            "      - ${3:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-streamingdistribution.html",
            "Attributes: ",
            "  DomainName"
        ],
        "prefix": "cloudfront-streamingdistribution",
        "scope": "source.cloudformation"
    },
    "AWS::CloudTrail::Trail": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudTrail::Trail",
            "  Properties:",
            "    CloudWatchLogsLogGroupArn: ${2:String}",
            "    CloudWatchLogsRoleArn: ${3:String}",
            "    EnableLogFileValidation: ${4:Boolean}",
            "    EventSelectors:",
            "      - ${5:EventSelector}",
            "    IncludeGlobalServiceEvents: ${6:Boolean}",
            "    IsLogging: ${7:Boolean} #required",
            "    IsMultiRegionTrail: ${8:Boolean}",
            "    KMSKeyId: ${9:String}",
            "    S3BucketName: ${10:String} #required",
            "    S3KeyPrefix: ${11:String}",
            "    SnsTopicName: ${12:String}",
            "    Tags:",
            "      - ${13:Tag}",
            "    TrailName: ${14:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudtrail-trail.html",
            "Attributes: ",
            "  Arn",
            "  SnsTopicArn"
        ],
        "prefix": "cloudtrail-trail",
        "scope": "source.cloudformation"
    },
    "AWS::CloudWatch::Alarm": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudWatch::Alarm",
            "  Properties:",
            "    ActionsEnabled: ${2:Boolean}",
            "    AlarmActions:",
            "      - ${3:String}",
            "    AlarmDescription: ${4:String}",
            "    AlarmName: ${5:String}",
            "    ComparisonOperator: ${6:String} #required",
            "    DatapointsToAlarm: ${7:Integer}",
            "    Dimensions:",
            "      - ${8:Dimension}",
            "    EvaluateLowSampleCountPercentile: ${9:String}",
            "    EvaluationPeriods: ${10:Integer} #required",
            "    ExtendedStatistic: ${11:String}",
            "    InsufficientDataActions:",
            "      - ${12:String}",
            "    MetricName: ${13:String}",
            "    Metrics:",
            "      - ${14:MetricDataQuery}",
            "    Namespace: ${15:String}",
            "    OKActions:",
            "      - ${16:String}",
            "    Period: ${17:Integer}",
            "    Statistic: ${18:String}",
            "    Threshold: ${19:Double}",
            "    ThresholdMetricId: ${20:String}",
            "    TreatMissingData: ${21:String}",
            "    Unit: ${22:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "cloudwatch-alarm",
        "scope": "source.cloudformation"
    },
    "AWS::CloudWatch::AnomalyDetector": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudWatch::AnomalyDetector",
            "  Properties:",
            "    Configuration:",
            "      ${2:Configuration}",
            "    Dimensions:",
            "      - ${3:Dimension}",
            "    MetricName: ${4:String} #required",
            "    Namespace: ${5:String} #required",
            "    Stat: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html"
        ],
        "prefix": "cloudwatch-anomalydetector",
        "scope": "source.cloudformation"
    },
    "AWS::CloudWatch::CompositeAlarm": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudWatch::CompositeAlarm",
            "  Properties:",
            "    ActionsEnabled: ${2:Boolean}",
            "    AlarmActions:",
            "      - ${3:String}",
            "    AlarmDescription: ${4:String}",
            "    AlarmName: ${5:String} #required",
            "    AlarmRule: ${6:String} #required",
            "    InsufficientDataActions:",
            "      - ${7:String}",
            "    OKActions:",
            "      - ${8:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-compositealarm.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "cloudwatch-compositealarm",
        "scope": "source.cloudformation"
    },
    "AWS::CloudWatch::Dashboard": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudWatch::Dashboard",
            "  Properties:",
            "    DashboardBody: ${2:String} #required",
            "    DashboardName: ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-dashboard.html"
        ],
        "prefix": "cloudwatch-dashboard",
        "scope": "source.cloudformation"
    },
    "AWS::CloudWatch::InsightRule": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudWatch::InsightRule",
            "  Properties:",
            "    RuleBody: ${2:String} #required",
            "    RuleName: ${3:String} #required",
            "    RuleState: ${4:String} #required",
            "    Tags:",
            "      ${5:Tags}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-insightrule.html",
            "Attributes: ",
            "  Arn",
            "  RuleName"
        ],
        "prefix": "cloudwatch-insightrule",
        "scope": "source.cloudformation"
    },
    "AWS::CloudWatch::MetricStream": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CloudWatch::MetricStream",
            "  Properties:",
            "    ExcludeFilters:",
            "      - ${2:MetricStreamFilter}",
            "    FirehoseArn: ${3:String} #required",
            "    IncludeFilters:",
            "      - ${4:MetricStreamFilter}",
            "    Name: ${5:String}",
            "    RoleArn: ${6:String} #required",
            "    Tags:",
            "      - ${7:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-metricstream.html",
            "Attributes: ",
            "  Arn",
            "  CreationDate",
            "  LastUpdateDate",
            "  State"
        ],
        "prefix": "cloudwatch-metricstream",
        "scope": "source.cloudformation"
    },
    "AWS::CodeArtifact::Domain": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CodeArtifact::Domain",
            "  Properties:",
            "    DomainName: ${2:String} #required",
            "    EncryptionKey: ${3:String}",
            "    PermissionsPolicyDocument: ${4:Json}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codeartifact-domain.html",
            "Attributes: ",
            "  Name",
            "  Owner",
            "  EncryptionKey",
            "  Arn"
        ],
        "prefix": "codeartifact-domain",
        "scope": "source.cloudformation"
    },
    "AWS::CodeArtifact::Repository": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CodeArtifact::Repository",
            "  Properties:",
            "    Description: ${2:String}",
            "    DomainName: ${3:String} #required",
            "    DomainOwner: ${4:String}",
            "    ExternalConnections:",
            "      - ${5:String}",
            "    PermissionsPolicyDocument: ${6:Json}",
            "    RepositoryName: ${7:String} #required",
            "    Tags:",
            "      - ${8:Tag}",
            "    Upstreams:",
            "      - ${9:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codeartifact-repository.html",
            "Attributes: ",
            "  Name",
            "  DomainName",
            "  DomainOwner",
            "  Arn"
        ],
        "prefix": "codeartifact-repository",
        "scope": "source.cloudformation"
    },
    "AWS::CodeBuild::Project": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CodeBuild::Project",
            "  Properties:",
            "    Artifacts: #required",
            "      ${2:Artifacts}",
            "    BadgeEnabled: ${3:Boolean}",
            "    BuildBatchConfig:",
            "      ${4:ProjectBuildBatchConfig}",
            "    Cache:",
            "      ${5:ProjectCache}",
            "    Description: ${6:String}",
            "    EncryptionKey: ${7:String}",
            "    Environment: #required",
            "      ${8:Environment}",
            "    FileSystemLocations:",
            "      - ${9:ProjectFileSystemLocation}",
            "    LogsConfig:",
            "      ${10:LogsConfig}",
            "    Name: ${11:String}",
            "    QueuedTimeoutInMinutes: ${12:Integer}",
            "    SecondaryArtifacts:",
            "      - ${13:Artifacts}",
            "    SecondarySourceVersions:",
            "      - ${14:ProjectSourceVersion}",
            "    SecondarySources:",
            "      - ${15:Source}",
            "    ServiceRole: ${16:String} #required",
            "    Source: #required",
            "      ${17:Source}",
            "    SourceVersion: ${18:String}",
            "    Tags:",
            "      - ${19:Tag}",
            "    TimeoutInMinutes: ${20:Integer}",
            "    Triggers:",
            "      ${21:ProjectTriggers}",
            "    VpcConfig:",
            "      ${22:VpcConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-project.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "codebuild-project",
        "scope": "source.cloudformation"
    },
    "AWS::CodeBuild::ReportGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CodeBuild::ReportGroup",
            "  Properties:",
            "    DeleteReports: ${2:Boolean}",
            "    ExportConfig: #required",
            "      ${3:ReportExportConfig}",
            "    Name: ${4:String}",
            "    Tags:",
            "      - ${5:Tag}",
            "    Type: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-reportgroup.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "codebuild-reportgroup",
        "scope": "source.cloudformation"
    },
    "AWS::CodeBuild::SourceCredential": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CodeBuild::SourceCredential",
            "  Properties:",
            "    AuthType: ${2:String} #required",
            "    ServerType: ${3:String} #required",
            "    Token: ${4:String} #required",
            "    Username: ${5:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-sourcecredential.html"
        ],
        "prefix": "codebuild-sourcecredential",
        "scope": "source.cloudformation"
    },
    "AWS::CodeCommit::Repository": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CodeCommit::Repository",
            "  Properties:",
            "    Code:",
            "      ${2:Code}",
            "    RepositoryDescription: ${3:String}",
            "    RepositoryName: ${4:String} #required",
            "    Tags:",
            "      - ${5:Tag}",
            "    Triggers:",
            "      - ${6:RepositoryTrigger}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codecommit-repository.html",
            "Attributes: ",
            "  CloneUrlHttp",
            "  CloneUrlSsh",
            "  Arn",
            "  Name"
        ],
        "prefix": "codecommit-repository",
        "scope": "source.cloudformation"
    },
    "AWS::CodeDeploy::Application": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CodeDeploy::Application",
            "  Properties:",
            "    ApplicationName: ${2:String}",
            "    ComputePlatform: ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codedeploy-application.html"
        ],
        "prefix": "codedeploy-application",
        "scope": "source.cloudformation"
    },
    "AWS::CodeDeploy::DeploymentConfig": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CodeDeploy::DeploymentConfig",
            "  Properties:",
            "    DeploymentConfigName: ${2:String}",
            "    MinimumHealthyHosts:",
            "      ${3:MinimumHealthyHosts}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codedeploy-deploymentconfig.html"
        ],
        "prefix": "codedeploy-deploymentconfig",
        "scope": "source.cloudformation"
    },
    "AWS::CodeDeploy::DeploymentGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CodeDeploy::DeploymentGroup",
            "  Properties:",
            "    AlarmConfiguration:",
            "      ${2:AlarmConfiguration}",
            "    ApplicationName: ${3:String} #required",
            "    AutoRollbackConfiguration:",
            "      ${4:AutoRollbackConfiguration}",
            "    AutoScalingGroups:",
            "      - ${5:String}",
            "    Deployment:",
            "      ${6:Deployment}",
            "    DeploymentConfigName: ${7:String}",
            "    DeploymentGroupName: ${8:String}",
            "    DeploymentStyle:",
            "      ${9:DeploymentStyle}",
            "    Ec2TagFilters:",
            "      - ${10:EC2TagFilter}",
            "    Ec2TagSet:",
            "      ${11:EC2TagSet}",
            "    LoadBalancerInfo:",
            "      ${12:LoadBalancerInfo}",
            "    OnPremisesInstanceTagFilters:",
            "      - ${13:TagFilter}",
            "    OnPremisesTagSet:",
            "      ${14:OnPremisesTagSet}",
            "    ServiceRoleArn: ${15:String} #required",
            "    TriggerConfigurations:",
            "      - ${16:TriggerConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codedeploy-deploymentgroup.html"
        ],
        "prefix": "codedeploy-deploymentgroup",
        "scope": "source.cloudformation"
    },
    "AWS::CodeGuruProfiler::ProfilingGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CodeGuruProfiler::ProfilingGroup",
            "  Properties:",
            "    AgentPermissions: ${2:Json}",
            "    AnomalyDetectionNotificationConfiguration:",
            "      - ${3:Channel}",
            "    ComputePlatform: ${4:String}",
            "    ProfilingGroupName: ${5:String} #required",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codeguruprofiler-profilinggroup.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "codeguruprofiler-profilinggroup",
        "scope": "source.cloudformation"
    },
    "AWS::CodeGuruReviewer::RepositoryAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CodeGuruReviewer::RepositoryAssociation",
            "  Properties:",
            "    ConnectionArn: ${2:String}",
            "    Name: ${3:String} #required",
            "    Owner: ${4:String}",
            "    Tags:",
            "      - ${5:Tag}",
            "    Type: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codegurureviewer-repositoryassociation.html",
            "Attributes: ",
            "  AssociationArn"
        ],
        "prefix": "codegurureviewer-repositoryassociation",
        "scope": "source.cloudformation"
    },
    "AWS::CodePipeline::CustomActionType": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CodePipeline::CustomActionType",
            "  Properties:",
            "    Category: ${2:String} #required",
            "    ConfigurationProperties:",
            "      - ${3:ConfigurationProperties}",
            "    InputArtifactDetails: #required",
            "      ${4:ArtifactDetails}",
            "    OutputArtifactDetails: #required",
            "      ${5:ArtifactDetails}",
            "    Provider: ${6:String} #required",
            "    Settings:",
            "      ${7:Settings}",
            "    Tags:",
            "      - ${8:Tag}",
            "    Version: ${9:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-customactiontype.html"
        ],
        "prefix": "codepipeline-customactiontype",
        "scope": "source.cloudformation"
    },
    "AWS::CodePipeline::Pipeline": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CodePipeline::Pipeline",
            "  Properties:",
            "    ArtifactStore:",
            "      ${2:ArtifactStore}",
            "    ArtifactStores:",
            "      - ${3:ArtifactStoreMap}",
            "    DisableInboundStageTransitions:",
            "      - ${4:StageTransition}",
            "    Name: ${5:String}",
            "    RestartExecutionOnUpdate: ${6:Boolean}",
            "    RoleArn: ${7:String} #required",
            "    Stages: #required",
            "      - ${8:StageDeclaration}",
            "    Tags:",
            "      - ${9:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html",
            "Attributes: ",
            "  Version"
        ],
        "prefix": "codepipeline-pipeline",
        "scope": "source.cloudformation"
    },
    "AWS::CodePipeline::Webhook": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CodePipeline::Webhook",
            "  Properties:",
            "    Authentication: ${2:String} #required",
            "    AuthenticationConfiguration: #required",
            "      ${3:WebhookAuthConfiguration}",
            "    Filters: #required",
            "      - ${4:WebhookFilterRule}",
            "    Name: ${5:String}",
            "    RegisterWithThirdParty: ${6:Boolean}",
            "    TargetAction: ${7:String} #required",
            "    TargetPipeline: ${8:String} #required",
            "    TargetPipelineVersion: ${9:Integer} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-webhook.html",
            "Attributes: ",
            "  Url"
        ],
        "prefix": "codepipeline-webhook",
        "scope": "source.cloudformation"
    },
    "AWS::CodeStar::GitHubRepository": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CodeStar::GitHubRepository",
            "  Properties:",
            "    Code:",
            "      ${2:Code}",
            "    ConnectionArn: ${3:String}",
            "    EnableIssues: ${4:Boolean}",
            "    IsPrivate: ${5:Boolean}",
            "    RepositoryAccessToken: ${6:String}",
            "    RepositoryDescription: ${7:String}",
            "    RepositoryName: ${8:String} #required",
            "    RepositoryOwner: ${9:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestar-githubrepository.html"
        ],
        "prefix": "codestar-githubrepository",
        "scope": "source.cloudformation"
    },
    "AWS::CodeStarConnections::Connection": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CodeStarConnections::Connection",
            "  Properties:",
            "    ConnectionName: ${2:String} #required",
            "    HostArn: ${3:String}",
            "    ProviderType: ${4:String}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarconnections-connection.html",
            "Attributes: ",
            "  ConnectionArn",
            "  ConnectionStatus",
            "  OwnerAccountId"
        ],
        "prefix": "codestarconnections-connection",
        "scope": "source.cloudformation"
    },
    "AWS::CodeStarNotifications::NotificationRule": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::CodeStarNotifications::NotificationRule",
            "  Properties:",
            "    DetailType: ${2:String} #required",
            "    EventTypeIds: #required",
            "      - ${3:String}",
            "    Name: ${4:String} #required",
            "    Resource: ${5:String} #required",
            "    Status: ${6:String}",
            "    Tags: ${7:Json}",
            "    Targets: #required",
            "      - ${8:Target}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codestarnotifications-notificationrule.html"
        ],
        "prefix": "codestarnotifications-notificationrule",
        "scope": "source.cloudformation"
    },
    "AWS::Cognito::IdentityPool": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Cognito::IdentityPool",
            "  Properties:",
            "    AllowClassicFlow: ${2:Boolean}",
            "    AllowUnauthenticatedIdentities: ${3:Boolean} #required",
            "    CognitoEvents: ${4:Json}",
            "    CognitoIdentityProviders:",
            "      - ${5:CognitoIdentityProvider}",
            "    CognitoStreams:",
            "      ${6:CognitoStreams}",
            "    DeveloperProviderName: ${7:String}",
            "    IdentityPoolName: ${8:String}",
            "    OpenIdConnectProviderARNs:",
            "      - ${9:String}",
            "    PushSync:",
            "      ${10:PushSync}",
            "    SamlProviderARNs:",
            "      - ${11:String}",
            "    SupportedLoginProviders: ${12:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-identitypool.html",
            "Attributes: ",
            "  Name"
        ],
        "prefix": "cognito-identitypool",
        "scope": "source.cloudformation"
    },
    "AWS::Cognito::IdentityPoolRoleAttachment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Cognito::IdentityPoolRoleAttachment",
            "  Properties:",
            "    IdentityPoolId: ${2:String} #required",
            "    RoleMappings: ${3:Json}",
            "    Roles: ${4:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-identitypoolroleattachment.html"
        ],
        "prefix": "cognito-identitypoolroleattachment",
        "scope": "source.cloudformation"
    },
    "AWS::Cognito::UserPool": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Cognito::UserPool",
            "  Properties:",
            "    AccountRecoverySetting:",
            "      ${2:AccountRecoverySetting}",
            "    AdminCreateUserConfig:",
            "      ${3:AdminCreateUserConfig}",
            "    AliasAttributes:",
            "      - ${4:String}",
            "    AutoVerifiedAttributes:",
            "      - ${5:String}",
            "    DeviceConfiguration:",
            "      ${6:DeviceConfiguration}",
            "    EmailConfiguration:",
            "      ${7:EmailConfiguration}",
            "    EmailVerificationMessage: ${8:String}",
            "    EmailVerificationSubject: ${9:String}",
            "    EnabledMfas:",
            "      - ${10:String}",
            "    LambdaConfig:",
            "      ${11:LambdaConfig}",
            "    MfaConfiguration: ${12:String}",
            "    Policies:",
            "      ${13:Policies}",
            "    Schema:",
            "      - ${14:SchemaAttribute}",
            "    SmsAuthenticationMessage: ${15:String}",
            "    SmsConfiguration:",
            "      ${16:SmsConfiguration}",
            "    SmsVerificationMessage: ${17:String}",
            "    UserPoolAddOns:",
            "      ${18:UserPoolAddOns}",
            "    UserPoolName: ${19:String}",
            "    UserPoolTags: ${20:Json}",
            "    UsernameAttributes:",
            "      - ${21:String}",
            "    UsernameConfiguration:",
            "      ${22:UsernameConfiguration}",
            "    VerificationMessageTemplate:",
            "      ${23:VerificationMessageTemplate}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html",
            "Attributes: ",
            "  ProviderName",
            "  ProviderURL",
            "  Arn"
        ],
        "prefix": "cognito-userpool",
        "scope": "source.cloudformation"
    },
    "AWS::Cognito::UserPoolClient": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Cognito::UserPoolClient",
            "  Properties:",
            "    AccessTokenValidity: ${2:Integer}",
            "    AllowedOAuthFlows:",
            "      - ${3:String}",
            "    AllowedOAuthFlowsUserPoolClient: ${4:Boolean}",
            "    AllowedOAuthScopes:",
            "      - ${5:String}",
            "    AnalyticsConfiguration:",
            "      ${6:AnalyticsConfiguration}",
            "    CallbackURLs:",
            "      - ${7:String}",
            "    ClientName: ${8:String}",
            "    DefaultRedirectURI: ${9:String}",
            "    ExplicitAuthFlows:",
            "      - ${10:String}",
            "    GenerateSecret: ${11:Boolean}",
            "    IdTokenValidity: ${12:Integer}",
            "    LogoutURLs:",
            "      - ${13:String}",
            "    PreventUserExistenceErrors: ${14:String}",
            "    ReadAttributes:",
            "      - ${15:String}",
            "    RefreshTokenValidity: ${16:Integer}",
            "    SupportedIdentityProviders:",
            "      - ${17:String}",
            "    TokenValidityUnits:",
            "      ${18:TokenValidityUnits}",
            "    UserPoolId: ${19:String} #required",
            "    WriteAttributes:",
            "      - ${20:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolclient.html",
            "Attributes: ",
            "  ClientSecret",
            "  Name"
        ],
        "prefix": "cognito-userpoolclient",
        "scope": "source.cloudformation"
    },
    "AWS::Cognito::UserPoolDomain": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Cognito::UserPoolDomain",
            "  Properties:",
            "    CustomDomainConfig:",
            "      ${2:CustomDomainConfigType}",
            "    Domain: ${3:String} #required",
            "    UserPoolId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpooldomain.html"
        ],
        "prefix": "cognito-userpooldomain",
        "scope": "source.cloudformation"
    },
    "AWS::Cognito::UserPoolGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Cognito::UserPoolGroup",
            "  Properties:",
            "    Description: ${2:String}",
            "    GroupName: ${3:String}",
            "    Precedence: ${4:Double}",
            "    RoleArn: ${5:String}",
            "    UserPoolId: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolgroup.html"
        ],
        "prefix": "cognito-userpoolgroup",
        "scope": "source.cloudformation"
    },
    "AWS::Cognito::UserPoolIdentityProvider": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Cognito::UserPoolIdentityProvider",
            "  Properties:",
            "    AttributeMapping: ${2:Json}",
            "    IdpIdentifiers:",
            "      - ${3:String}",
            "    ProviderDetails: ${4:Json}",
            "    ProviderName: ${5:String} #required",
            "    ProviderType: ${6:String} #required",
            "    UserPoolId: ${7:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolidentityprovider.html"
        ],
        "prefix": "cognito-userpoolidentityprovider",
        "scope": "source.cloudformation"
    },
    "AWS::Cognito::UserPoolResourceServer": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Cognito::UserPoolResourceServer",
            "  Properties:",
            "    Identifier: ${2:String} #required",
            "    Name: ${3:String} #required",
            "    Scopes:",
            "      - ${4:ResourceServerScopeType}",
            "    UserPoolId: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolresourceserver.html"
        ],
        "prefix": "cognito-userpoolresourceserver",
        "scope": "source.cloudformation"
    },
    "AWS::Cognito::UserPoolRiskConfigurationAttachment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Cognito::UserPoolRiskConfigurationAttachment",
            "  Properties:",
            "    AccountTakeoverRiskConfiguration:",
            "      ${2:AccountTakeoverRiskConfigurationType}",
            "    ClientId: ${3:String} #required",
            "    CompromisedCredentialsRiskConfiguration:",
            "      ${4:CompromisedCredentialsRiskConfigurationType}",
            "    RiskExceptionConfiguration:",
            "      ${5:RiskExceptionConfigurationType}",
            "    UserPoolId: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolriskconfigurationattachment.html"
        ],
        "prefix": "cognito-userpoolriskconfigurationattachment",
        "scope": "source.cloudformation"
    },
    "AWS::Cognito::UserPoolUICustomizationAttachment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Cognito::UserPoolUICustomizationAttachment",
            "  Properties:",
            "    CSS: ${2:String}",
            "    ClientId: ${3:String} #required",
            "    UserPoolId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpooluicustomizationattachment.html"
        ],
        "prefix": "cognito-userpooluicustomizationattachment",
        "scope": "source.cloudformation"
    },
    "AWS::Cognito::UserPoolUser": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Cognito::UserPoolUser",
            "  Properties:",
            "    ClientMetadata: ${2:Json}",
            "    DesiredDeliveryMediums:",
            "      - ${3:String}",
            "    ForceAliasCreation: ${4:Boolean}",
            "    MessageAction: ${5:String}",
            "    UserAttributes:",
            "      - ${6:AttributeType}",
            "    UserPoolId: ${7:String} #required",
            "    Username: ${8:String}",
            "    ValidationData:",
            "      - ${9:AttributeType}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpooluser.html"
        ],
        "prefix": "cognito-userpooluser",
        "scope": "source.cloudformation"
    },
    "AWS::Cognito::UserPoolUserToGroupAttachment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Cognito::UserPoolUserToGroupAttachment",
            "  Properties:",
            "    GroupName: ${2:String} #required",
            "    UserPoolId: ${3:String} #required",
            "    Username: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolusertogroupattachment.html"
        ],
        "prefix": "cognito-userpoolusertogroupattachment",
        "scope": "source.cloudformation"
    },
    "AWS::Config::AggregationAuthorization": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Config::AggregationAuthorization",
            "  Properties:",
            "    AuthorizedAccountId: ${2:String} #required",
            "    AuthorizedAwsRegion: ${3:String} #required",
            "    Tags:",
            "      - ${4:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-config-aggregationauthorization.html"
        ],
        "prefix": "config-aggregationauthorization",
        "scope": "source.cloudformation"
    },
    "AWS::Config::ConfigRule": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Config::ConfigRule",
            "  Properties:",
            "    ConfigRuleName: ${2:String}",
            "    Description: ${3:String}",
            "    InputParameters: ${4:Json}",
            "    MaximumExecutionFrequency: ${5:String}",
            "    Scope:",
            "      ${6:Scope}",
            "    Source: #required",
            "      ${7:Source}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-config-configrule.html",
            "Attributes: ",
            "  Arn",
            "  Compliance.Type",
            "  ConfigRuleId"
        ],
        "prefix": "config-configrule",
        "scope": "source.cloudformation"
    },
    "AWS::Config::ConfigurationAggregator": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Config::ConfigurationAggregator",
            "  Properties:",
            "    AccountAggregationSources:",
            "      - ${2:AccountAggregationSource}",
            "    ConfigurationAggregatorName: ${3:String} #required",
            "    OrganizationAggregationSource:",
            "      ${4:OrganizationAggregationSource}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-config-configurationaggregator.html"
        ],
        "prefix": "config-configurationaggregator",
        "scope": "source.cloudformation"
    },
    "AWS::Config::ConfigurationRecorder": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Config::ConfigurationRecorder",
            "  Properties:",
            "    Name: ${2:String}",
            "    RecordingGroup:",
            "      ${3:RecordingGroup}",
            "    RoleARN: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-config-configurationrecorder.html"
        ],
        "prefix": "config-configurationrecorder",
        "scope": "source.cloudformation"
    },
    "AWS::Config::ConformancePack": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Config::ConformancePack",
            "  Properties:",
            "    ConformancePackInputParameters:",
            "      - ${2:ConformancePackInputParameter}",
            "    ConformancePackName: ${3:String} #required",
            "    DeliveryS3Bucket: ${4:String}",
            "    DeliveryS3KeyPrefix: ${5:String}",
            "    TemplateBody: ${6:String}",
            "    TemplateS3Uri: ${7:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-config-conformancepack.html"
        ],
        "prefix": "config-conformancepack",
        "scope": "source.cloudformation"
    },
    "AWS::Config::DeliveryChannel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Config::DeliveryChannel",
            "  Properties:",
            "    ConfigSnapshotDeliveryProperties:",
            "      ${2:ConfigSnapshotDeliveryProperties}",
            "    Name: ${3:String}",
            "    S3BucketName: ${4:String} #required",
            "    S3KeyPrefix: ${5:String}",
            "    SnsTopicARN: ${6:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-config-deliverychannel.html"
        ],
        "prefix": "config-deliverychannel",
        "scope": "source.cloudformation"
    },
    "AWS::Config::OrganizationConfigRule": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Config::OrganizationConfigRule",
            "  Properties:",
            "    ExcludedAccounts:",
            "      - ${2:String}",
            "    OrganizationConfigRuleName: ${3:String} #required",
            "    OrganizationCustomRuleMetadata:",
            "      ${4:OrganizationCustomRuleMetadata}",
            "    OrganizationManagedRuleMetadata:",
            "      ${5:OrganizationManagedRuleMetadata}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-config-organizationconfigrule.html"
        ],
        "prefix": "config-organizationconfigrule",
        "scope": "source.cloudformation"
    },
    "AWS::Config::OrganizationConformancePack": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Config::OrganizationConformancePack",
            "  Properties:",
            "    ConformancePackInputParameters:",
            "      - ${2:ConformancePackInputParameter}",
            "    DeliveryS3Bucket: ${3:String}",
            "    DeliveryS3KeyPrefix: ${4:String}",
            "    ExcludedAccounts:",
            "      - ${5:String}",
            "    OrganizationConformancePackName: ${6:String} #required",
            "    TemplateBody: ${7:String}",
            "    TemplateS3Uri: ${8:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-config-organizationconformancepack.html"
        ],
        "prefix": "config-organizationconformancepack",
        "scope": "source.cloudformation"
    },
    "AWS::Config::RemediationConfiguration": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Config::RemediationConfiguration",
            "  Properties:",
            "    Automatic: ${2:Boolean}",
            "    ConfigRuleName: ${3:String} #required",
            "    ExecutionControls:",
            "      ${4:ExecutionControls}",
            "    MaximumAutomaticAttempts: ${5:Integer}",
            "    Parameters: ${6:Json}",
            "    ResourceType: ${7:String}",
            "    RetryAttemptSeconds: ${8:Integer}",
            "    TargetId: ${9:String} #required",
            "    TargetType: ${10:String} #required",
            "    TargetVersion: ${11:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-config-remediationconfiguration.html"
        ],
        "prefix": "config-remediationconfiguration",
        "scope": "source.cloudformation"
    },
    "AWS::DAX::Cluster": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DAX::Cluster",
            "  Properties:",
            "    AvailabilityZones:",
            "      - ${2:String}",
            "    ClusterName: ${3:String}",
            "    Description: ${4:String}",
            "    IAMRoleARN: ${5:String} #required",
            "    NodeType: ${6:String} #required",
            "    NotificationTopicARN: ${7:String}",
            "    ParameterGroupName: ${8:String}",
            "    PreferredMaintenanceWindow: ${9:String}",
            "    ReplicationFactor: ${10:Integer} #required",
            "    SSESpecification:",
            "      ${11:SSESpecification}",
            "    SecurityGroupIds:",
            "      - ${12:String}",
            "    SubnetGroupName: ${13:String}",
            "    Tags: ${14:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dax-cluster.html",
            "Attributes: ",
            "  ClusterDiscoveryEndpoint",
            "  Arn"
        ],
        "prefix": "dax-cluster",
        "scope": "source.cloudformation"
    },
    "AWS::DAX::ParameterGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DAX::ParameterGroup",
            "  Properties:",
            "    Description: ${2:String}",
            "    ParameterGroupName: ${3:String}",
            "    ParameterNameValues: ${4:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dax-parametergroup.html"
        ],
        "prefix": "dax-parametergroup",
        "scope": "source.cloudformation"
    },
    "AWS::DAX::SubnetGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DAX::SubnetGroup",
            "  Properties:",
            "    Description: ${2:String}",
            "    SubnetGroupName: ${3:String}",
            "    SubnetIds: #required",
            "      - ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dax-subnetgroup.html"
        ],
        "prefix": "dax-subnetgroup",
        "scope": "source.cloudformation"
    },
    "AWS::DLM::LifecyclePolicy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DLM::LifecyclePolicy",
            "  Properties:",
            "    Description: ${2:String}",
            "    ExecutionRoleArn: ${3:String}",
            "    PolicyDetails:",
            "      ${4:PolicyDetails}",
            "    State: ${5:String}",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dlm-lifecyclepolicy.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "dlm-lifecyclepolicy",
        "scope": "source.cloudformation"
    },
    "AWS::DMS::Certificate": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DMS::Certificate",
            "  Properties:",
            "    CertificateIdentifier: ${2:String}",
            "    CertificatePem: ${3:String}",
            "    CertificateWallet: ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dms-certificate.html"
        ],
        "prefix": "dms-certificate",
        "scope": "source.cloudformation"
    },
    "AWS::DMS::Endpoint": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DMS::Endpoint",
            "  Properties:",
            "    CertificateArn: ${2:String}",
            "    DatabaseName: ${3:String}",
            "    DynamoDbSettings:",
            "      ${4:DynamoDbSettings}",
            "    ElasticsearchSettings:",
            "      ${5:ElasticsearchSettings}",
            "    EndpointIdentifier: ${6:String}",
            "    EndpointType: ${7:String} #required",
            "    EngineName: ${8:String} #required",
            "    ExtraConnectionAttributes: ${9:String}",
            "    KafkaSettings:",
            "      ${10:KafkaSettings}",
            "    KinesisSettings:",
            "      ${11:KinesisSettings}",
            "    KmsKeyId: ${12:String}",
            "    MongoDbSettings:",
            "      ${13:MongoDbSettings}",
            "    NeptuneSettings:",
            "      ${14:NeptuneSettings}",
            "    Password: ${15:String}",
            "    Port: ${16:Integer}",
            "    S3Settings:",
            "      ${17:S3Settings}",
            "    ServerName: ${18:String}",
            "    SslMode: ${19:String}",
            "    Tags:",
            "      - ${20:Tag}",
            "    Username: ${21:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dms-endpoint.html",
            "Attributes: ",
            "  ExternalId"
        ],
        "prefix": "dms-endpoint",
        "scope": "source.cloudformation"
    },
    "AWS::DMS::EventSubscription": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DMS::EventSubscription",
            "  Properties:",
            "    Enabled: ${2:Boolean}",
            "    EventCategories:",
            "      - ${3:String}",
            "    SnsTopicArn: ${4:String} #required",
            "    SourceIds:",
            "      - ${5:String}",
            "    SourceType: ${6:String}",
            "    SubscriptionName: ${7:String}",
            "    Tags:",
            "      - ${8:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dms-eventsubscription.html"
        ],
        "prefix": "dms-eventsubscription",
        "scope": "source.cloudformation"
    },
    "AWS::DMS::ReplicationInstance": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DMS::ReplicationInstance",
            "  Properties:",
            "    AllocatedStorage: ${2:Integer}",
            "    AllowMajorVersionUpgrade: ${3:Boolean}",
            "    AutoMinorVersionUpgrade: ${4:Boolean}",
            "    AvailabilityZone: ${5:String}",
            "    EngineVersion: ${6:String}",
            "    KmsKeyId: ${7:String}",
            "    MultiAZ: ${8:Boolean}",
            "    PreferredMaintenanceWindow: ${9:String}",
            "    PubliclyAccessible: ${10:Boolean}",
            "    ReplicationInstanceClass: ${11:String} #required",
            "    ReplicationInstanceIdentifier: ${12:String}",
            "    ReplicationSubnetGroupIdentifier: ${13:String}",
            "    Tags:",
            "      - ${14:Tag}",
            "    VpcSecurityGroupIds:",
            "      - ${15:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dms-replicationinstance.html",
            "Attributes: ",
            "  ReplicationInstancePublicIpAddresses",
            "  ReplicationInstancePrivateIpAddresses"
        ],
        "prefix": "dms-replicationinstance",
        "scope": "source.cloudformation"
    },
    "AWS::DMS::ReplicationSubnetGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DMS::ReplicationSubnetGroup",
            "  Properties:",
            "    ReplicationSubnetGroupDescription: ${2:String} #required",
            "    ReplicationSubnetGroupIdentifier: ${3:String}",
            "    SubnetIds: #required",
            "      - ${4:String}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dms-replicationsubnetgroup.html"
        ],
        "prefix": "dms-replicationsubnetgroup",
        "scope": "source.cloudformation"
    },
    "AWS::DMS::ReplicationTask": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DMS::ReplicationTask",
            "  Properties:",
            "    CdcStartPosition: ${2:String}",
            "    CdcStartTime: ${3:Double}",
            "    CdcStopPosition: ${4:String}",
            "    MigrationType: ${5:String} #required",
            "    ReplicationInstanceArn: ${6:String} #required",
            "    ReplicationTaskIdentifier: ${7:String}",
            "    ReplicationTaskSettings: ${8:String}",
            "    SourceEndpointArn: ${9:String} #required",
            "    TableMappings: ${10:String} #required",
            "    Tags:",
            "      - ${11:Tag}",
            "    TargetEndpointArn: ${12:String} #required",
            "    TaskData: ${13:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dms-replicationtask.html"
        ],
        "prefix": "dms-replicationtask",
        "scope": "source.cloudformation"
    },
    "AWS::DataBrew::Dataset": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DataBrew::Dataset",
            "  Properties:",
            "    FormatOptions: ${2:Json}",
            "    Input: ${3:Json} #required",
            "    Name: ${4:String} #required",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-databrew-dataset.html"
        ],
        "prefix": "databrew-dataset",
        "scope": "source.cloudformation"
    },
    "AWS::DataBrew::Job": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DataBrew::Job",
            "  Properties:",
            "    DatasetName: ${2:String}",
            "    EncryptionKeyArn: ${3:String}",
            "    EncryptionMode: ${4:String}",
            "    LogSubscription: ${5:String}",
            "    MaxCapacity: ${6:Integer}",
            "    MaxRetries: ${7:Integer}",
            "    Name: ${8:String} #required",
            "    OutputLocation: ${9:Json}",
            "    Outputs:",
            "      - ${10:Output}",
            "    ProjectName: ${11:String}",
            "    Recipe: ${12:Json}",
            "    RoleArn: ${13:String} #required",
            "    Tags:",
            "      - ${14:Tag}",
            "    Timeout: ${15:Integer}",
            "    Type: ${16:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-databrew-job.html"
        ],
        "prefix": "databrew-job",
        "scope": "source.cloudformation"
    },
    "AWS::DataBrew::Project": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DataBrew::Project",
            "  Properties:",
            "    DatasetName: ${2:String} #required",
            "    Name: ${3:String} #required",
            "    RecipeName: ${4:String} #required",
            "    RoleArn: ${5:String} #required",
            "    Sample: ${6:Json}",
            "    Tags:",
            "      - ${7:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-databrew-project.html"
        ],
        "prefix": "databrew-project",
        "scope": "source.cloudformation"
    },
    "AWS::DataBrew::Recipe": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DataBrew::Recipe",
            "  Properties:",
            "    Description: ${2:String}",
            "    Name: ${3:String} #required",
            "    Steps: #required",
            "      - ${4:RecipeStep}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-databrew-recipe.html"
        ],
        "prefix": "databrew-recipe",
        "scope": "source.cloudformation"
    },
    "AWS::DataBrew::Schedule": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DataBrew::Schedule",
            "  Properties:",
            "    CronExpression: ${2:String} #required",
            "    JobNames:",
            "      - ${3:String}",
            "    Name: ${4:String} #required",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-databrew-schedule.html"
        ],
        "prefix": "databrew-schedule",
        "scope": "source.cloudformation"
    },
    "AWS::DataPipeline::Pipeline": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DataPipeline::Pipeline",
            "  Properties:",
            "    Activate: ${2:Boolean}",
            "    Description: ${3:String}",
            "    Name: ${4:String} #required",
            "    ParameterObjects: #required",
            "      - ${5:ParameterObject}",
            "    ParameterValues:",
            "      - ${6:ParameterValue}",
            "    PipelineObjects:",
            "      - ${7:PipelineObject}",
            "    PipelineTags:",
            "      - ${8:PipelineTag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-datapipeline-pipeline.html"
        ],
        "prefix": "datapipeline-pipeline",
        "scope": "source.cloudformation"
    },
    "AWS::Detective::MemberInvitation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Detective::MemberInvitation",
            "  Properties:",
            "    GraphArn: ${2:String} #required",
            "    MemberEmailAddress: ${3:String} #required",
            "    MemberId: ${4:String} #required",
            "    Message: ${5:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-detective-memberinvitation.html"
        ],
        "prefix": "detective-memberinvitation",
        "scope": "source.cloudformation"
    },
    "AWS::DevOpsGuru::NotificationChannel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DevOpsGuru::NotificationChannel",
            "  Properties:",
            "    Config: #required",
            "      ${2:NotificationChannelConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-devopsguru-notificationchannel.html",
            "Attributes: ",
            "  Id"
        ],
        "prefix": "devopsguru-notificationchannel",
        "scope": "source.cloudformation"
    },
    "AWS::DevOpsGuru::ResourceCollection": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DevOpsGuru::ResourceCollection",
            "  Properties:",
            "    ResourceCollectionFilter: #required",
            "      ${2:ResourceCollectionFilter}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-devopsguru-resourcecollection.html",
            "Attributes: ",
            "  ResourceCollectionType"
        ],
        "prefix": "devopsguru-resourcecollection",
        "scope": "source.cloudformation"
    },
    "AWS::DirectoryService::MicrosoftAD": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DirectoryService::MicrosoftAD",
            "  Properties:",
            "    CreateAlias: ${2:Boolean}",
            "    Edition: ${3:String}",
            "    EnableSso: ${4:Boolean}",
            "    Name: ${5:String} #required",
            "    Password: ${6:String} #required",
            "    ShortName: ${7:String}",
            "    VpcSettings: #required",
            "      ${8:VpcSettings}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-microsoftad.html",
            "Attributes: ",
            "  Alias",
            "  DnsIpAddresses"
        ],
        "prefix": "directoryservice-microsoftad",
        "scope": "source.cloudformation"
    },
    "AWS::DirectoryService::SimpleAD": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DirectoryService::SimpleAD",
            "  Properties:",
            "    CreateAlias: ${2:Boolean}",
            "    Description: ${3:String}",
            "    EnableSso: ${4:Boolean}",
            "    Name: ${5:String} #required",
            "    Password: ${6:String} #required",
            "    ShortName: ${7:String}",
            "    Size: ${8:String} #required",
            "    VpcSettings: #required",
            "      ${9:VpcSettings}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-directoryservice-simplead.html",
            "Attributes: ",
            "  Alias",
            "  DnsIpAddresses"
        ],
        "prefix": "directoryservice-simplead",
        "scope": "source.cloudformation"
    },
    "AWS::DocDB::DBCluster": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DocDB::DBCluster",
            "  Properties:",
            "    AvailabilityZones:",
            "      - ${2:String}",
            "    BackupRetentionPeriod: ${3:Integer}",
            "    DBClusterIdentifier: ${4:String}",
            "    DBClusterParameterGroupName: ${5:String}",
            "    DBSubnetGroupName: ${6:String}",
            "    DeletionProtection: ${7:Boolean}",
            "    EnableCloudwatchLogsExports:",
            "      - ${8:String}",
            "    EngineVersion: ${9:String}",
            "    KmsKeyId: ${10:String}",
            "    MasterUserPassword: ${11:String} #required",
            "    MasterUsername: ${12:String} #required",
            "    Port: ${13:Integer}",
            "    PreferredBackupWindow: ${14:String}",
            "    PreferredMaintenanceWindow: ${15:String}",
            "    SnapshotIdentifier: ${16:String}",
            "    StorageEncrypted: ${17:Boolean}",
            "    Tags:",
            "      - ${18:Tag}",
            "    VpcSecurityGroupIds:",
            "      - ${19:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-docdb-dbcluster.html",
            "Attributes: ",
            "  ClusterResourceId",
            "  Endpoint",
            "  Port",
            "  ReadEndpoint"
        ],
        "prefix": "docdb-dbcluster",
        "scope": "source.cloudformation"
    },
    "AWS::DocDB::DBClusterParameterGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DocDB::DBClusterParameterGroup",
            "  Properties:",
            "    Description: ${2:String} #required",
            "    Family: ${3:String} #required",
            "    Name: ${4:String}",
            "    Parameters: ${5:Json} #required",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-docdb-dbclusterparametergroup.html"
        ],
        "prefix": "docdb-dbclusterparametergroup",
        "scope": "source.cloudformation"
    },
    "AWS::DocDB::DBInstance": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DocDB::DBInstance",
            "  Properties:",
            "    AutoMinorVersionUpgrade: ${2:Boolean}",
            "    AvailabilityZone: ${3:String}",
            "    DBClusterIdentifier: ${4:String} #required",
            "    DBInstanceClass: ${5:String} #required",
            "    DBInstanceIdentifier: ${6:String}",
            "    PreferredMaintenanceWindow: ${7:String}",
            "    Tags:",
            "      - ${8:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-docdb-dbinstance.html",
            "Attributes: ",
            "  Endpoint",
            "  Port"
        ],
        "prefix": "docdb-dbinstance",
        "scope": "source.cloudformation"
    },
    "AWS::DocDB::DBSubnetGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DocDB::DBSubnetGroup",
            "  Properties:",
            "    DBSubnetGroupDescription: ${2:String} #required",
            "    DBSubnetGroupName: ${3:String}",
            "    SubnetIds: #required",
            "      - ${4:String}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-docdb-dbsubnetgroup.html"
        ],
        "prefix": "docdb-dbsubnetgroup",
        "scope": "source.cloudformation"
    },
    "AWS::DynamoDB::Table": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::DynamoDB::Table",
            "  Properties:",
            "    AttributeDefinitions:",
            "      - ${2:AttributeDefinition}",
            "    BillingMode: ${3:String}",
            "    GlobalSecondaryIndexes:",
            "      - ${4:GlobalSecondaryIndex}",
            "    KeySchema: #required",
            "      - ${5:KeySchema}",
            "    LocalSecondaryIndexes:",
            "      - ${6:LocalSecondaryIndex}",
            "    PointInTimeRecoverySpecification:",
            "      ${7:PointInTimeRecoverySpecification}",
            "    ProvisionedThroughput:",
            "      ${8:ProvisionedThroughput}",
            "    SSESpecification:",
            "      ${9:SSESpecification}",
            "    StreamSpecification:",
            "      ${10:StreamSpecification}",
            "    TableName: ${11:String}",
            "    Tags:",
            "      - ${12:Tag}",
            "    TimeToLiveSpecification:",
            "      ${13:TimeToLiveSpecification}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html",
            "Attributes: ",
            "  Arn",
            "  StreamArn"
        ],
        "prefix": "dynamodb-table",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::CapacityReservation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::CapacityReservation",
            "  Properties:",
            "    AvailabilityZone: ${2:String} #required",
            "    EbsOptimized: ${3:Boolean}",
            "    EndDate: ${4:String}",
            "    EndDateType: ${5:String}",
            "    EphemeralStorage: ${6:Boolean}",
            "    InstanceCount: ${7:Integer} #required",
            "    InstanceMatchCriteria: ${8:String}",
            "    InstancePlatform: ${9:String} #required",
            "    InstanceType: ${10:String} #required",
            "    TagSpecifications:",
            "      - ${11:TagSpecification}",
            "    Tenancy: ${12:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-capacityreservation.html",
            "Attributes: ",
            "  Tenancy",
            "  AvailableInstanceCount",
            "  AvailabilityZone",
            "  TotalInstanceCount",
            "  InstanceType"
        ],
        "prefix": "ec2-capacityreservation",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::CarrierGateway": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::CarrierGateway",
            "  Properties:",
            "    Tags:",
            "      ${2:Tags}",
            "    VpcId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-carriergateway.html",
            "Attributes: ",
            "  CarrierGatewayId",
            "  State",
            "  OwnerId"
        ],
        "prefix": "ec2-carriergateway",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::ClientVpnAuthorizationRule": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::ClientVpnAuthorizationRule",
            "  Properties:",
            "    AccessGroupId: ${2:String}",
            "    AuthorizeAllGroups: ${3:Boolean}",
            "    ClientVpnEndpointId: ${4:String} #required",
            "    Description: ${5:String}",
            "    TargetNetworkCidr: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnauthorizationrule.html"
        ],
        "prefix": "ec2-clientvpnauthorizationrule",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::ClientVpnEndpoint": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::ClientVpnEndpoint",
            "  Properties:",
            "    AuthenticationOptions: #required",
            "      - ${2:ClientAuthenticationRequest}",
            "    ClientCidrBlock: ${3:String} #required",
            "    ClientConnectOptions:",
            "      ${4:ClientConnectOptions}",
            "    ConnectionLogOptions: #required",
            "      ${5:ConnectionLogOptions}",
            "    Description: ${6:String}",
            "    DnsServers:",
            "      - ${7:String}",
            "    SecurityGroupIds:",
            "      - ${8:String}",
            "    SelfServicePortal: ${9:String}",
            "    ServerCertificateArn: ${10:String} #required",
            "    SplitTunnel: ${11:Boolean}",
            "    TagSpecifications:",
            "      - ${12:TagSpecification}",
            "    TransportProtocol: ${13:String}",
            "    VpcId: ${14:String}",
            "    VpnPort: ${15:Integer}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnendpoint.html"
        ],
        "prefix": "ec2-clientvpnendpoint",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::ClientVpnRoute": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::ClientVpnRoute",
            "  Properties:",
            "    ClientVpnEndpointId: ${2:String} #required",
            "    Description: ${3:String}",
            "    DestinationCidrBlock: ${4:String} #required",
            "    TargetVpcSubnetId: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpnroute.html"
        ],
        "prefix": "ec2-clientvpnroute",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::ClientVpnTargetNetworkAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::ClientVpnTargetNetworkAssociation",
            "  Properties:",
            "    ClientVpnEndpointId: ${2:String} #required",
            "    SubnetId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-clientvpntargetnetworkassociation.html"
        ],
        "prefix": "ec2-clientvpntargetnetworkassociation",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::CustomerGateway": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::CustomerGateway",
            "  Properties:",
            "    BgpAsn: ${2:Integer} #required",
            "    IpAddress: ${3:String} #required",
            "    Tags:",
            "      - ${4:Tag}",
            "    Type: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-customer-gateway.html"
        ],
        "prefix": "ec2-customergateway",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::DHCPOptions": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::DHCPOptions",
            "  Properties:",
            "    DomainName: ${2:String}",
            "    DomainNameServers:",
            "      - ${3:String}",
            "    NetbiosNameServers:",
            "      - ${4:String}",
            "    NetbiosNodeType: ${5:Integer}",
            "    NtpServers:",
            "      - ${6:String}",
            "    Tags:",
            "      - ${7:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-dhcp-options.html"
        ],
        "prefix": "ec2-dhcpoptions",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::EC2Fleet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::EC2Fleet",
            "  Properties:",
            "    ExcessCapacityTerminationPolicy: ${2:String}",
            "    LaunchTemplateConfigs: #required",
            "      - ${3:FleetLaunchTemplateConfigRequest}",
            "    OnDemandOptions:",
            "      ${4:OnDemandOptionsRequest}",
            "    ReplaceUnhealthyInstances: ${5:Boolean}",
            "    SpotOptions:",
            "      ${6:SpotOptionsRequest}",
            "    TagSpecifications:",
            "      - ${7:TagSpecification}",
            "    TargetCapacitySpecification: #required",
            "      ${8:TargetCapacitySpecificationRequest}",
            "    TerminateInstancesWithExpiration: ${9:Boolean}",
            "    Type: ${10:String}",
            "    ValidFrom: ${11:String}",
            "    ValidUntil: ${12:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html"
        ],
        "prefix": "ec2-ec2fleet",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::EIP": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::EIP",
            "  Properties:",
            "    Domain: ${2:String}",
            "    InstanceId: ${3:String}",
            "    PublicIpv4Pool: ${4:String}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip.html",
            "Attributes: ",
            "  AllocationId"
        ],
        "prefix": "ec2-eip",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::EIPAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::EIPAssociation",
            "  Properties:",
            "    AllocationId: ${2:String}",
            "    EIP: ${3:String}",
            "    InstanceId: ${4:String}",
            "    NetworkInterfaceId: ${5:String}",
            "    PrivateIpAddress: ${6:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip-association.html"
        ],
        "prefix": "ec2-eipassociation",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::EgressOnlyInternetGateway": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::EgressOnlyInternetGateway",
            "  Properties:",
            "    VpcId: ${2:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-egressonlyinternetgateway.html"
        ],
        "prefix": "ec2-egressonlyinternetgateway",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::FlowLog": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::FlowLog",
            "  Properties:",
            "    DeliverLogsPermissionArn: ${2:String}",
            "    LogDestination: ${3:String}",
            "    LogDestinationType: ${4:String}",
            "    LogFormat: ${5:String}",
            "    LogGroupName: ${6:String}",
            "    MaxAggregationInterval: ${7:Integer}",
            "    ResourceId: ${8:String} #required",
            "    ResourceType: ${9:String} #required",
            "    Tags:",
            "      - ${10:Tag}",
            "    TrafficType: ${11:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-flowlog.html",
            "Attributes: ",
            "  Id"
        ],
        "prefix": "ec2-flowlog",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::GatewayRouteTableAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::GatewayRouteTableAssociation",
            "  Properties:",
            "    GatewayId: ${2:String} #required",
            "    RouteTableId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-gatewayroutetableassociation.html",
            "Attributes: ",
            "  AssociationId"
        ],
        "prefix": "ec2-gatewayroutetableassociation",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::Host": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::Host",
            "  Properties:",
            "    AutoPlacement: ${2:String}",
            "    AvailabilityZone: ${3:String} #required",
            "    HostRecovery: ${4:String}",
            "    InstanceType: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-host.html"
        ],
        "prefix": "ec2-host",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::Instance": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::Instance",
            "  Properties:",
            "    AdditionalInfo: ${2:String}",
            "    Affinity: ${3:String}",
            "    AvailabilityZone: ${4:String}",
            "    BlockDeviceMappings:",
            "      - ${5:BlockDeviceMapping}",
            "    CpuOptions:",
            "      ${6:CpuOptions}",
            "    CreditSpecification:",
            "      ${7:CreditSpecification}",
            "    DisableApiTermination: ${8:Boolean}",
            "    EbsOptimized: ${9:Boolean}",
            "    ElasticGpuSpecifications:",
            "      - ${10:ElasticGpuSpecification}",
            "    ElasticInferenceAccelerators:",
            "      - ${11:ElasticInferenceAccelerator}",
            "    EnclaveOptions:",
            "      ${12:EnclaveOptions}",
            "    HibernationOptions:",
            "      ${13:HibernationOptions}",
            "    HostId: ${14:String}",
            "    HostResourceGroupArn: ${15:String}",
            "    IamInstanceProfile: ${16:String}",
            "    ImageId: ${17:String}",
            "    InstanceInitiatedShutdownBehavior: ${18:String}",
            "    InstanceType: ${19:String}",
            "    Ipv6AddressCount: ${20:Integer}",
            "    Ipv6Addresses:",
            "      - ${21:InstanceIpv6Address}",
            "    KernelId: ${22:String}",
            "    KeyName: ${23:String}",
            "    LaunchTemplate:",
            "      ${24:LaunchTemplateSpecification}",
            "    LicenseSpecifications:",
            "      - ${25:LicenseSpecification}",
            "    Monitoring: ${26:Boolean}",
            "    NetworkInterfaces:",
            "      - ${27:NetworkInterface}",
            "    PlacementGroupName: ${28:String}",
            "    PrivateIpAddress: ${29:String}",
            "    RamdiskId: ${30:String}",
            "    SecurityGroupIds:",
            "      - ${31:String}",
            "    SecurityGroups:",
            "      - ${32:String}",
            "    SourceDestCheck: ${33:Boolean}",
            "    SsmAssociations:",
            "      - ${34:SsmAssociation}",
            "    SubnetId: ${35:String}",
            "    Tags:",
            "      - ${36:Tag}",
            "    Tenancy: ${37:String}",
            "    UserData: ${38:String}",
            "    Volumes:",
            "      - ${39:Volume}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html",
            "Attributes: ",
            "  AvailabilityZone",
            "  PrivateDnsName",
            "  PrivateIp",
            "  PublicDnsName",
            "  PublicIp"
        ],
        "prefix": "ec2-instance",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::InternetGateway": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::InternetGateway",
            "  Properties:",
            "    Tags:",
            "      - ${2:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html"
        ],
        "prefix": "ec2-internetgateway",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::LaunchTemplate": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::LaunchTemplate",
            "  Properties:",
            "    LaunchTemplateData:",
            "      ${2:LaunchTemplateData}",
            "    LaunchTemplateName: ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html",
            "Attributes: ",
            "  LatestVersionNumber",
            "  DefaultVersionNumber"
        ],
        "prefix": "ec2-launchtemplate",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::LocalGatewayRoute": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::LocalGatewayRoute",
            "  Properties:",
            "    DestinationCidrBlock: ${2:String} #required",
            "    LocalGatewayRouteTableId: ${3:String} #required",
            "    LocalGatewayVirtualInterfaceGroupId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-localgatewayroute.html",
            "Attributes: ",
            "  State",
            "  Type"
        ],
        "prefix": "ec2-localgatewayroute",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::LocalGatewayRouteTableVPCAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::LocalGatewayRouteTableVPCAssociation",
            "  Properties:",
            "    LocalGatewayRouteTableId: ${2:String} #required",
            "    Tags:",
            "      ${3:Tags}",
            "    VpcId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-localgatewayroutetablevpcassociation.html",
            "Attributes: ",
            "  LocalGatewayId",
            "  LocalGatewayRouteTableVpcAssociationId",
            "  State"
        ],
        "prefix": "ec2-localgatewayroutetablevpcassociation",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::NatGateway": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::NatGateway",
            "  Properties:",
            "    AllocationId: ${2:String} #required",
            "    SubnetId: ${3:String} #required",
            "    Tags:",
            "      - ${4:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html"
        ],
        "prefix": "ec2-natgateway",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::NetworkAcl": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::NetworkAcl",
            "  Properties:",
            "    Tags:",
            "      - ${2:Tag}",
            "    VpcId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-network-acl.html"
        ],
        "prefix": "ec2-networkacl",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::NetworkAclEntry": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::NetworkAclEntry",
            "  Properties:",
            "    CidrBlock: ${2:String}",
            "    Egress: ${3:Boolean}",
            "    Icmp:",
            "      ${4:Icmp}",
            "    Ipv6CidrBlock: ${5:String}",
            "    NetworkAclId: ${6:String} #required",
            "    PortRange:",
            "      ${7:PortRange}",
            "    Protocol: ${8:Integer} #required",
            "    RuleAction: ${9:String} #required",
            "    RuleNumber: ${10:Integer} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-network-acl-entry.html"
        ],
        "prefix": "ec2-networkaclentry",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::NetworkInsightsAnalysis": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::NetworkInsightsAnalysis",
            "  Properties:",
            "    FilterInArns:",
            "      - ${2:String}",
            "    NetworkInsightsPathId: ${3:String} #required",
            "    StatusMessage: ${4:String}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinsightsanalysis.html",
            "Attributes: ",
            "  NetworkInsightsAnalysisId",
            "  NetworkInsightsAnalysisArn",
            "  StartDate",
            "  Status",
            "  NetworkPathFound",
            "  ForwardPathComponents",
            "  ReturnPathComponents",
            "  Explanations",
            "  AlternatePathHints"
        ],
        "prefix": "ec2-networkinsightsanalysis",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::NetworkInsightsPath": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::NetworkInsightsPath",
            "  Properties:",
            "    Destination: ${2:String} #required",
            "    DestinationIp: ${3:String}",
            "    DestinationPort: ${4:Integer}",
            "    Protocol: ${5:String} #required",
            "    Source: ${6:String} #required",
            "    SourceIp: ${7:String}",
            "    Tags:",
            "      - ${8:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinsightspath.html",
            "Attributes: ",
            "  NetworkInsightsPathId",
            "  NetworkInsightsPathArn",
            "  CreatedDate"
        ],
        "prefix": "ec2-networkinsightspath",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::NetworkInterface": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::NetworkInterface",
            "  Properties:",
            "    Description: ${2:String}",
            "    GroupSet:",
            "      - ${3:String}",
            "    InterfaceType: ${4:String}",
            "    Ipv6AddressCount: ${5:Integer}",
            "    Ipv6Addresses:",
            "      - ${6:InstanceIpv6Address}",
            "    PrivateIpAddress: ${7:String}",
            "    PrivateIpAddresses:",
            "      - ${8:PrivateIpAddressSpecification}",
            "    SecondaryPrivateIpAddressCount: ${9:Integer}",
            "    SourceDestCheck: ${10:Boolean}",
            "    SubnetId: ${11:String} #required",
            "    Tags:",
            "      - ${12:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-network-interface.html",
            "Attributes: ",
            "  PrimaryPrivateIpAddress",
            "  SecondaryPrivateIpAddresses"
        ],
        "prefix": "ec2-networkinterface",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::NetworkInterfaceAttachment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::NetworkInterfaceAttachment",
            "  Properties:",
            "    DeleteOnTermination: ${2:Boolean}",
            "    DeviceIndex: ${3:String} #required",
            "    InstanceId: ${4:String} #required",
            "    NetworkInterfaceId: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-network-interface-attachment.html"
        ],
        "prefix": "ec2-networkinterfaceattachment",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::NetworkInterfacePermission": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::NetworkInterfacePermission",
            "  Properties:",
            "    AwsAccountId: ${2:String} #required",
            "    NetworkInterfaceId: ${3:String} #required",
            "    Permission: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-networkinterfacepermission.html"
        ],
        "prefix": "ec2-networkinterfacepermission",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::PlacementGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::PlacementGroup",
            "  Properties:",
            "    Strategy: ${2:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-placementgroup.html"
        ],
        "prefix": "ec2-placementgroup",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::PrefixList": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::PrefixList",
            "  Properties:",
            "    AddressFamily: ${2:String} #required",
            "    Entries:",
            "      - ${3:Entry}",
            "    MaxEntries: ${4:Integer} #required",
            "    PrefixListName: ${5:String} #required",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-prefixlist.html",
            "Attributes: ",
            "  PrefixListId",
            "  OwnerId",
            "  Version",
            "  Arn"
        ],
        "prefix": "ec2-prefixlist",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::Route": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::Route",
            "  Properties:",
            "    CarrierGatewayId: ${2:String}",
            "    DestinationCidrBlock: ${3:String}",
            "    DestinationIpv6CidrBlock: ${4:String}",
            "    EgressOnlyInternetGatewayId: ${5:String}",
            "    GatewayId: ${6:String}",
            "    InstanceId: ${7:String}",
            "    LocalGatewayId: ${8:String}",
            "    NatGatewayId: ${9:String}",
            "    NetworkInterfaceId: ${10:String}",
            "    RouteTableId: ${11:String} #required",
            "    TransitGatewayId: ${12:String}",
            "    VpcEndpointId: ${13:String}",
            "    VpcPeeringConnectionId: ${14:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html"
        ],
        "prefix": "ec2-route",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::RouteTable": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::RouteTable",
            "  Properties:",
            "    Tags:",
            "      - ${2:Tag}",
            "    VpcId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html"
        ],
        "prefix": "ec2-routetable",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::SecurityGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::SecurityGroup",
            "  Properties:",
            "    GroupDescription: ${2:String} #required",
            "    GroupName: ${3:String}",
            "    SecurityGroupEgress:",
            "      - ${4:Egress}",
            "    SecurityGroupIngress:",
            "      - ${5:Ingress}",
            "    Tags:",
            "      - ${6:Tag}",
            "    VpcId: ${7:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html",
            "Attributes: ",
            "  GroupId",
            "  VpcId"
        ],
        "prefix": "ec2-securitygroup",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::SecurityGroupEgress": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::SecurityGroupEgress",
            "  Properties:",
            "    CidrIp: ${2:String}",
            "    CidrIpv6: ${3:String}",
            "    Description: ${4:String}",
            "    DestinationPrefixListId: ${5:String}",
            "    DestinationSecurityGroupId: ${6:String}",
            "    FromPort: ${7:Integer}",
            "    GroupId: ${8:String} #required",
            "    IpProtocol: ${9:String} #required",
            "    ToPort: ${10:Integer}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-security-group-egress.html"
        ],
        "prefix": "ec2-securitygroupegress",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::SecurityGroupIngress": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::SecurityGroupIngress",
            "  Properties:",
            "    CidrIp: ${2:String}",
            "    CidrIpv6: ${3:String}",
            "    Description: ${4:String}",
            "    FromPort: ${5:Integer}",
            "    GroupId: ${6:String}",
            "    GroupName: ${7:String}",
            "    IpProtocol: ${8:String} #required",
            "    SourcePrefixListId: ${9:String}",
            "    SourceSecurityGroupId: ${10:String}",
            "    SourceSecurityGroupName: ${11:String}",
            "    SourceSecurityGroupOwnerId: ${12:String}",
            "    ToPort: ${13:Integer}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group-ingress.html"
        ],
        "prefix": "ec2-securitygroupingress",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::SpotFleet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::SpotFleet",
            "  Properties:",
            "    SpotFleetRequestConfigData: #required",
            "      ${2:SpotFleetRequestConfigData}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-spotfleet.html"
        ],
        "prefix": "ec2-spotfleet",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::Subnet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::Subnet",
            "  Properties:",
            "    AssignIpv6AddressOnCreation: ${2:Boolean}",
            "    AvailabilityZone: ${3:String}",
            "    CidrBlock: ${4:String} #required",
            "    Ipv6CidrBlock: ${5:String}",
            "    MapPublicIpOnLaunch: ${6:Boolean}",
            "    OutpostArn: ${7:String}",
            "    Tags:",
            "      - ${8:Tag}",
            "    VpcId: ${9:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html",
            "Attributes: ",
            "  AvailabilityZone",
            "  Ipv6CidrBlocks",
            "  NetworkAclAssociationId",
            "  OutpostArn",
            "  VpcId"
        ],
        "prefix": "ec2-subnet",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::SubnetCidrBlock": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::SubnetCidrBlock",
            "  Properties:",
            "    Ipv6CidrBlock: ${2:String} #required",
            "    SubnetId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnetcidrblock.html"
        ],
        "prefix": "ec2-subnetcidrblock",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::SubnetNetworkAclAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::SubnetNetworkAclAssociation",
            "  Properties:",
            "    NetworkAclId: ${2:String} #required",
            "    SubnetId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-network-acl-assoc.html",
            "Attributes: ",
            "  AssociationId"
        ],
        "prefix": "ec2-subnetnetworkaclassociation",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::SubnetRouteTableAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::SubnetRouteTableAssociation",
            "  Properties:",
            "    RouteTableId: ${2:String} #required",
            "    SubnetId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html"
        ],
        "prefix": "ec2-subnetroutetableassociation",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::TrafficMirrorFilter": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::TrafficMirrorFilter",
            "  Properties:",
            "    Description: ${2:String}",
            "    NetworkServices:",
            "      - ${3:String}",
            "    Tags:",
            "      - ${4:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrorfilter.html"
        ],
        "prefix": "ec2-trafficmirrorfilter",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::TrafficMirrorFilterRule": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::TrafficMirrorFilterRule",
            "  Properties:",
            "    Description: ${2:String}",
            "    DestinationCidrBlock: ${3:String} #required",
            "    DestinationPortRange:",
            "      ${4:TrafficMirrorPortRange}",
            "    Protocol: ${5:Integer}",
            "    RuleAction: ${6:String} #required",
            "    RuleNumber: ${7:Integer} #required",
            "    SourceCidrBlock: ${8:String} #required",
            "    SourcePortRange:",
            "      ${9:TrafficMirrorPortRange}",
            "    TrafficDirection: ${10:String} #required",
            "    TrafficMirrorFilterId: ${11:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrorfilterrule.html"
        ],
        "prefix": "ec2-trafficmirrorfilterrule",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::TrafficMirrorSession": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::TrafficMirrorSession",
            "  Properties:",
            "    Description: ${2:String}",
            "    NetworkInterfaceId: ${3:String} #required",
            "    PacketLength: ${4:Integer}",
            "    SessionNumber: ${5:Integer} #required",
            "    Tags:",
            "      - ${6:Tag}",
            "    TrafficMirrorFilterId: ${7:String} #required",
            "    TrafficMirrorTargetId: ${8:String} #required",
            "    VirtualNetworkId: ${9:Integer}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrorsession.html"
        ],
        "prefix": "ec2-trafficmirrorsession",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::TrafficMirrorTarget": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::TrafficMirrorTarget",
            "  Properties:",
            "    Description: ${2:String}",
            "    NetworkInterfaceId: ${3:String}",
            "    NetworkLoadBalancerArn: ${4:String}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-trafficmirrortarget.html"
        ],
        "prefix": "ec2-trafficmirrortarget",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::TransitGateway": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::TransitGateway",
            "  Properties:",
            "    AmazonSideAsn: ${2:Integer}",
            "    AutoAcceptSharedAttachments: ${3:String}",
            "    DefaultRouteTableAssociation: ${4:String}",
            "    DefaultRouteTablePropagation: ${5:String}",
            "    Description: ${6:String}",
            "    DnsSupport: ${7:String}",
            "    MulticastSupport: ${8:String}",
            "    Tags:",
            "      - ${9:Tag}",
            "    VpnEcmpSupport: ${10:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgateway.html"
        ],
        "prefix": "ec2-transitgateway",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::TransitGatewayAttachment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::TransitGatewayAttachment",
            "  Properties:",
            "    SubnetIds: #required",
            "      - ${2:String}",
            "    Tags:",
            "      - ${3:Tag}",
            "    TransitGatewayId: ${4:String} #required",
            "    VpcId: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgatewayattachment.html"
        ],
        "prefix": "ec2-transitgatewayattachment",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::TransitGatewayRoute": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::TransitGatewayRoute",
            "  Properties:",
            "    Blackhole: ${2:Boolean}",
            "    DestinationCidrBlock: ${3:String}",
            "    TransitGatewayAttachmentId: ${4:String}",
            "    TransitGatewayRouteTableId: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgatewayroute.html"
        ],
        "prefix": "ec2-transitgatewayroute",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::TransitGatewayRouteTable": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::TransitGatewayRouteTable",
            "  Properties:",
            "    Tags:",
            "      - ${2:Tag}",
            "    TransitGatewayId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgatewayroutetable.html"
        ],
        "prefix": "ec2-transitgatewayroutetable",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::TransitGatewayRouteTableAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::TransitGatewayRouteTableAssociation",
            "  Properties:",
            "    TransitGatewayAttachmentId: ${2:String} #required",
            "    TransitGatewayRouteTableId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgatewayroutetableassociation.html"
        ],
        "prefix": "ec2-transitgatewayroutetableassociation",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::TransitGatewayRouteTablePropagation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::TransitGatewayRouteTablePropagation",
            "  Properties:",
            "    TransitGatewayAttachmentId: ${2:String} #required",
            "    TransitGatewayRouteTableId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-transitgatewayroutetablepropagation.html"
        ],
        "prefix": "ec2-transitgatewayroutetablepropagation",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::VPC": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::VPC",
            "  Properties:",
            "    CidrBlock: ${2:String} #required",
            "    EnableDnsHostnames: ${3:Boolean}",
            "    EnableDnsSupport: ${4:Boolean}",
            "    InstanceTenancy: ${5:String}",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html",
            "Attributes: ",
            "  CidrBlock",
            "  CidrBlockAssociations",
            "  DefaultNetworkAcl",
            "  DefaultSecurityGroup",
            "  Ipv6CidrBlocks"
        ],
        "prefix": "ec2-vpc",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::VPCCidrBlock": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::VPCCidrBlock",
            "  Properties:",
            "    AmazonProvidedIpv6CidrBlock: ${2:Boolean}",
            "    CidrBlock: ${3:String}",
            "    VpcId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpccidrblock.html"
        ],
        "prefix": "ec2-vpccidrblock",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::VPCDHCPOptionsAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::VPCDHCPOptionsAssociation",
            "  Properties:",
            "    DhcpOptionsId: ${2:String} #required",
            "    VpcId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-dhcp-options-assoc.html"
        ],
        "prefix": "ec2-vpcdhcpoptionsassociation",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::VPCEndpoint": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::VPCEndpoint",
            "  Properties:",
            "    PolicyDocument: ${2:Json}",
            "    PrivateDnsEnabled: ${3:Boolean}",
            "    RouteTableIds:",
            "      - ${4:String}",
            "    SecurityGroupIds:",
            "      - ${5:String}",
            "    ServiceName: ${6:String} #required",
            "    SubnetIds:",
            "      - ${7:String}",
            "    VpcEndpointType: ${8:String}",
            "    VpcId: ${9:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpoint.html",
            "Attributes: ",
            "  CreationTimestamp",
            "  DnsEntries",
            "  NetworkInterfaceIds"
        ],
        "prefix": "ec2-vpcendpoint",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::VPCEndpointConnectionNotification": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::VPCEndpointConnectionNotification",
            "  Properties:",
            "    ConnectionEvents: #required",
            "      - ${2:String}",
            "    ConnectionNotificationArn: ${3:String} #required",
            "    ServiceId: ${4:String}",
            "    VPCEndpointId: ${5:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpointconnectionnotification.html"
        ],
        "prefix": "ec2-vpcendpointconnectionnotification",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::VPCEndpointService": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::VPCEndpointService",
            "  Properties:",
            "    AcceptanceRequired: ${2:Boolean}",
            "    GatewayLoadBalancerArns:",
            "      - ${3:String}",
            "    NetworkLoadBalancerArns:",
            "      - ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpointservice.html"
        ],
        "prefix": "ec2-vpcendpointservice",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::VPCEndpointServicePermissions": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::VPCEndpointServicePermissions",
            "  Properties:",
            "    AllowedPrincipals:",
            "      - ${2:String}",
            "    ServiceId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcendpointservicepermissions.html"
        ],
        "prefix": "ec2-vpcendpointservicepermissions",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::VPCGatewayAttachment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::VPCGatewayAttachment",
            "  Properties:",
            "    InternetGatewayId: ${2:String}",
            "    VpcId: ${3:String} #required",
            "    VpnGatewayId: ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html"
        ],
        "prefix": "ec2-vpcgatewayattachment",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::VPCPeeringConnection": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::VPCPeeringConnection",
            "  Properties:",
            "    PeerOwnerId: ${2:String}",
            "    PeerRegion: ${3:String}",
            "    PeerRoleArn: ${4:String}",
            "    PeerVpcId: ${5:String} #required",
            "    Tags:",
            "      - ${6:Tag}",
            "    VpcId: ${7:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpcpeeringconnection.html"
        ],
        "prefix": "ec2-vpcpeeringconnection",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::VPNConnection": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::VPNConnection",
            "  Properties:",
            "    CustomerGatewayId: ${2:String} #required",
            "    StaticRoutesOnly: ${3:Boolean}",
            "    Tags:",
            "      - ${4:Tag}",
            "    TransitGatewayId: ${5:String}",
            "    Type: ${6:String} #required",
            "    VpnGatewayId: ${7:String}",
            "    VpnTunnelOptionsSpecifications:",
            "      - ${8:VpnTunnelOptionsSpecification}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-connection.html"
        ],
        "prefix": "ec2-vpnconnection",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::VPNConnectionRoute": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::VPNConnectionRoute",
            "  Properties:",
            "    DestinationCidrBlock: ${2:String} #required",
            "    VpnConnectionId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-connection-route.html"
        ],
        "prefix": "ec2-vpnconnectionroute",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::VPNGateway": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::VPNGateway",
            "  Properties:",
            "    AmazonSideAsn: ${2:Long}",
            "    Tags:",
            "      - ${3:Tag}",
            "    Type: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-gateway.html"
        ],
        "prefix": "ec2-vpngateway",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::VPNGatewayRoutePropagation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::VPNGatewayRoutePropagation",
            "  Properties:",
            "    RouteTableIds: #required",
            "      - ${2:String}",
            "    VpnGatewayId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpn-gatewayrouteprop.html"
        ],
        "prefix": "ec2-vpngatewayroutepropagation",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::Volume": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::Volume",
            "  Properties:",
            "    AutoEnableIO: ${2:Boolean}",
            "    AvailabilityZone: ${3:String} #required",
            "    Encrypted: ${4:Boolean}",
            "    Iops: ${5:Integer}",
            "    KmsKeyId: ${6:String}",
            "    MultiAttachEnabled: ${7:Boolean}",
            "    OutpostArn: ${8:String}",
            "    Size: ${9:Integer}",
            "    SnapshotId: ${10:String}",
            "    Tags:",
            "      - ${11:Tag}",
            "    Throughput: ${12:Integer}",
            "    VolumeType: ${13:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-ebs-volume.html"
        ],
        "prefix": "ec2-volume",
        "scope": "source.cloudformation"
    },
    "AWS::EC2::VolumeAttachment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EC2::VolumeAttachment",
            "  Properties:",
            "    Device: ${2:String} #required",
            "    InstanceId: ${3:String} #required",
            "    VolumeId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-ebs-volumeattachment.html"
        ],
        "prefix": "ec2-volumeattachment",
        "scope": "source.cloudformation"
    },
    "AWS::ECR::PublicRepository": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ECR::PublicRepository",
            "  Properties:",
            "    RepositoryCatalogData: ${2:Json}",
            "    RepositoryName: ${3:String}",
            "    RepositoryPolicyText: ${4:}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecr-publicrepository.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "ecr-publicrepository",
        "scope": "source.cloudformation"
    },
    "AWS::ECR::Repository": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ECR::Repository",
            "  Properties:",
            "    ImageScanningConfiguration: ${2:Json}",
            "    ImageTagMutability: ${3:String}",
            "    LifecyclePolicy:",
            "      ${4:LifecyclePolicy}",
            "    RepositoryName: ${5:String}",
            "    RepositoryPolicyText: ${6:}",
            "    Tags:",
            "      - ${7:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecr-repository.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "ecr-repository",
        "scope": "source.cloudformation"
    },
    "AWS::ECS::CapacityProvider": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ECS::CapacityProvider",
            "  Properties:",
            "    AutoScalingGroupProvider: #required",
            "      ${2:AutoScalingGroupProvider}",
            "    Name: ${3:String}",
            "    Tags:",
            "      - ${4:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-capacityprovider.html"
        ],
        "prefix": "ecs-capacityprovider",
        "scope": "source.cloudformation"
    },
    "AWS::ECS::Cluster": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ECS::Cluster",
            "  Properties:",
            "    CapacityProviders:",
            "      - ${2:String}",
            "    ClusterName: ${3:String}",
            "    ClusterSettings:",
            "      - ${4:ClusterSettings}",
            "    DefaultCapacityProviderStrategy:",
            "      - ${5:CapacityProviderStrategyItem}",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "ecs-cluster",
        "scope": "source.cloudformation"
    },
    "AWS::ECS::PrimaryTaskSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ECS::PrimaryTaskSet",
            "  Properties:",
            "    Cluster: ${2:String} #required",
            "    Service: ${3:String} #required",
            "    TaskSetId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-primarytaskset.html"
        ],
        "prefix": "ecs-primarytaskset",
        "scope": "source.cloudformation"
    },
    "AWS::ECS::Service": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ECS::Service",
            "  Properties:",
            "    CapacityProviderStrategy:",
            "      - ${2:CapacityProviderStrategyItem}",
            "    Cluster: ${3:String}",
            "    DeploymentConfiguration:",
            "      ${4:DeploymentConfiguration}",
            "    DeploymentController:",
            "      ${5:DeploymentController}",
            "    DesiredCount: ${6:Integer}",
            "    EnableECSManagedTags: ${7:Boolean}",
            "    HealthCheckGracePeriodSeconds: ${8:Integer}",
            "    LaunchType: ${9:String}",
            "    LoadBalancers:",
            "      - ${10:LoadBalancer}",
            "    NetworkConfiguration:",
            "      ${11:NetworkConfiguration}",
            "    PlacementConstraints:",
            "      - ${12:PlacementConstraint}",
            "    PlacementStrategies:",
            "      - ${13:PlacementStrategy}",
            "    PlatformVersion: ${14:String}",
            "    PropagateTags: ${15:String}",
            "    Role: ${16:String}",
            "    SchedulingStrategy: ${17:String}",
            "    ServiceArn: ${18:String}",
            "    ServiceName: ${19:String}",
            "    ServiceRegistries:",
            "      - ${20:ServiceRegistry}",
            "    Tags:",
            "      - ${21:Tag}",
            "    TaskDefinition: ${22:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html",
            "Attributes: ",
            "  Name"
        ],
        "prefix": "ecs-service",
        "scope": "source.cloudformation"
    },
    "AWS::ECS::TaskDefinition": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ECS::TaskDefinition",
            "  Properties:",
            "    ContainerDefinitions:",
            "      - ${2:ContainerDefinition}",
            "    Cpu: ${3:String}",
            "    ExecutionRoleArn: ${4:String}",
            "    Family: ${5:String}",
            "    InferenceAccelerators:",
            "      - ${6:InferenceAccelerator}",
            "    IpcMode: ${7:String}",
            "    Memory: ${8:String}",
            "    NetworkMode: ${9:String}",
            "    PidMode: ${10:String}",
            "    PlacementConstraints:",
            "      - ${11:TaskDefinitionPlacementConstraint}",
            "    ProxyConfiguration:",
            "      ${12:ProxyConfiguration}",
            "    RequiresCompatibilities:",
            "      - ${13:String}",
            "    Tags:",
            "      - ${14:Tag}",
            "    TaskRoleArn: ${15:String}",
            "    Volumes:",
            "      - ${16:Volume}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html",
            "Attributes: ",
            "  TaskDefinitionArn"
        ],
        "prefix": "ecs-taskdefinition",
        "scope": "source.cloudformation"
    },
    "AWS::ECS::TaskSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ECS::TaskSet",
            "  Properties:",
            "    Cluster: ${2:String} #required",
            "    ExternalId: ${3:String}",
            "    LaunchType: ${4:String}",
            "    LoadBalancers:",
            "      - ${5:LoadBalancer}",
            "    NetworkConfiguration:",
            "      ${6:NetworkConfiguration}",
            "    PlatformVersion: ${7:String}",
            "    Scale:",
            "      ${8:Scale}",
            "    Service: ${9:String} #required",
            "    ServiceRegistries:",
            "      - ${10:ServiceRegistry}",
            "    TaskDefinition: ${11:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskset.html",
            "Attributes: ",
            "  Id"
        ],
        "prefix": "ecs-taskset",
        "scope": "source.cloudformation"
    },
    "AWS::EFS::AccessPoint": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EFS::AccessPoint",
            "  Properties:",
            "    AccessPointTags:",
            "      - ${2:AccessPointTag}",
            "    ClientToken: ${3:String}",
            "    FileSystemId: ${4:String} #required",
            "    PosixUser:",
            "      ${5:PosixUser}",
            "    RootDirectory:",
            "      ${6:RootDirectory}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-accesspoint.html",
            "Attributes: ",
            "  AccessPointId",
            "  Arn"
        ],
        "prefix": "efs-accesspoint",
        "scope": "source.cloudformation"
    },
    "AWS::EFS::FileSystem": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EFS::FileSystem",
            "  Properties:",
            "    BackupPolicy:",
            "      ${2:BackupPolicy}",
            "    Encrypted: ${3:Boolean}",
            "    FileSystemPolicy: ${4:Json}",
            "    FileSystemTags:",
            "      - ${5:ElasticFileSystemTag}",
            "    KmsKeyId: ${6:String}",
            "    LifecyclePolicies:",
            "      - ${7:LifecyclePolicy}",
            "    PerformanceMode: ${8:String}",
            "    ProvisionedThroughputInMibps: ${9:Double}",
            "    ThroughputMode: ${10:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html",
            "Attributes: ",
            "  FileSystemId",
            "  Arn"
        ],
        "prefix": "efs-filesystem",
        "scope": "source.cloudformation"
    },
    "AWS::EFS::MountTarget": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EFS::MountTarget",
            "  Properties:",
            "    FileSystemId: ${2:String} #required",
            "    IpAddress: ${3:String}",
            "    SecurityGroups: #required",
            "      - ${4:String}",
            "    SubnetId: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html",
            "Attributes: ",
            "  IpAddress"
        ],
        "prefix": "efs-mounttarget",
        "scope": "source.cloudformation"
    },
    "AWS::EKS::Cluster": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EKS::Cluster",
            "  Properties:",
            "    EncryptionConfig:",
            "      - ${2:EncryptionConfig}",
            "    KubernetesNetworkConfig:",
            "      ${3:KubernetesNetworkConfig}",
            "    Name: ${4:String}",
            "    ResourcesVpcConfig: #required",
            "      ${5:ResourcesVpcConfig}",
            "    RoleArn: ${6:String} #required",
            "    Version: ${7:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-eks-cluster.html",
            "Attributes: ",
            "  Endpoint",
            "  ClusterSecurityGroupId",
            "  EncryptionConfigKeyArn",
            "  Arn",
            "  CertificateAuthorityData"
        ],
        "prefix": "eks-cluster",
        "scope": "source.cloudformation"
    },
    "AWS::EKS::FargateProfile": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EKS::FargateProfile",
            "  Properties:",
            "    ClusterName: ${2:String} #required",
            "    FargateProfileName: ${3:String}",
            "    PodExecutionRoleArn: ${4:String} #required",
            "    Selectors: #required",
            "      - ${5:Selector}",
            "    Subnets:",
            "      - ${6:String}",
            "    Tags:",
            "      - ${7:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-eks-fargateprofile.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "eks-fargateprofile",
        "scope": "source.cloudformation"
    },
    "AWS::EKS::Nodegroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EKS::Nodegroup",
            "  Properties:",
            "    AmiType: ${2:String}",
            "    CapacityType: ${3:String}",
            "    ClusterName: ${4:String} #required",
            "    DiskSize: ${5:Double}",
            "    ForceUpdateEnabled: ${6:Boolean}",
            "    InstanceTypes:",
            "      - ${7:String}",
            "    Labels: ${8:Json}",
            "    LaunchTemplate:",
            "      ${9:LaunchTemplateSpecification}",
            "    NodeRole: ${10:String} #required",
            "    NodegroupName: ${11:String}",
            "    ReleaseVersion: ${12:String}",
            "    RemoteAccess:",
            "      ${13:RemoteAccess}",
            "    ScalingConfig:",
            "      ${14:ScalingConfig}",
            "    Subnets: #required",
            "      - ${15:String}",
            "    Tags: ${16:Json}",
            "    Version: ${17:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-eks-nodegroup.html",
            "Attributes: ",
            "  NodegroupName",
            "  ClusterName",
            "  Arn"
        ],
        "prefix": "eks-nodegroup",
        "scope": "source.cloudformation"
    },
    "AWS::EMR::Cluster": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EMR::Cluster",
            "  Properties:",
            "    AdditionalInfo: ${2:Json}",
            "    Applications:",
            "      - ${3:Application}",
            "    AutoScalingRole: ${4:String}",
            "    BootstrapActions:",
            "      - ${5:BootstrapActionConfig}",
            "    Configurations:",
            "      - ${6:Configuration}",
            "    CustomAmiId: ${7:String}",
            "    EbsRootVolumeSize: ${8:Integer}",
            "    Instances: #required",
            "      ${9:JobFlowInstancesConfig}",
            "    JobFlowRole: ${10:String} #required",
            "    KerberosAttributes:",
            "      ${11:KerberosAttributes}",
            "    LogEncryptionKmsKeyId: ${12:String}",
            "    LogUri: ${13:String}",
            "    ManagedScalingPolicy:",
            "      ${14:ManagedScalingPolicy}",
            "    Name: ${15:String} #required",
            "    ReleaseLabel: ${16:String}",
            "    ScaleDownBehavior: ${17:String}",
            "    SecurityConfiguration: ${18:String}",
            "    ServiceRole: ${19:String} #required",
            "    StepConcurrencyLevel: ${20:Integer}",
            "    Steps:",
            "      - ${21:StepConfig}",
            "    Tags:",
            "      - ${22:Tag}",
            "    VisibleToAllUsers: ${23:Boolean}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticmapreduce-cluster.html",
            "Attributes: ",
            "  MasterPublicDNS"
        ],
        "prefix": "emr-cluster",
        "scope": "source.cloudformation"
    },
    "AWS::EMR::InstanceFleetConfig": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EMR::InstanceFleetConfig",
            "  Properties:",
            "    ClusterId: ${2:String} #required",
            "    InstanceFleetType: ${3:String} #required",
            "    InstanceTypeConfigs:",
            "      - ${4:InstanceTypeConfig}",
            "    LaunchSpecifications:",
            "      ${5:InstanceFleetProvisioningSpecifications}",
            "    Name: ${6:String}",
            "    TargetOnDemandCapacity: ${7:Integer}",
            "    TargetSpotCapacity: ${8:Integer}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticmapreduce-instancefleetconfig.html"
        ],
        "prefix": "emr-instancefleetconfig",
        "scope": "source.cloudformation"
    },
    "AWS::EMR::InstanceGroupConfig": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EMR::InstanceGroupConfig",
            "  Properties:",
            "    AutoScalingPolicy:",
            "      ${2:AutoScalingPolicy}",
            "    BidPrice: ${3:String}",
            "    Configurations:",
            "      - ${4:Configuration}",
            "    EbsConfiguration:",
            "      ${5:EbsConfiguration}",
            "    InstanceCount: ${6:Integer} #required",
            "    InstanceRole: ${7:String} #required",
            "    InstanceType: ${8:String} #required",
            "    JobFlowId: ${9:String} #required",
            "    Market: ${10:String}",
            "    Name: ${11:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emr-instancegroupconfig.html"
        ],
        "prefix": "emr-instancegroupconfig",
        "scope": "source.cloudformation"
    },
    "AWS::EMR::SecurityConfiguration": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EMR::SecurityConfiguration",
            "  Properties:",
            "    Name: ${2:String}",
            "    SecurityConfiguration: ${3:Json} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emr-securityconfiguration.html"
        ],
        "prefix": "emr-securityconfiguration",
        "scope": "source.cloudformation"
    },
    "AWS::EMR::Step": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EMR::Step",
            "  Properties:",
            "    ActionOnFailure: ${2:String} #required",
            "    HadoopJarStep: #required",
            "      ${3:HadoopJarStepConfig}",
            "    JobFlowId: ${4:String} #required",
            "    Name: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emr-step.html"
        ],
        "prefix": "emr-step",
        "scope": "source.cloudformation"
    },
    "AWS::ElastiCache::CacheCluster": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElastiCache::CacheCluster",
            "  Properties:",
            "    AZMode: ${2:String}",
            "    AutoMinorVersionUpgrade: ${3:Boolean}",
            "    CacheNodeType: ${4:String} #required",
            "    CacheParameterGroupName: ${5:String}",
            "    CacheSecurityGroupNames:",
            "      - ${6:String}",
            "    CacheSubnetGroupName: ${7:String}",
            "    ClusterName: ${8:String}",
            "    Engine: ${9:String} #required",
            "    EngineVersion: ${10:String}",
            "    NotificationTopicArn: ${11:String}",
            "    NumCacheNodes: ${12:Integer} #required",
            "    Port: ${13:Integer}",
            "    PreferredAvailabilityZone: ${14:String}",
            "    PreferredAvailabilityZones:",
            "      - ${15:String}",
            "    PreferredMaintenanceWindow: ${16:String}",
            "    SnapshotArns:",
            "      - ${17:String}",
            "    SnapshotName: ${18:String}",
            "    SnapshotRetentionLimit: ${19:Integer}",
            "    SnapshotWindow: ${20:String}",
            "    Tags:",
            "      - ${21:Tag}",
            "    VpcSecurityGroupIds:",
            "      - ${22:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticache-cache-cluster.html",
            "Attributes: ",
            "  ConfigurationEndpoint.Address",
            "  ConfigurationEndpoint.Port",
            "  RedisEndpoint.Address",
            "  RedisEndpoint.Port"
        ],
        "prefix": "elasticache-cachecluster",
        "scope": "source.cloudformation"
    },
    "AWS::ElastiCache::ParameterGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElastiCache::ParameterGroup",
            "  Properties:",
            "    CacheParameterGroupFamily: ${2:String} #required",
            "    Description: ${3:String} #required",
            "    Properties:",
            "      ${4:Map}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticache-parameter-group.html"
        ],
        "prefix": "elasticache-parametergroup",
        "scope": "source.cloudformation"
    },
    "AWS::ElastiCache::ReplicationGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElastiCache::ReplicationGroup",
            "  Properties:",
            "    AtRestEncryptionEnabled: ${2:Boolean}",
            "    AuthToken: ${3:String}",
            "    AutoMinorVersionUpgrade: ${4:Boolean}",
            "    AutomaticFailoverEnabled: ${5:Boolean}",
            "    CacheNodeType: ${6:String}",
            "    CacheParameterGroupName: ${7:String}",
            "    CacheSecurityGroupNames:",
            "      - ${8:String}",
            "    CacheSubnetGroupName: ${9:String}",
            "    Engine: ${10:String}",
            "    EngineVersion: ${11:String}",
            "    GlobalReplicationGroupId: ${12:String}",
            "    KmsKeyId: ${13:String}",
            "    MultiAZEnabled: ${14:Boolean}",
            "    NodeGroupConfiguration:",
            "      - ${15:NodeGroupConfiguration}",
            "    NotificationTopicArn: ${16:String}",
            "    NumCacheClusters: ${17:Integer}",
            "    NumNodeGroups: ${18:Integer}",
            "    Port: ${19:Integer}",
            "    PreferredCacheClusterAZs:",
            "      - ${20:String}",
            "    PreferredMaintenanceWindow: ${21:String}",
            "    PrimaryClusterId: ${22:String}",
            "    ReplicasPerNodeGroup: ${23:Integer}",
            "    ReplicationGroupDescription: ${24:String} #required",
            "    ReplicationGroupId: ${25:String}",
            "    SecurityGroupIds:",
            "      - ${26:String}",
            "    SnapshotArns:",
            "      - ${27:String}",
            "    SnapshotName: ${28:String}",
            "    SnapshotRetentionLimit: ${29:Integer}",
            "    SnapshotWindow: ${30:String}",
            "    SnapshottingClusterId: ${31:String}",
            "    Tags:",
            "      - ${32:Tag}",
            "    TransitEncryptionEnabled: ${33:Boolean}",
            "    UserGroupIds:",
            "      - ${34:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticache-replicationgroup.html",
            "Attributes: ",
            "  ConfigurationEndPoint.Address",
            "  ConfigurationEndPoint.Port",
            "  PrimaryEndPoint.Address",
            "  PrimaryEndPoint.Port",
            "  ReadEndPoint.Addresses",
            "  ReadEndPoint.Addresses.List",
            "  ReadEndPoint.Ports",
            "  ReadEndPoint.Ports.List",
            "  ReaderEndPoint.Address",
            "  ReaderEndPoint.Port"
        ],
        "prefix": "elasticache-replicationgroup",
        "scope": "source.cloudformation"
    },
    "AWS::ElastiCache::SecurityGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElastiCache::SecurityGroup",
            "  Properties:",
            "    Description: ${2:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticache-security-group.html"
        ],
        "prefix": "elasticache-securitygroup",
        "scope": "source.cloudformation"
    },
    "AWS::ElastiCache::SecurityGroupIngress": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElastiCache::SecurityGroupIngress",
            "  Properties:",
            "    CacheSecurityGroupName: ${2:String} #required",
            "    EC2SecurityGroupName: ${3:String} #required",
            "    EC2SecurityGroupOwnerId: ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticache-security-group-ingress.html"
        ],
        "prefix": "elasticache-securitygroupingress",
        "scope": "source.cloudformation"
    },
    "AWS::ElastiCache::SubnetGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElastiCache::SubnetGroup",
            "  Properties:",
            "    CacheSubnetGroupName: ${2:String}",
            "    Description: ${3:String} #required",
            "    SubnetIds: #required",
            "      - ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-elasticache-subnetgroup.html"
        ],
        "prefix": "elasticache-subnetgroup",
        "scope": "source.cloudformation"
    },
    "AWS::ElastiCache::User": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElastiCache::User",
            "  Properties:",
            "    AccessString: ${2:String}",
            "    Engine: ${3:String} #required",
            "    NoPasswordRequired: ${4:Boolean}",
            "    Passwords:",
            "      ${5:PasswordList}",
            "    UserId: ${6:String} #required",
            "    UserName: ${7:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticache-user.html",
            "Attributes: ",
            "  Status",
            "  UserGroupIds",
            "  Authentication",
            "  Arn"
        ],
        "prefix": "elasticache-user",
        "scope": "source.cloudformation"
    },
    "AWS::ElastiCache::UserGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElastiCache::UserGroup",
            "  Properties:",
            "    Engine: ${2:String} #required",
            "    UserGroupId: ${3:String} #required",
            "    UserIds:",
            "      ${4:UserIdList}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticache-usergroup.html",
            "Attributes: ",
            "  Status",
            "  ReplicationGroupIds",
            "  PendingChanges",
            "  Arn"
        ],
        "prefix": "elasticache-usergroup",
        "scope": "source.cloudformation"
    },
    "AWS::ElasticBeanstalk::Application": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElasticBeanstalk::Application",
            "  Properties:",
            "    ApplicationName: ${2:String}",
            "    Description: ${3:String}",
            "    ResourceLifecycleConfig:",
            "      ${4:ApplicationResourceLifecycleConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk.html"
        ],
        "prefix": "elasticbeanstalk-application",
        "scope": "source.cloudformation"
    },
    "AWS::ElasticBeanstalk::ApplicationVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElasticBeanstalk::ApplicationVersion",
            "  Properties:",
            "    ApplicationName: ${2:String} #required",
            "    Description: ${3:String}",
            "    SourceBundle: #required",
            "      ${4:SourceBundle}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-version.html"
        ],
        "prefix": "elasticbeanstalk-applicationversion",
        "scope": "source.cloudformation"
    },
    "AWS::ElasticBeanstalk::ConfigurationTemplate": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElasticBeanstalk::ConfigurationTemplate",
            "  Properties:",
            "    ApplicationName: ${2:String} #required",
            "    Description: ${3:String}",
            "    EnvironmentId: ${4:String}",
            "    OptionSettings:",
            "      - ${5:ConfigurationOptionSetting}",
            "    PlatformArn: ${6:String}",
            "    SolutionStackName: ${7:String}",
            "    SourceConfiguration:",
            "      ${8:SourceConfiguration}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticbeanstalk-configurationtemplate.html"
        ],
        "prefix": "elasticbeanstalk-configurationtemplate",
        "scope": "source.cloudformation"
    },
    "AWS::ElasticBeanstalk::Environment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElasticBeanstalk::Environment",
            "  Properties:",
            "    ApplicationName: ${2:String} #required",
            "    CNAMEPrefix: ${3:String}",
            "    Description: ${4:String}",
            "    EnvironmentName: ${5:String}",
            "    OptionSettings:",
            "      - ${6:OptionSetting}",
            "    PlatformArn: ${7:String}",
            "    SolutionStackName: ${8:String}",
            "    Tags:",
            "      - ${9:Tag}",
            "    TemplateName: ${10:String}",
            "    Tier:",
            "      ${11:Tier}",
            "    VersionLabel: ${12:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-environment.html",
            "Attributes: ",
            "  EndpointURL"
        ],
        "prefix": "elasticbeanstalk-environment",
        "scope": "source.cloudformation"
    },
    "AWS::ElasticLoadBalancing::LoadBalancer": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElasticLoadBalancing::LoadBalancer",
            "  Properties:",
            "    AccessLoggingPolicy:",
            "      ${2:AccessLoggingPolicy}",
            "    AppCookieStickinessPolicy:",
            "      - ${3:AppCookieStickinessPolicy}",
            "    AvailabilityZones:",
            "      - ${4:String}",
            "    ConnectionDrainingPolicy:",
            "      ${5:ConnectionDrainingPolicy}",
            "    ConnectionSettings:",
            "      ${6:ConnectionSettings}",
            "    CrossZone: ${7:Boolean}",
            "    HealthCheck:",
            "      ${8:HealthCheck}",
            "    Instances:",
            "      - ${9:String}",
            "    LBCookieStickinessPolicy:",
            "      - ${10:LBCookieStickinessPolicy}",
            "    Listeners: #required",
            "      - ${11:Listeners}",
            "    LoadBalancerName: ${12:String}",
            "    Policies:",
            "      - ${13:Policies}",
            "    Scheme: ${14:String}",
            "    SecurityGroups:",
            "      - ${15:String}",
            "    Subnets:",
            "      - ${16:String}",
            "    Tags:",
            "      - ${17:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-elb.html",
            "Attributes: ",
            "  CanonicalHostedZoneName",
            "  CanonicalHostedZoneNameID",
            "  DNSName",
            "  SourceSecurityGroup.GroupName",
            "  SourceSecurityGroup.OwnerAlias"
        ],
        "prefix": "elasticloadbalancing-loadbalancer",
        "scope": "source.cloudformation"
    },
    "AWS::ElasticLoadBalancingV2::Listener": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElasticLoadBalancingV2::Listener",
            "  Properties:",
            "    AlpnPolicy:",
            "      - ${2:String}",
            "    Certificates:",
            "      - ${3:Certificate}",
            "    DefaultActions: #required",
            "      - ${4:Action}",
            "    LoadBalancerArn: ${5:String} #required",
            "    Port: ${6:Integer}",
            "    Protocol: ${7:String}",
            "    SslPolicy: ${8:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html",
            "Attributes: ",
            "  ListenerArn"
        ],
        "prefix": "elasticloadbalancingv2-listener",
        "scope": "source.cloudformation"
    },
    "AWS::ElasticLoadBalancingV2::ListenerCertificate": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElasticLoadBalancingV2::ListenerCertificate",
            "  Properties:",
            "    Certificates: #required",
            "      - ${2:Certificate}",
            "    ListenerArn: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenercertificate.html"
        ],
        "prefix": "elasticloadbalancingv2-listenercertificate",
        "scope": "source.cloudformation"
    },
    "AWS::ElasticLoadBalancingV2::ListenerRule": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElasticLoadBalancingV2::ListenerRule",
            "  Properties:",
            "    Actions: #required",
            "      - ${2:Action}",
            "    Conditions: #required",
            "      - ${3:RuleCondition}",
            "    ListenerArn: ${4:String} #required",
            "    Priority: ${5:Integer} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html"
        ],
        "prefix": "elasticloadbalancingv2-listenerrule",
        "scope": "source.cloudformation"
    },
    "AWS::ElasticLoadBalancingV2::LoadBalancer": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElasticLoadBalancingV2::LoadBalancer",
            "  Properties:",
            "    IpAddressType: ${2:String}",
            "    LoadBalancerAttributes:",
            "      - ${3:LoadBalancerAttribute}",
            "    Name: ${4:String}",
            "    Scheme: ${5:String}",
            "    SecurityGroups:",
            "      - ${6:String}",
            "    SubnetMappings:",
            "      - ${7:SubnetMapping}",
            "    Subnets:",
            "      - ${8:String}",
            "    Tags:",
            "      - ${9:Tag}",
            "    Type: ${10:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html",
            "Attributes: ",
            "  CanonicalHostedZoneID",
            "  DNSName",
            "  LoadBalancerFullName",
            "  LoadBalancerName",
            "  SecurityGroups"
        ],
        "prefix": "elasticloadbalancingv2-loadbalancer",
        "scope": "source.cloudformation"
    },
    "AWS::ElasticLoadBalancingV2::TargetGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ElasticLoadBalancingV2::TargetGroup",
            "  Properties:",
            "    HealthCheckEnabled: ${2:Boolean}",
            "    HealthCheckIntervalSeconds: ${3:Integer}",
            "    HealthCheckPath: ${4:String}",
            "    HealthCheckPort: ${5:String}",
            "    HealthCheckProtocol: ${6:String}",
            "    HealthCheckTimeoutSeconds: ${7:Integer}",
            "    HealthyThresholdCount: ${8:Integer}",
            "    Matcher:",
            "      ${9:Matcher}",
            "    Name: ${10:String}",
            "    Port: ${11:Integer}",
            "    Protocol: ${12:String}",
            "    Tags:",
            "      - ${13:Tag}",
            "    TargetGroupAttributes:",
            "      - ${14:TargetGroupAttribute}",
            "    TargetType: ${15:String}",
            "    Targets:",
            "      - ${16:TargetDescription}",
            "    UnhealthyThresholdCount: ${17:Integer}",
            "    VpcId: ${18:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html",
            "Attributes: ",
            "  LoadBalancerArns",
            "  TargetGroupFullName",
            "  TargetGroupName"
        ],
        "prefix": "elasticloadbalancingv2-targetgroup",
        "scope": "source.cloudformation"
    },
    "AWS::Elasticsearch::Domain": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Elasticsearch::Domain",
            "  Properties:",
            "    AccessPolicies: ${2:Json}",
            "    AdvancedOptions:",
            "      ${3:Map}",
            "    AdvancedSecurityOptions:",
            "      ${4:AdvancedSecurityOptionsInput}",
            "    CognitoOptions:",
            "      ${5:CognitoOptions}",
            "    DomainEndpointOptions:",
            "      ${6:DomainEndpointOptions}",
            "    DomainName: ${7:String}",
            "    EBSOptions:",
            "      ${8:EBSOptions}",
            "    ElasticsearchClusterConfig:",
            "      ${9:ElasticsearchClusterConfig}",
            "    ElasticsearchVersion: ${10:String}",
            "    EncryptionAtRestOptions:",
            "      ${11:EncryptionAtRestOptions}",
            "    LogPublishingOptions:",
            "      ${12:Map}",
            "    NodeToNodeEncryptionOptions:",
            "      ${13:NodeToNodeEncryptionOptions}",
            "    SnapshotOptions:",
            "      ${14:SnapshotOptions}",
            "    Tags:",
            "      - ${15:Tag}",
            "    VPCOptions:",
            "      ${16:VPCOptions}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticsearch-domain.html",
            "Attributes: ",
            "  Arn",
            "  DomainArn",
            "  DomainEndpoint"
        ],
        "prefix": "elasticsearch-domain",
        "scope": "source.cloudformation"
    },
    "AWS::EventSchemas::Discoverer": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EventSchemas::Discoverer",
            "  Properties:",
            "    Description: ${2:String}",
            "    SourceArn: ${3:String} #required",
            "    Tags:",
            "      - ${4:TagsEntry}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-eventschemas-discoverer.html",
            "Attributes: ",
            "  DiscovererArn",
            "  DiscovererId"
        ],
        "prefix": "eventschemas-discoverer",
        "scope": "source.cloudformation"
    },
    "AWS::EventSchemas::Registry": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EventSchemas::Registry",
            "  Properties:",
            "    Description: ${2:String}",
            "    RegistryName: ${3:String}",
            "    Tags:",
            "      - ${4:TagsEntry}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-eventschemas-registry.html",
            "Attributes: ",
            "  RegistryName",
            "  RegistryArn"
        ],
        "prefix": "eventschemas-registry",
        "scope": "source.cloudformation"
    },
    "AWS::EventSchemas::RegistryPolicy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EventSchemas::RegistryPolicy",
            "  Properties:",
            "    Policy: ${2:Json} #required",
            "    RegistryName: ${3:String} #required",
            "    RevisionId: ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-eventschemas-registrypolicy.html",
            "Attributes: ",
            "  Id"
        ],
        "prefix": "eventschemas-registrypolicy",
        "scope": "source.cloudformation"
    },
    "AWS::EventSchemas::Schema": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::EventSchemas::Schema",
            "  Properties:",
            "    Content: ${2:String} #required",
            "    Description: ${3:String}",
            "    RegistryName: ${4:String} #required",
            "    SchemaName: ${5:String}",
            "    Tags:",
            "      - ${6:TagsEntry}",
            "    Type: ${7:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-eventschemas-schema.html",
            "Attributes: ",
            "  SchemaVersion",
            "  SchemaArn",
            "  SchemaName"
        ],
        "prefix": "eventschemas-schema",
        "scope": "source.cloudformation"
    },
    "AWS::Events::Archive": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Events::Archive",
            "  Properties:",
            "    ArchiveName: ${2:String}",
            "    Description: ${3:String}",
            "    EventPattern: ${4:Json}",
            "    RetentionDays: ${5:Integer}",
            "    SourceArn: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-archive.html",
            "Attributes: ",
            "  ArchiveName",
            "  Arn"
        ],
        "prefix": "events-archive",
        "scope": "source.cloudformation"
    },
    "AWS::Events::EventBus": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Events::EventBus",
            "  Properties:",
            "    EventSourceName: ${2:String}",
            "    Name: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-eventbus.html",
            "Attributes: ",
            "  Policy",
            "  Arn",
            "  Name"
        ],
        "prefix": "events-eventbus",
        "scope": "source.cloudformation"
    },
    "AWS::Events::EventBusPolicy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Events::EventBusPolicy",
            "  Properties:",
            "    Action: ${2:String}",
            "    Condition:",
            "      ${3:Condition}",
            "    EventBusName: ${4:String}",
            "    Principal: ${5:String}",
            "    Statement: ${6:Json}",
            "    StatementId: ${7:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-eventbuspolicy.html"
        ],
        "prefix": "events-eventbuspolicy",
        "scope": "source.cloudformation"
    },
    "AWS::Events::Rule": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Events::Rule",
            "  Properties:",
            "    Description: ${2:String}",
            "    EventBusName: ${3:String}",
            "    EventPattern: ${4:Json}",
            "    Name: ${5:String}",
            "    RoleArn: ${6:String}",
            "    ScheduleExpression: ${7:String}",
            "    State: ${8:String}",
            "    Targets:",
            "      - ${9:Target}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-rule.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "events-rule",
        "scope": "source.cloudformation"
    },
    "AWS::FMS::NotificationChannel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::FMS::NotificationChannel",
            "  Properties:",
            "    SnsRoleName: ${2:String} #required",
            "    SnsTopicArn: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-fms-notificationchannel.html"
        ],
        "prefix": "fms-notificationchannel",
        "scope": "source.cloudformation"
    },
    "AWS::FMS::Policy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::FMS::Policy",
            "  Properties:",
            "    DeleteAllPolicyResources: ${2:Boolean}",
            "    ExcludeMap:",
            "      ${3:IEMap}",
            "    ExcludeResourceTags: ${4:Boolean} #required",
            "    IncludeMap:",
            "      ${5:IEMap}",
            "    PolicyName: ${6:String} #required",
            "    RemediationEnabled: ${7:Boolean} #required",
            "    ResourceTags:",
            "      - ${8:ResourceTag}",
            "    ResourceType: ${9:String} #required",
            "    ResourceTypeList:",
            "      - ${10:String}",
            "    SecurityServicePolicyData: ${11:Json} #required",
            "    Tags:",
            "      - ${12:PolicyTag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-fms-policy.html",
            "Attributes: ",
            "  Id",
            "  Arn"
        ],
        "prefix": "fms-policy",
        "scope": "source.cloudformation"
    },
    "AWS::FSx::FileSystem": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::FSx::FileSystem",
            "  Properties:",
            "    BackupId: ${2:String}",
            "    FileSystemType: ${3:String} #required",
            "    KmsKeyId: ${4:String}",
            "    LustreConfiguration:",
            "      ${5:LustreConfiguration}",
            "    SecurityGroupIds:",
            "      - ${6:String}",
            "    StorageCapacity: ${7:Integer}",
            "    StorageType: ${8:String}",
            "    SubnetIds: #required",
            "      - ${9:String}",
            "    Tags:",
            "      - ${10:Tag}",
            "    WindowsConfiguration:",
            "      ${11:WindowsConfiguration}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-fsx-filesystem.html",
            "Attributes: ",
            "  LustreMountName"
        ],
        "prefix": "fsx-filesystem",
        "scope": "source.cloudformation"
    },
    "AWS::GameLift::Alias": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GameLift::Alias",
            "  Properties:",
            "    Description: ${2:String}",
            "    Name: ${3:String} #required",
            "    RoutingStrategy: #required",
            "      ${4:RoutingStrategy}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-gamelift-alias.html",
            "Attributes: ",
            "  AliasId"
        ],
        "prefix": "gamelift-alias",
        "scope": "source.cloudformation"
    },
    "AWS::GameLift::Build": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GameLift::Build",
            "  Properties:",
            "    Name: ${2:String}",
            "    OperatingSystem: ${3:String}",
            "    StorageLocation:",
            "      ${4:S3Location}",
            "    Version: ${5:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-gamelift-build.html"
        ],
        "prefix": "gamelift-build",
        "scope": "source.cloudformation"
    },
    "AWS::GameLift::Fleet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GameLift::Fleet",
            "  Properties:",
            "    BuildId: ${2:String}",
            "    CertificateConfiguration:",
            "      ${3:CertificateConfiguration}",
            "    Description: ${4:String}",
            "    DesiredEC2Instances: ${5:Integer}",
            "    EC2InboundPermissions:",
            "      - ${6:IpPermission}",
            "    EC2InstanceType: ${7:String} #required",
            "    FleetType: ${8:String}",
            "    InstanceRoleARN: ${9:String}",
            "    LogPaths:",
            "      - ${10:String}",
            "    MaxSize: ${11:Integer}",
            "    MetricGroups:",
            "      - ${12:String}",
            "    MinSize: ${13:Integer}",
            "    Name: ${14:String} #required",
            "    NewGameSessionProtectionPolicy: ${15:String}",
            "    PeerVpcAwsAccountId: ${16:String}",
            "    PeerVpcId: ${17:String}",
            "    ResourceCreationLimitPolicy:",
            "      ${18:ResourceCreationLimitPolicy}",
            "    RuntimeConfiguration:",
            "      ${19:RuntimeConfiguration}",
            "    ScriptId: ${20:String}",
            "    ServerLaunchParameters: ${21:String}",
            "    ServerLaunchPath: ${22:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-gamelift-fleet.html"
        ],
        "prefix": "gamelift-fleet",
        "scope": "source.cloudformation"
    },
    "AWS::GameLift::GameServerGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GameLift::GameServerGroup",
            "  Properties:",
            "    AutoScalingPolicy:",
            "      ${2:AutoScalingPolicy}",
            "    BalancingStrategy: ${3:String}",
            "    DeleteOption: ${4:String}",
            "    GameServerGroupName: ${5:String} #required",
            "    GameServerProtectionPolicy: ${6:String}",
            "    InstanceDefinitions: #required",
            "      ${7:InstanceDefinitions}",
            "    LaunchTemplate: #required",
            "      ${8:LaunchTemplate}",
            "    MaxSize: ${9:Double}",
            "    MinSize: ${10:Double}",
            "    RoleArn: ${11:String} #required",
            "    Tags:",
            "      ${12:Tags}",
            "    VpcSubnets:",
            "      ${13:VpcSubnets}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-gamelift-gameservergroup.html",
            "Attributes: ",
            "  AutoScalingGroupArn",
            "  GameServerGroupArn"
        ],
        "prefix": "gamelift-gameservergroup",
        "scope": "source.cloudformation"
    },
    "AWS::GameLift::GameSessionQueue": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GameLift::GameSessionQueue",
            "  Properties:",
            "    Destinations:",
            "      - ${2:Destination}",
            "    Name: ${3:String} #required",
            "    PlayerLatencyPolicies:",
            "      - ${4:PlayerLatencyPolicy}",
            "    TimeoutInSeconds: ${5:Integer}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-gamelift-gamesessionqueue.html",
            "Attributes: ",
            "  Arn",
            "  Name"
        ],
        "prefix": "gamelift-gamesessionqueue",
        "scope": "source.cloudformation"
    },
    "AWS::GameLift::MatchmakingConfiguration": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GameLift::MatchmakingConfiguration",
            "  Properties:",
            "    AcceptanceRequired: ${2:Boolean} #required",
            "    AcceptanceTimeoutSeconds: ${3:Integer}",
            "    AdditionalPlayerCount: ${4:Integer}",
            "    BackfillMode: ${5:String}",
            "    CustomEventData: ${6:String}",
            "    Description: ${7:String}",
            "    FlexMatchMode: ${8:String}",
            "    GameProperties:",
            "      - ${9:GameProperty}",
            "    GameSessionData: ${10:String}",
            "    GameSessionQueueArns:",
            "      - ${11:String}",
            "    Name: ${12:String} #required",
            "    NotificationTarget: ${13:String}",
            "    RequestTimeoutSeconds: ${14:Integer} #required",
            "    RuleSetName: ${15:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-gamelift-matchmakingconfiguration.html",
            "Attributes: ",
            "  Arn",
            "  Name"
        ],
        "prefix": "gamelift-matchmakingconfiguration",
        "scope": "source.cloudformation"
    },
    "AWS::GameLift::MatchmakingRuleSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GameLift::MatchmakingRuleSet",
            "  Properties:",
            "    Name: ${2:String} #required",
            "    RuleSetBody: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-gamelift-matchmakingruleset.html",
            "Attributes: ",
            "  Arn",
            "  Name"
        ],
        "prefix": "gamelift-matchmakingruleset",
        "scope": "source.cloudformation"
    },
    "AWS::GameLift::Script": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GameLift::Script",
            "  Properties:",
            "    Name: ${2:String}",
            "    StorageLocation: #required",
            "      ${3:S3Location}",
            "    Version: ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-gamelift-script.html",
            "Attributes: ",
            "  Id",
            "  Arn"
        ],
        "prefix": "gamelift-script",
        "scope": "source.cloudformation"
    },
    "AWS::GlobalAccelerator::Accelerator": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GlobalAccelerator::Accelerator",
            "  Properties:",
            "    Enabled: ${2:Boolean}",
            "    IpAddressType: ${3:String}",
            "    IpAddresses:",
            "      - ${4:String}",
            "    Name: ${5:String} #required",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-globalaccelerator-accelerator.html",
            "Attributes: ",
            "  DnsName",
            "  AcceleratorArn"
        ],
        "prefix": "globalaccelerator-accelerator",
        "scope": "source.cloudformation"
    },
    "AWS::GlobalAccelerator::EndpointGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GlobalAccelerator::EndpointGroup",
            "  Properties:",
            "    EndpointConfigurations:",
            "      - ${2:EndpointConfiguration}",
            "    EndpointGroupRegion: ${3:String} #required",
            "    HealthCheckIntervalSeconds: ${4:Integer}",
            "    HealthCheckPath: ${5:String}",
            "    HealthCheckPort: ${6:Integer}",
            "    HealthCheckProtocol: ${7:String}",
            "    ListenerArn: ${8:String} #required",
            "    PortOverrides:",
            "      - ${9:PortOverride}",
            "    ThresholdCount: ${10:Integer}",
            "    TrafficDialPercentage: ${11:Double}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-globalaccelerator-endpointgroup.html",
            "Attributes: ",
            "  EndpointGroupArn"
        ],
        "prefix": "globalaccelerator-endpointgroup",
        "scope": "source.cloudformation"
    },
    "AWS::GlobalAccelerator::Listener": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GlobalAccelerator::Listener",
            "  Properties:",
            "    AcceleratorArn: ${2:String} #required",
            "    ClientAffinity: ${3:String}",
            "    PortRanges: #required",
            "      - ${4:PortRange}",
            "    Protocol: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-globalaccelerator-listener.html",
            "Attributes: ",
            "  ListenerArn"
        ],
        "prefix": "globalaccelerator-listener",
        "scope": "source.cloudformation"
    },
    "AWS::Glue::Classifier": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Glue::Classifier",
            "  Properties:",
            "    CsvClassifier:",
            "      ${2:CsvClassifier}",
            "    GrokClassifier:",
            "      ${3:GrokClassifier}",
            "    JsonClassifier:",
            "      ${4:JsonClassifier}",
            "    XMLClassifier:",
            "      ${5:XMLClassifier}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-classifier.html"
        ],
        "prefix": "glue-classifier",
        "scope": "source.cloudformation"
    },
    "AWS::Glue::Connection": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Glue::Connection",
            "  Properties:",
            "    CatalogId: ${2:String} #required",
            "    ConnectionInput: #required",
            "      ${3:ConnectionInput}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-connection.html"
        ],
        "prefix": "glue-connection",
        "scope": "source.cloudformation"
    },
    "AWS::Glue::Crawler": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Glue::Crawler",
            "  Properties:",
            "    Classifiers:",
            "      - ${2:String}",
            "    Configuration: ${3:String}",
            "    CrawlerSecurityConfiguration: ${4:String}",
            "    DatabaseName: ${5:String}",
            "    Description: ${6:String}",
            "    Name: ${7:String}",
            "    Role: ${8:String} #required",
            "    Schedule:",
            "      ${9:Schedule}",
            "    SchemaChangePolicy:",
            "      ${10:SchemaChangePolicy}",
            "    TablePrefix: ${11:String}",
            "    Tags: ${12:Json}",
            "    Targets: #required",
            "      ${13:Targets}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-crawler.html"
        ],
        "prefix": "glue-crawler",
        "scope": "source.cloudformation"
    },
    "AWS::Glue::DataCatalogEncryptionSettings": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Glue::DataCatalogEncryptionSettings",
            "  Properties:",
            "    CatalogId: ${2:String} #required",
            "    DataCatalogEncryptionSettings: #required",
            "      ${3:DataCatalogEncryptionSettings}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-datacatalogencryptionsettings.html"
        ],
        "prefix": "glue-datacatalogencryptionsettings",
        "scope": "source.cloudformation"
    },
    "AWS::Glue::Database": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Glue::Database",
            "  Properties:",
            "    CatalogId: ${2:String} #required",
            "    DatabaseInput: #required",
            "      ${3:DatabaseInput}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-database.html"
        ],
        "prefix": "glue-database",
        "scope": "source.cloudformation"
    },
    "AWS::Glue::DevEndpoint": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Glue::DevEndpoint",
            "  Properties:",
            "    Arguments: ${2:Json}",
            "    EndpointName: ${3:String}",
            "    ExtraJarsS3Path: ${4:String}",
            "    ExtraPythonLibsS3Path: ${5:String}",
            "    GlueVersion: ${6:String}",
            "    NumberOfNodes: ${7:Integer}",
            "    NumberOfWorkers: ${8:Integer}",
            "    PublicKey: ${9:String}",
            "    PublicKeys:",
            "      - ${10:String}",
            "    RoleArn: ${11:String} #required",
            "    SecurityConfiguration: ${12:String}",
            "    SecurityGroupIds:",
            "      - ${13:String}",
            "    SubnetId: ${14:String}",
            "    Tags: ${15:Json}",
            "    WorkerType: ${16:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-devendpoint.html"
        ],
        "prefix": "glue-devendpoint",
        "scope": "source.cloudformation"
    },
    "AWS::Glue::Job": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Glue::Job",
            "  Properties:",
            "    AllocatedCapacity: ${2:Double}",
            "    Command: #required",
            "      ${3:JobCommand}",
            "    Connections:",
            "      ${4:ConnectionsList}",
            "    DefaultArguments: ${5:Json}",
            "    Description: ${6:String}",
            "    ExecutionProperty:",
            "      ${7:ExecutionProperty}",
            "    GlueVersion: ${8:String}",
            "    LogUri: ${9:String}",
            "    MaxCapacity: ${10:Double}",
            "    MaxRetries: ${11:Double}",
            "    Name: ${12:String}",
            "    NotificationProperty:",
            "      ${13:NotificationProperty}",
            "    NumberOfWorkers: ${14:Integer}",
            "    Role: ${15:String} #required",
            "    SecurityConfiguration: ${16:String}",
            "    Tags: ${17:Json}",
            "    Timeout: ${18:Integer}",
            "    WorkerType: ${19:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-job.html"
        ],
        "prefix": "glue-job",
        "scope": "source.cloudformation"
    },
    "AWS::Glue::MLTransform": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Glue::MLTransform",
            "  Properties:",
            "    Description: ${2:String}",
            "    GlueVersion: ${3:String}",
            "    InputRecordTables: #required",
            "      ${4:InputRecordTables}",
            "    MaxCapacity: ${5:Double}",
            "    MaxRetries: ${6:Integer}",
            "    Name: ${7:String}",
            "    NumberOfWorkers: ${8:Integer}",
            "    Role: ${9:String} #required",
            "    Tags: ${10:Json}",
            "    Timeout: ${11:Integer}",
            "    TransformEncryption:",
            "      ${12:TransformEncryption}",
            "    TransformParameters: #required",
            "      ${13:TransformParameters}",
            "    WorkerType: ${14:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-mltransform.html"
        ],
        "prefix": "glue-mltransform",
        "scope": "source.cloudformation"
    },
    "AWS::Glue::Partition": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Glue::Partition",
            "  Properties:",
            "    CatalogId: ${2:String} #required",
            "    DatabaseName: ${3:String} #required",
            "    PartitionInput: #required",
            "      ${4:PartitionInput}",
            "    TableName: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-partition.html"
        ],
        "prefix": "glue-partition",
        "scope": "source.cloudformation"
    },
    "AWS::Glue::Registry": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Glue::Registry",
            "  Properties:",
            "    Description: ${2:String}",
            "    Name: ${3:String} #required",
            "    Tags:",
            "      - ${4:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-registry.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "glue-registry",
        "scope": "source.cloudformation"
    },
    "AWS::Glue::Schema": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Glue::Schema",
            "  Properties:",
            "    CheckpointVersion:",
            "      ${2:SchemaVersion}",
            "    Compatibility: ${3:String} #required",
            "    DataFormat: ${4:String} #required",
            "    Description: ${5:String}",
            "    Name: ${6:String} #required",
            "    Registry:",
            "      ${7:Registry}",
            "    SchemaDefinition: ${8:String} #required",
            "    Tags:",
            "      - ${9:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-schema.html",
            "Attributes: ",
            "  Arn",
            "  InitialSchemaVersionId"
        ],
        "prefix": "glue-schema",
        "scope": "source.cloudformation"
    },
    "AWS::Glue::SchemaVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Glue::SchemaVersion",
            "  Properties:",
            "    Schema: #required",
            "      ${2:Schema}",
            "    SchemaDefinition: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-schemaversion.html",
            "Attributes: ",
            "  VersionId"
        ],
        "prefix": "glue-schemaversion",
        "scope": "source.cloudformation"
    },
    "AWS::Glue::SchemaVersionMetadata": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Glue::SchemaVersionMetadata",
            "  Properties:",
            "    Key: ${2:String} #required",
            "    SchemaVersionId: ${3:String} #required",
            "    Value: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-schemaversionmetadata.html"
        ],
        "prefix": "glue-schemaversionmetadata",
        "scope": "source.cloudformation"
    },
    "AWS::Glue::SecurityConfiguration": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Glue::SecurityConfiguration",
            "  Properties:",
            "    EncryptionConfiguration: #required",
            "      ${2:EncryptionConfiguration}",
            "    Name: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-securityconfiguration.html"
        ],
        "prefix": "glue-securityconfiguration",
        "scope": "source.cloudformation"
    },
    "AWS::Glue::Table": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Glue::Table",
            "  Properties:",
            "    CatalogId: ${2:String} #required",
            "    DatabaseName: ${3:String} #required",
            "    TableInput: #required",
            "      ${4:TableInput}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-table.html"
        ],
        "prefix": "glue-table",
        "scope": "source.cloudformation"
    },
    "AWS::Glue::Trigger": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Glue::Trigger",
            "  Properties:",
            "    Actions: #required",
            "      - ${2:Action}",
            "    Description: ${3:String}",
            "    Name: ${4:String}",
            "    Predicate:",
            "      ${5:Predicate}",
            "    Schedule: ${6:String}",
            "    StartOnCreation: ${7:Boolean}",
            "    Tags: ${8:Json}",
            "    Type: ${9:String} #required",
            "    WorkflowName: ${10:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-trigger.html"
        ],
        "prefix": "glue-trigger",
        "scope": "source.cloudformation"
    },
    "AWS::Glue::Workflow": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Glue::Workflow",
            "  Properties:",
            "    DefaultRunProperties: ${2:Json}",
            "    Description: ${3:String}",
            "    Name: ${4:String}",
            "    Tags: ${5:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-glue-workflow.html"
        ],
        "prefix": "glue-workflow",
        "scope": "source.cloudformation"
    },
    "AWS::Greengrass::ConnectorDefinition": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Greengrass::ConnectorDefinition",
            "  Properties:",
            "    InitialVersion:",
            "      ${2:ConnectorDefinitionVersion}",
            "    Name: ${3:String} #required",
            "    Tags: ${4:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-connectordefinition.html",
            "Attributes: ",
            "  LatestVersionArn",
            "  Id",
            "  Arn",
            "  Name"
        ],
        "prefix": "greengrass-connectordefinition",
        "scope": "source.cloudformation"
    },
    "AWS::Greengrass::ConnectorDefinitionVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Greengrass::ConnectorDefinitionVersion",
            "  Properties:",
            "    ConnectorDefinitionId: ${2:String} #required",
            "    Connectors: #required",
            "      - ${3:Connector}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-connectordefinitionversion.html"
        ],
        "prefix": "greengrass-connectordefinitionversion",
        "scope": "source.cloudformation"
    },
    "AWS::Greengrass::CoreDefinition": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Greengrass::CoreDefinition",
            "  Properties:",
            "    InitialVersion:",
            "      ${2:CoreDefinitionVersion}",
            "    Name: ${3:String} #required",
            "    Tags: ${4:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-coredefinition.html",
            "Attributes: ",
            "  LatestVersionArn",
            "  Id",
            "  Arn",
            "  Name"
        ],
        "prefix": "greengrass-coredefinition",
        "scope": "source.cloudformation"
    },
    "AWS::Greengrass::CoreDefinitionVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Greengrass::CoreDefinitionVersion",
            "  Properties:",
            "    CoreDefinitionId: ${2:String} #required",
            "    Cores: #required",
            "      - ${3:Core}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-coredefinitionversion.html"
        ],
        "prefix": "greengrass-coredefinitionversion",
        "scope": "source.cloudformation"
    },
    "AWS::Greengrass::DeviceDefinition": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Greengrass::DeviceDefinition",
            "  Properties:",
            "    InitialVersion:",
            "      ${2:DeviceDefinitionVersion}",
            "    Name: ${3:String} #required",
            "    Tags: ${4:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-devicedefinition.html",
            "Attributes: ",
            "  LatestVersionArn",
            "  Id",
            "  Arn",
            "  Name"
        ],
        "prefix": "greengrass-devicedefinition",
        "scope": "source.cloudformation"
    },
    "AWS::Greengrass::DeviceDefinitionVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Greengrass::DeviceDefinitionVersion",
            "  Properties:",
            "    DeviceDefinitionId: ${2:String} #required",
            "    Devices: #required",
            "      - ${3:Device}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-devicedefinitionversion.html"
        ],
        "prefix": "greengrass-devicedefinitionversion",
        "scope": "source.cloudformation"
    },
    "AWS::Greengrass::FunctionDefinition": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Greengrass::FunctionDefinition",
            "  Properties:",
            "    InitialVersion:",
            "      ${2:FunctionDefinitionVersion}",
            "    Name: ${3:String} #required",
            "    Tags: ${4:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-functiondefinition.html",
            "Attributes: ",
            "  LatestVersionArn",
            "  Id",
            "  Arn",
            "  Name"
        ],
        "prefix": "greengrass-functiondefinition",
        "scope": "source.cloudformation"
    },
    "AWS::Greengrass::FunctionDefinitionVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Greengrass::FunctionDefinitionVersion",
            "  Properties:",
            "    DefaultConfig:",
            "      ${2:DefaultConfig}",
            "    FunctionDefinitionId: ${3:String} #required",
            "    Functions: #required",
            "      - ${4:Function}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-functiondefinitionversion.html"
        ],
        "prefix": "greengrass-functiondefinitionversion",
        "scope": "source.cloudformation"
    },
    "AWS::Greengrass::Group": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Greengrass::Group",
            "  Properties:",
            "    InitialVersion:",
            "      ${2:GroupVersion}",
            "    Name: ${3:String} #required",
            "    RoleArn: ${4:String}",
            "    Tags: ${5:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-group.html",
            "Attributes: ",
            "  RoleAttachedAt",
            "  LatestVersionArn",
            "  Id",
            "  Arn",
            "  RoleArn",
            "  Name"
        ],
        "prefix": "greengrass-group",
        "scope": "source.cloudformation"
    },
    "AWS::Greengrass::GroupVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Greengrass::GroupVersion",
            "  Properties:",
            "    ConnectorDefinitionVersionArn: ${2:String}",
            "    CoreDefinitionVersionArn: ${3:String}",
            "    DeviceDefinitionVersionArn: ${4:String}",
            "    FunctionDefinitionVersionArn: ${5:String}",
            "    GroupId: ${6:String} #required",
            "    LoggerDefinitionVersionArn: ${7:String}",
            "    ResourceDefinitionVersionArn: ${8:String}",
            "    SubscriptionDefinitionVersionArn: ${9:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-groupversion.html"
        ],
        "prefix": "greengrass-groupversion",
        "scope": "source.cloudformation"
    },
    "AWS::Greengrass::LoggerDefinition": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Greengrass::LoggerDefinition",
            "  Properties:",
            "    InitialVersion:",
            "      ${2:LoggerDefinitionVersion}",
            "    Name: ${3:String} #required",
            "    Tags: ${4:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-loggerdefinition.html",
            "Attributes: ",
            "  LatestVersionArn",
            "  Id",
            "  Arn",
            "  Name"
        ],
        "prefix": "greengrass-loggerdefinition",
        "scope": "source.cloudformation"
    },
    "AWS::Greengrass::LoggerDefinitionVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Greengrass::LoggerDefinitionVersion",
            "  Properties:",
            "    LoggerDefinitionId: ${2:String} #required",
            "    Loggers: #required",
            "      - ${3:Logger}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-loggerdefinitionversion.html"
        ],
        "prefix": "greengrass-loggerdefinitionversion",
        "scope": "source.cloudformation"
    },
    "AWS::Greengrass::ResourceDefinition": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Greengrass::ResourceDefinition",
            "  Properties:",
            "    InitialVersion:",
            "      ${2:ResourceDefinitionVersion}",
            "    Name: ${3:String} #required",
            "    Tags: ${4:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-resourcedefinition.html",
            "Attributes: ",
            "  LatestVersionArn",
            "  Id",
            "  Arn",
            "  Name"
        ],
        "prefix": "greengrass-resourcedefinition",
        "scope": "source.cloudformation"
    },
    "AWS::Greengrass::ResourceDefinitionVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Greengrass::ResourceDefinitionVersion",
            "  Properties:",
            "    ResourceDefinitionId: ${2:String} #required",
            "    Resources: #required",
            "      - ${3:ResourceInstance}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-resourcedefinitionversion.html"
        ],
        "prefix": "greengrass-resourcedefinitionversion",
        "scope": "source.cloudformation"
    },
    "AWS::Greengrass::SubscriptionDefinition": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Greengrass::SubscriptionDefinition",
            "  Properties:",
            "    InitialVersion:",
            "      ${2:SubscriptionDefinitionVersion}",
            "    Name: ${3:String} #required",
            "    Tags: ${4:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-subscriptiondefinition.html",
            "Attributes: ",
            "  LatestVersionArn",
            "  Id",
            "  Arn",
            "  Name"
        ],
        "prefix": "greengrass-subscriptiondefinition",
        "scope": "source.cloudformation"
    },
    "AWS::Greengrass::SubscriptionDefinitionVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Greengrass::SubscriptionDefinitionVersion",
            "  Properties:",
            "    SubscriptionDefinitionId: ${2:String} #required",
            "    Subscriptions: #required",
            "      - ${3:Subscription}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrass-subscriptiondefinitionversion.html"
        ],
        "prefix": "greengrass-subscriptiondefinitionversion",
        "scope": "source.cloudformation"
    },
    "AWS::GreengrassV2::ComponentVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GreengrassV2::ComponentVersion",
            "  Properties:",
            "    InlineRecipe: ${2:String}",
            "    LambdaFunction:",
            "      ${3:LambdaFunctionRecipeSource}",
            "    Tags:",
            "      ${4:Map}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-greengrassv2-componentversion.html",
            "Attributes: ",
            "  Arn",
            "  ComponentName",
            "  ComponentVersion"
        ],
        "prefix": "greengrassv2-componentversion",
        "scope": "source.cloudformation"
    },
    "AWS::GuardDuty::Detector": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GuardDuty::Detector",
            "  Properties:",
            "    DataSources:",
            "      ${2:CFNDataSourceConfigurations}",
            "    Enable: ${3:Boolean} #required",
            "    FindingPublishingFrequency: ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-detector.html"
        ],
        "prefix": "guardduty-detector",
        "scope": "source.cloudformation"
    },
    "AWS::GuardDuty::Filter": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GuardDuty::Filter",
            "  Properties:",
            "    Action: ${2:String} #required",
            "    Description: ${3:String} #required",
            "    DetectorId: ${4:String} #required",
            "    FindingCriteria: #required",
            "      ${5:FindingCriteria}",
            "    Name: ${6:String} #required",
            "    Rank: ${7:Integer} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-filter.html"
        ],
        "prefix": "guardduty-filter",
        "scope": "source.cloudformation"
    },
    "AWS::GuardDuty::IPSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GuardDuty::IPSet",
            "  Properties:",
            "    Activate: ${2:Boolean} #required",
            "    DetectorId: ${3:String} #required",
            "    Format: ${4:String} #required",
            "    Location: ${5:String} #required",
            "    Name: ${6:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-ipset.html"
        ],
        "prefix": "guardduty-ipset",
        "scope": "source.cloudformation"
    },
    "AWS::GuardDuty::Master": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GuardDuty::Master",
            "  Properties:",
            "    DetectorId: ${2:String} #required",
            "    InvitationId: ${3:String}",
            "    MasterId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-master.html"
        ],
        "prefix": "guardduty-master",
        "scope": "source.cloudformation"
    },
    "AWS::GuardDuty::Member": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GuardDuty::Member",
            "  Properties:",
            "    DetectorId: ${2:String} #required",
            "    DisableEmailNotification: ${3:Boolean}",
            "    Email: ${4:String} #required",
            "    MemberId: ${5:String} #required",
            "    Message: ${6:String}",
            "    Status: ${7:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-member.html"
        ],
        "prefix": "guardduty-member",
        "scope": "source.cloudformation"
    },
    "AWS::GuardDuty::ThreatIntelSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::GuardDuty::ThreatIntelSet",
            "  Properties:",
            "    Activate: ${2:Boolean} #required",
            "    DetectorId: ${3:String} #required",
            "    Format: ${4:String} #required",
            "    Location: ${5:String} #required",
            "    Name: ${6:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-guardduty-threatintelset.html"
        ],
        "prefix": "guardduty-threatintelset",
        "scope": "source.cloudformation"
    },
    "AWS::IAM::AccessKey": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IAM::AccessKey",
            "  Properties:",
            "    Serial: ${2:Integer}",
            "    Status: ${3:String}",
            "    UserName: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-accesskey.html",
            "Attributes: ",
            "  SecretAccessKey"
        ],
        "prefix": "iam-accesskey",
        "scope": "source.cloudformation"
    },
    "AWS::IAM::Group": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IAM::Group",
            "  Properties:",
            "    GroupName: ${2:String}",
            "    ManagedPolicyArns:",
            "      - ${3:String}",
            "    Path: ${4:String}",
            "    Policies:",
            "      - ${5:Policy}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "iam-group",
        "scope": "source.cloudformation"
    },
    "AWS::IAM::InstanceProfile": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IAM::InstanceProfile",
            "  Properties:",
            "    InstanceProfileName: ${2:String}",
            "    Path: ${3:String}",
            "    Roles: #required",
            "      - ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "iam-instanceprofile",
        "scope": "source.cloudformation"
    },
    "AWS::IAM::ManagedPolicy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IAM::ManagedPolicy",
            "  Properties:",
            "    Description: ${2:String}",
            "    Groups:",
            "      - ${3:String}",
            "    ManagedPolicyName: ${4:String}",
            "    Path: ${5:String}",
            "    PolicyDocument: ${6:Json} #required",
            "    Roles:",
            "      - ${7:String}",
            "    Users:",
            "      - ${8:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html"
        ],
        "prefix": "iam-managedpolicy",
        "scope": "source.cloudformation"
    },
    "AWS::IAM::Policy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IAM::Policy",
            "  Properties:",
            "    Groups:",
            "      - ${2:String}",
            "    PolicyDocument: ${3:Json} #required",
            "    PolicyName: ${4:String} #required",
            "    Roles:",
            "      - ${5:String}",
            "    Users:",
            "      - ${6:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html"
        ],
        "prefix": "iam-policy",
        "scope": "source.cloudformation"
    },
    "AWS::IAM::Role": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IAM::Role",
            "  Properties:",
            "    AssumeRolePolicyDocument: ${2:Json} #required",
            "    Description: ${3:String}",
            "    ManagedPolicyArns:",
            "      - ${4:String}",
            "    MaxSessionDuration: ${5:Integer}",
            "    Path: ${6:String}",
            "    PermissionsBoundary: ${7:String}",
            "    Policies:",
            "      - ${8:Policy}",
            "    RoleName: ${9:String}",
            "    Tags:",
            "      - ${10:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html",
            "Attributes: ",
            "  Arn",
            "  RoleId"
        ],
        "prefix": "iam-role",
        "scope": "source.cloudformation"
    },
    "AWS::IAM::ServiceLinkedRole": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IAM::ServiceLinkedRole",
            "  Properties:",
            "    AWSServiceName: ${2:String} #required",
            "    CustomSuffix: ${3:String}",
            "    Description: ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-servicelinkedrole.html"
        ],
        "prefix": "iam-servicelinkedrole",
        "scope": "source.cloudformation"
    },
    "AWS::IAM::User": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IAM::User",
            "  Properties:",
            "    Groups:",
            "      - ${2:String}",
            "    LoginProfile:",
            "      ${3:LoginProfile}",
            "    ManagedPolicyArns:",
            "      - ${4:String}",
            "    Path: ${5:String}",
            "    PermissionsBoundary: ${6:String}",
            "    Policies:",
            "      - ${7:Policy}",
            "    Tags:",
            "      - ${8:Tag}",
            "    UserName: ${9:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "iam-user",
        "scope": "source.cloudformation"
    },
    "AWS::IAM::UserToGroupAddition": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IAM::UserToGroupAddition",
            "  Properties:",
            "    GroupName: ${2:String} #required",
            "    Users: #required",
            "      - ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-addusertogroup.html"
        ],
        "prefix": "iam-usertogroupaddition",
        "scope": "source.cloudformation"
    },
    "AWS::IVS::Channel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IVS::Channel",
            "  Properties:",
            "    Authorized: ${2:Boolean}",
            "    LatencyMode: ${3:String}",
            "    Name: ${4:String}",
            "    Tags:",
            "      - ${5:Tag}",
            "    Type: ${6:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ivs-channel.html",
            "Attributes: ",
            "  Arn",
            "  PlaybackUrl",
            "  IngestEndpoint"
        ],
        "prefix": "ivs-channel",
        "scope": "source.cloudformation"
    },
    "AWS::IVS::PlaybackKeyPair": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IVS::PlaybackKeyPair",
            "  Properties:",
            "    Name: ${2:String}",
            "    PublicKeyMaterial: ${3:String} #required",
            "    Tags:",
            "      - ${4:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ivs-playbackkeypair.html",
            "Attributes: ",
            "  Fingerprint",
            "  Arn"
        ],
        "prefix": "ivs-playbackkeypair",
        "scope": "source.cloudformation"
    },
    "AWS::IVS::StreamKey": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IVS::StreamKey",
            "  Properties:",
            "    ChannelArn: ${2:String} #required",
            "    Tags:",
            "      - ${3:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ivs-streamkey.html",
            "Attributes: ",
            "  Arn",
            "  Value"
        ],
        "prefix": "ivs-streamkey",
        "scope": "source.cloudformation"
    },
    "AWS::ImageBuilder::Component": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ImageBuilder::Component",
            "  Properties:",
            "    ChangeDescription: ${2:String}",
            "    Data: ${3:String}",
            "    Description: ${4:String}",
            "    KmsKeyId: ${5:String}",
            "    Name: ${6:String} #required",
            "    Platform: ${7:String} #required",
            "    SupportedOsVersions:",
            "      - ${8:String}",
            "    Tags:",
            "      ${9:Map}",
            "    Uri: ${10:String}",
            "    Version: ${11:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-imagebuilder-component.html",
            "Attributes: ",
            "  Arn",
            "  Type",
            "  Encrypted"
        ],
        "prefix": "imagebuilder-component",
        "scope": "source.cloudformation"
    },
    "AWS::ImageBuilder::DistributionConfiguration": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ImageBuilder::DistributionConfiguration",
            "  Properties:",
            "    Description: ${2:String}",
            "    Distributions: #required",
            "      - ${3:Distribution}",
            "    Name: ${4:String} #required",
            "    Tags:",
            "      ${5:Map}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-imagebuilder-distributionconfiguration.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "imagebuilder-distributionconfiguration",
        "scope": "source.cloudformation"
    },
    "AWS::ImageBuilder::Image": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ImageBuilder::Image",
            "  Properties:",
            "    DistributionConfigurationArn: ${2:String}",
            "    EnhancedImageMetadataEnabled: ${3:Boolean}",
            "    ImageRecipeArn: ${4:String} #required",
            "    ImageTestsConfiguration:",
            "      ${5:ImageTestsConfiguration}",
            "    InfrastructureConfigurationArn: ${6:String} #required",
            "    Tags:",
            "      ${7:Map}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-imagebuilder-image.html",
            "Attributes: ",
            "  Arn",
            "  Name",
            "  ImageId"
        ],
        "prefix": "imagebuilder-image",
        "scope": "source.cloudformation"
    },
    "AWS::ImageBuilder::ImagePipeline": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ImageBuilder::ImagePipeline",
            "  Properties:",
            "    Description: ${2:String}",
            "    DistributionConfigurationArn: ${3:String}",
            "    EnhancedImageMetadataEnabled: ${4:Boolean}",
            "    ImageRecipeArn: ${5:String} #required",
            "    ImageTestsConfiguration:",
            "      ${6:ImageTestsConfiguration}",
            "    InfrastructureConfigurationArn: ${7:String} #required",
            "    Name: ${8:String} #required",
            "    Schedule:",
            "      ${9:Schedule}",
            "    Status: ${10:String}",
            "    Tags:",
            "      ${11:Map}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-imagebuilder-imagepipeline.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "imagebuilder-imagepipeline",
        "scope": "source.cloudformation"
    },
    "AWS::ImageBuilder::ImageRecipe": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ImageBuilder::ImageRecipe",
            "  Properties:",
            "    BlockDeviceMappings:",
            "      - ${2:InstanceBlockDeviceMapping}",
            "    Components: #required",
            "      - ${3:ComponentConfiguration}",
            "    Description: ${4:String}",
            "    Name: ${5:String} #required",
            "    ParentImage: ${6:String} #required",
            "    Tags:",
            "      ${7:Map}",
            "    Version: ${8:String} #required",
            "    WorkingDirectory: ${9:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-imagebuilder-imagerecipe.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "imagebuilder-imagerecipe",
        "scope": "source.cloudformation"
    },
    "AWS::ImageBuilder::InfrastructureConfiguration": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ImageBuilder::InfrastructureConfiguration",
            "  Properties:",
            "    Description: ${2:String}",
            "    InstanceProfileName: ${3:String} #required",
            "    InstanceTypes:",
            "      - ${4:String}",
            "    KeyPair: ${5:String}",
            "    Logging:",
            "      ${6:Logging}",
            "    Name: ${7:String} #required",
            "    ResourceTags:",
            "      ${8:Map}",
            "    SecurityGroupIds:",
            "      - ${9:String}",
            "    SnsTopicArn: ${10:String}",
            "    SubnetId: ${11:String}",
            "    Tags:",
            "      ${12:Map}",
            "    TerminateInstanceOnFailure: ${13:Boolean}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-imagebuilder-infrastructureconfiguration.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "imagebuilder-infrastructureconfiguration",
        "scope": "source.cloudformation"
    },
    "AWS::Inspector::AssessmentTarget": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Inspector::AssessmentTarget",
            "  Properties:",
            "    AssessmentTargetName: ${2:String}",
            "    ResourceGroupArn: ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-inspector-assessmenttarget.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "inspector-assessmenttarget",
        "scope": "source.cloudformation"
    },
    "AWS::Inspector::AssessmentTemplate": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Inspector::AssessmentTemplate",
            "  Properties:",
            "    AssessmentTargetArn: ${2:String} #required",
            "    AssessmentTemplateName: ${3:String}",
            "    DurationInSeconds: ${4:Integer} #required",
            "    RulesPackageArns: #required",
            "      - ${5:String}",
            "    UserAttributesForFindings:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-inspector-assessmenttemplate.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "inspector-assessmenttemplate",
        "scope": "source.cloudformation"
    },
    "AWS::Inspector::ResourceGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Inspector::ResourceGroup",
            "  Properties:",
            "    ResourceGroupTags: #required",
            "      - ${2:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-inspector-resourcegroup.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "inspector-resourcegroup",
        "scope": "source.cloudformation"
    },
    "AWS::IoT1Click::Device": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoT1Click::Device",
            "  Properties:",
            "    DeviceId: ${2:String} #required",
            "    Enabled: ${3:Boolean} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot1click-device.html",
            "Attributes: ",
            "  DeviceId",
            "  Enabled",
            "  Arn"
        ],
        "prefix": "iot1click-device",
        "scope": "source.cloudformation"
    },
    "AWS::IoT1Click::Placement": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoT1Click::Placement",
            "  Properties:",
            "    AssociatedDevices: ${2:Json}",
            "    Attributes: ${3:Json}",
            "    PlacementName: ${4:String}",
            "    ProjectName: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot1click-placement.html",
            "Attributes: ",
            "  PlacementName",
            "  ProjectName"
        ],
        "prefix": "iot1click-placement",
        "scope": "source.cloudformation"
    },
    "AWS::IoT1Click::Project": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoT1Click::Project",
            "  Properties:",
            "    Description: ${2:String}",
            "    PlacementTemplate: #required",
            "      ${3:PlacementTemplate}",
            "    ProjectName: ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot1click-project.html",
            "Attributes: ",
            "  ProjectName",
            "  Arn"
        ],
        "prefix": "iot1click-project",
        "scope": "source.cloudformation"
    },
    "AWS::IoT::Authorizer": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoT::Authorizer",
            "  Properties:",
            "    AuthorizerFunctionArn: ${2:String} #required",
            "    AuthorizerName: ${3:String}",
            "    SigningDisabled: ${4:Boolean}",
            "    Status: ${5:String}",
            "    Tags:",
            "      ${6:Tags}",
            "    TokenKeyName: ${7:String}",
            "    TokenSigningPublicKeys:",
            "      ${8:TokenSigningPublicKeys}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-authorizer.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "iot-authorizer",
        "scope": "source.cloudformation"
    },
    "AWS::IoT::Certificate": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoT::Certificate",
            "  Properties:",
            "    CACertificatePem: ${2:String}",
            "    CertificateMode: ${3:String}",
            "    CertificatePem: ${4:String}",
            "    CertificateSigningRequest: ${5:String}",
            "    Status: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-certificate.html",
            "Attributes: ",
            "  Id",
            "  Arn"
        ],
        "prefix": "iot-certificate",
        "scope": "source.cloudformation"
    },
    "AWS::IoT::DomainConfiguration": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoT::DomainConfiguration",
            "  Properties:",
            "    AuthorizerConfig:",
            "      ${2:AuthorizerConfig}",
            "    DomainConfigurationName: ${3:String}",
            "    DomainConfigurationStatus: ${4:String}",
            "    DomainName: ${5:String}",
            "    ServerCertificateArns:",
            "      - ${6:String}",
            "    ServiceType: ${7:String}",
            "    Tags:",
            "      ${8:Tags}",
            "    ValidationCertificateArn: ${9:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-domainconfiguration.html",
            "Attributes: ",
            "  Arn",
            "  DomainType",
            "  ServerCertificates"
        ],
        "prefix": "iot-domainconfiguration",
        "scope": "source.cloudformation"
    },
    "AWS::IoT::Policy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoT::Policy",
            "  Properties:",
            "    PolicyDocument: ${2:Json} #required",
            "    PolicyName: ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-policy.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "iot-policy",
        "scope": "source.cloudformation"
    },
    "AWS::IoT::PolicyPrincipalAttachment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoT::PolicyPrincipalAttachment",
            "  Properties:",
            "    PolicyName: ${2:String} #required",
            "    Principal: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-policyprincipalattachment.html"
        ],
        "prefix": "iot-policyprincipalattachment",
        "scope": "source.cloudformation"
    },
    "AWS::IoT::ProvisioningTemplate": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoT::ProvisioningTemplate",
            "  Properties:",
            "    Description: ${2:String}",
            "    Enabled: ${3:Boolean}",
            "    PreProvisioningHook:",
            "      ${4:ProvisioningHook}",
            "    ProvisioningRoleArn: ${5:String} #required",
            "    Tags:",
            "      ${6:Tags}",
            "    TemplateBody: ${7:String} #required",
            "    TemplateName: ${8:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-provisioningtemplate.html",
            "Attributes: ",
            "  TemplateArn"
        ],
        "prefix": "iot-provisioningtemplate",
        "scope": "source.cloudformation"
    },
    "AWS::IoT::Thing": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoT::Thing",
            "  Properties:",
            "    AttributePayload:",
            "      ${2:AttributePayload}",
            "    ThingName: ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-thing.html"
        ],
        "prefix": "iot-thing",
        "scope": "source.cloudformation"
    },
    "AWS::IoT::ThingPrincipalAttachment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoT::ThingPrincipalAttachment",
            "  Properties:",
            "    Principal: ${2:String} #required",
            "    ThingName: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-thingprincipalattachment.html"
        ],
        "prefix": "iot-thingprincipalattachment",
        "scope": "source.cloudformation"
    },
    "AWS::IoT::TopicRule": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoT::TopicRule",
            "  Properties:",
            "    RuleName: ${2:String}",
            "    TopicRulePayload: #required",
            "      ${3:TopicRulePayload}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-topicrule.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "iot-topicrule",
        "scope": "source.cloudformation"
    },
    "AWS::IoT::TopicRuleDestination": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoT::TopicRuleDestination",
            "  Properties:",
            "    HttpUrlProperties:",
            "      ${2:HttpUrlDestinationSummary}",
            "    Status: ${3:String}",
            "    VpcProperties:",
            "      ${4:VpcDestinationProperties}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iot-topicruledestination.html",
            "Attributes: ",
            "  Arn",
            "  StatusReason"
        ],
        "prefix": "iot-topicruledestination",
        "scope": "source.cloudformation"
    },
    "AWS::IoTAnalytics::Channel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTAnalytics::Channel",
            "  Properties:",
            "    ChannelName: ${2:String}",
            "    ChannelStorage:",
            "      ${3:ChannelStorage}",
            "    RetentionPeriod:",
            "      ${4:RetentionPeriod}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotanalytics-channel.html"
        ],
        "prefix": "iotanalytics-channel",
        "scope": "source.cloudformation"
    },
    "AWS::IoTAnalytics::Dataset": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTAnalytics::Dataset",
            "  Properties:",
            "    Actions: #required",
            "      - ${2:Action}",
            "    ContentDeliveryRules:",
            "      - ${3:DatasetContentDeliveryRule}",
            "    DatasetName: ${4:String}",
            "    RetentionPeriod:",
            "      ${5:RetentionPeriod}",
            "    Tags:",
            "      - ${6:Tag}",
            "    Triggers:",
            "      - ${7:Trigger}",
            "    VersioningConfiguration:",
            "      ${8:VersioningConfiguration}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotanalytics-dataset.html"
        ],
        "prefix": "iotanalytics-dataset",
        "scope": "source.cloudformation"
    },
    "AWS::IoTAnalytics::Datastore": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTAnalytics::Datastore",
            "  Properties:",
            "    DatastoreName: ${2:String}",
            "    DatastoreStorage:",
            "      ${3:DatastoreStorage}",
            "    RetentionPeriod:",
            "      ${4:RetentionPeriod}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotanalytics-datastore.html"
        ],
        "prefix": "iotanalytics-datastore",
        "scope": "source.cloudformation"
    },
    "AWS::IoTAnalytics::Pipeline": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTAnalytics::Pipeline",
            "  Properties:",
            "    PipelineActivities: #required",
            "      - ${2:Activity}",
            "    PipelineName: ${3:String}",
            "    Tags:",
            "      - ${4:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotanalytics-pipeline.html"
        ],
        "prefix": "iotanalytics-pipeline",
        "scope": "source.cloudformation"
    },
    "AWS::IoTEvents::DetectorModel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTEvents::DetectorModel",
            "  Properties:",
            "    DetectorModelDefinition:",
            "      ${2:DetectorModelDefinition}",
            "    DetectorModelDescription: ${3:String}",
            "    DetectorModelName: ${4:String}",
            "    EvaluationMethod: ${5:String}",
            "    Key: ${6:String}",
            "    RoleArn: ${7:String}",
            "    Tags:",
            "      - ${8:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotevents-detectormodel.html"
        ],
        "prefix": "iotevents-detectormodel",
        "scope": "source.cloudformation"
    },
    "AWS::IoTEvents::Input": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTEvents::Input",
            "  Properties:",
            "    InputDefinition:",
            "      ${2:InputDefinition}",
            "    InputDescription: ${3:String}",
            "    InputName: ${4:String}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotevents-input.html"
        ],
        "prefix": "iotevents-input",
        "scope": "source.cloudformation"
    },
    "AWS::IoTSiteWise::AccessPolicy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTSiteWise::AccessPolicy",
            "  Properties:",
            "    AccessPolicyIdentity: #required",
            "      ${2:AccessPolicyIdentity}",
            "    AccessPolicyPermission: ${3:String} #required",
            "    AccessPolicyResource: #required",
            "      ${4:AccessPolicyResource}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotsitewise-accesspolicy.html",
            "Attributes: ",
            "  AccessPolicyId",
            "  AccessPolicyArn"
        ],
        "prefix": "iotsitewise-accesspolicy",
        "scope": "source.cloudformation"
    },
    "AWS::IoTSiteWise::Asset": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTSiteWise::Asset",
            "  Properties:",
            "    AssetHierarchies:",
            "      - ${2:AssetHierarchy}",
            "    AssetModelId: ${3:String} #required",
            "    AssetName: ${4:String} #required",
            "    AssetProperties:",
            "      - ${5:AssetProperty}",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotsitewise-asset.html",
            "Attributes: ",
            "  AssetId",
            "  AssetArn"
        ],
        "prefix": "iotsitewise-asset",
        "scope": "source.cloudformation"
    },
    "AWS::IoTSiteWise::AssetModel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTSiteWise::AssetModel",
            "  Properties:",
            "    AssetModelDescription: ${2:String}",
            "    AssetModelHierarchies:",
            "      - ${3:AssetModelHierarchy}",
            "    AssetModelName: ${4:String} #required",
            "    AssetModelProperties:",
            "      - ${5:AssetModelProperty}",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotsitewise-assetmodel.html",
            "Attributes: ",
            "  AssetModelId",
            "  AssetModelArn"
        ],
        "prefix": "iotsitewise-assetmodel",
        "scope": "source.cloudformation"
    },
    "AWS::IoTSiteWise::Dashboard": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTSiteWise::Dashboard",
            "  Properties:",
            "    DashboardDefinition: ${2:String} #required",
            "    DashboardDescription: ${3:String} #required",
            "    DashboardName: ${4:String} #required",
            "    ProjectId: ${5:String}",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotsitewise-dashboard.html",
            "Attributes: ",
            "  DashboardId",
            "  DashboardArn"
        ],
        "prefix": "iotsitewise-dashboard",
        "scope": "source.cloudformation"
    },
    "AWS::IoTSiteWise::Gateway": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTSiteWise::Gateway",
            "  Properties:",
            "    GatewayCapabilitySummaries:",
            "      - ${2:GatewayCapabilitySummary}",
            "    GatewayName: ${3:String} #required",
            "    GatewayPlatform: #required",
            "      ${4:GatewayPlatform}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotsitewise-gateway.html",
            "Attributes: ",
            "  GatewayId"
        ],
        "prefix": "iotsitewise-gateway",
        "scope": "source.cloudformation"
    },
    "AWS::IoTSiteWise::Portal": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTSiteWise::Portal",
            "  Properties:",
            "    PortalContactEmail: ${2:String} #required",
            "    PortalDescription: ${3:String}",
            "    PortalName: ${4:String} #required",
            "    RoleArn: ${5:String} #required",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotsitewise-portal.html",
            "Attributes: ",
            "  PortalArn",
            "  PortalClientId",
            "  PortalId",
            "  PortalStartUrl",
            "  PortalStatus"
        ],
        "prefix": "iotsitewise-portal",
        "scope": "source.cloudformation"
    },
    "AWS::IoTSiteWise::Project": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTSiteWise::Project",
            "  Properties:",
            "    PortalId: ${2:String} #required",
            "    ProjectDescription: ${3:String}",
            "    ProjectName: ${4:String} #required",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotsitewise-project.html",
            "Attributes: ",
            "  ProjectId",
            "  ProjectArn"
        ],
        "prefix": "iotsitewise-project",
        "scope": "source.cloudformation"
    },
    "AWS::IoTThingsGraph::FlowTemplate": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTThingsGraph::FlowTemplate",
            "  Properties:",
            "    CompatibleNamespaceVersion: ${2:Double}",
            "    Definition: #required",
            "      ${3:DefinitionDocument}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotthingsgraph-flowtemplate.html"
        ],
        "prefix": "iotthingsgraph-flowtemplate",
        "scope": "source.cloudformation"
    },
    "AWS::IoTWireless::Destination": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTWireless::Destination",
            "  Properties:",
            "    Description: ${2:String}",
            "    Expression: ${3:String} #required",
            "    ExpressionType: ${4:String} #required",
            "    Name: ${5:String} #required",
            "    NextToken: ${6:String}",
            "    RoleArn: ${7:String} #required",
            "    Tags:",
            "      - ${8:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotwireless-destination.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "iotwireless-destination",
        "scope": "source.cloudformation"
    },
    "AWS::IoTWireless::DeviceProfile": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTWireless::DeviceProfile",
            "  Properties:",
            "    LoRaWANDeviceProfile:",
            "      ${2:LoRaWANDeviceProfile}",
            "    Name: ${3:String}",
            "    NextToken: ${4:String}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotwireless-deviceprofile.html",
            "Attributes: ",
            "  Arn",
            "  Id"
        ],
        "prefix": "iotwireless-deviceprofile",
        "scope": "source.cloudformation"
    },
    "AWS::IoTWireless::ServiceProfile": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTWireless::ServiceProfile",
            "  Properties:",
            "    LoRaWANGetServiceProfileInfo:",
            "      ${2:LoRaWANGetServiceProfileInfo}",
            "    LoRaWANServiceProfile:",
            "      ${3:LoRaWANServiceProfile}",
            "    Name: ${4:String}",
            "    NextToken: ${5:String}",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotwireless-serviceprofile.html",
            "Attributes: ",
            "  Arn",
            "  Id"
        ],
        "prefix": "iotwireless-serviceprofile",
        "scope": "source.cloudformation"
    },
    "AWS::IoTWireless::WirelessDevice": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTWireless::WirelessDevice",
            "  Properties:",
            "    Description: ${2:String}",
            "    DestinationName: ${3:String} #required",
            "    LoRaWANDevice:",
            "      ${4:LoRaWANDevice}",
            "    Name: ${5:String}",
            "    NextToken: ${6:String}",
            "    Tags:",
            "      - ${7:Tag}",
            "    Type: ${8:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotwireless-wirelessdevice.html",
            "Attributes: ",
            "  Arn",
            "  Id",
            "  ThingArn",
            "  ThingName"
        ],
        "prefix": "iotwireless-wirelessdevice",
        "scope": "source.cloudformation"
    },
    "AWS::IoTWireless::WirelessGateway": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::IoTWireless::WirelessGateway",
            "  Properties:",
            "    Description: ${2:String}",
            "    LoRaWANGateway: #required",
            "      ${3:LoRaWANGateway}",
            "    Name: ${4:String}",
            "    NextToken: ${5:String}",
            "    Tags:",
            "      - ${6:Tag}",
            "    ThingName: ${7:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotwireless-wirelessgateway.html",
            "Attributes: ",
            "  Arn",
            "  Id",
            "  ThingArn"
        ],
        "prefix": "iotwireless-wirelessgateway",
        "scope": "source.cloudformation"
    },
    "AWS::KMS::Alias": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::KMS::Alias",
            "  Properties:",
            "    AliasName: ${2:String} #required",
            "    TargetKeyId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kms-alias.html"
        ],
        "prefix": "kms-alias",
        "scope": "source.cloudformation"
    },
    "AWS::KMS::Key": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::KMS::Key",
            "  Properties:",
            "    Description: ${2:String}",
            "    EnableKeyRotation: ${3:Boolean}",
            "    Enabled: ${4:Boolean}",
            "    KeyPolicy: ${5:} #required",
            "    KeySpec: ${6:String}",
            "    KeyUsage: ${7:String}",
            "    PendingWindowInDays: ${8:Integer}",
            "    Tags:",
            "      - ${9:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kms-key.html",
            "Attributes: ",
            "  Arn",
            "  KeyId"
        ],
        "prefix": "kms-key",
        "scope": "source.cloudformation"
    },
    "AWS::Kendra::DataSource": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Kendra::DataSource",
            "  Properties:",
            "    DataSourceConfiguration:",
            "      ${2:DataSourceConfiguration}",
            "    Description: ${3:String}",
            "    IndexId: ${4:String} #required",
            "    Name: ${5:String} #required",
            "    RoleArn: ${6:String}",
            "    Schedule: ${7:String}",
            "    Tags:",
            "      ${8:TagList}",
            "    Type: ${9:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kendra-datasource.html",
            "Attributes: ",
            "  Id",
            "  Arn"
        ],
        "prefix": "kendra-datasource",
        "scope": "source.cloudformation"
    },
    "AWS::Kendra::Faq": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Kendra::Faq",
            "  Properties:",
            "    Description: ${2:String}",
            "    FileFormat: ${3:String}",
            "    IndexId: ${4:String} #required",
            "    Name: ${5:String} #required",
            "    RoleArn: ${6:String} #required",
            "    S3Path: #required",
            "      ${7:S3Path}",
            "    Tags:",
            "      ${8:TagList}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kendra-faq.html",
            "Attributes: ",
            "  Id",
            "  Arn"
        ],
        "prefix": "kendra-faq",
        "scope": "source.cloudformation"
    },
    "AWS::Kendra::Index": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Kendra::Index",
            "  Properties:",
            "    CapacityUnits:",
            "      ${2:CapacityUnitsConfiguration}",
            "    Description: ${3:String}",
            "    DocumentMetadataConfigurations:",
            "      ${4:DocumentMetadataConfigurationList}",
            "    Edition: ${5:String} #required",
            "    Name: ${6:String} #required",
            "    RoleArn: ${7:String} #required",
            "    ServerSideEncryptionConfiguration:",
            "      ${8:ServerSideEncryptionConfiguration}",
            "    Tags:",
            "      ${9:TagList}",
            "    UserContextPolicy: ${10:String}",
            "    UserTokenConfigurations:",
            "      ${11:UserTokenConfigurationList}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kendra-index.html",
            "Attributes: ",
            "  Id",
            "  Arn"
        ],
        "prefix": "kendra-index",
        "scope": "source.cloudformation"
    },
    "AWS::Kinesis::Stream": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Kinesis::Stream",
            "  Properties:",
            "    Name: ${2:String}",
            "    RetentionPeriodHours: ${3:Integer}",
            "    ShardCount: ${4:Integer} #required",
            "    StreamEncryption:",
            "      ${5:StreamEncryption}",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesis-stream.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "kinesis-stream",
        "scope": "source.cloudformation"
    },
    "AWS::Kinesis::StreamConsumer": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Kinesis::StreamConsumer",
            "  Properties:",
            "    ConsumerName: ${2:String} #required",
            "    StreamARN: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesis-streamconsumer.html",
            "Attributes: ",
            "  ConsumerCreationTimestamp",
            "  ConsumerName",
            "  ConsumerARN",
            "  ConsumerStatus",
            "  StreamARN"
        ],
        "prefix": "kinesis-streamconsumer",
        "scope": "source.cloudformation"
    },
    "AWS::KinesisAnalytics::Application": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::KinesisAnalytics::Application",
            "  Properties:",
            "    ApplicationCode: ${2:String}",
            "    ApplicationDescription: ${3:String}",
            "    ApplicationName: ${4:String}",
            "    Inputs: #required",
            "      - ${5:Input}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalytics-application.html"
        ],
        "prefix": "kinesisanalytics-application",
        "scope": "source.cloudformation"
    },
    "AWS::KinesisAnalytics::ApplicationOutput": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::KinesisAnalytics::ApplicationOutput",
            "  Properties:",
            "    ApplicationName: ${2:String} #required",
            "    Output: #required",
            "      ${3:Output}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalytics-applicationoutput.html"
        ],
        "prefix": "kinesisanalytics-applicationoutput",
        "scope": "source.cloudformation"
    },
    "AWS::KinesisAnalytics::ApplicationReferenceDataSource": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::KinesisAnalytics::ApplicationReferenceDataSource",
            "  Properties:",
            "    ApplicationName: ${2:String} #required",
            "    ReferenceDataSource: #required",
            "      ${3:ReferenceDataSource}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalytics-applicationreferencedatasource.html"
        ],
        "prefix": "kinesisanalytics-applicationreferencedatasource",
        "scope": "source.cloudformation"
    },
    "AWS::KinesisAnalyticsV2::Application": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::KinesisAnalyticsV2::Application",
            "  Properties:",
            "    ApplicationConfiguration:",
            "      ${2:ApplicationConfiguration}",
            "    ApplicationDescription: ${3:String}",
            "    ApplicationName: ${4:String}",
            "    RuntimeEnvironment: ${5:String} #required",
            "    ServiceExecutionRole: ${6:String} #required",
            "    Tags:",
            "      - ${7:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalyticsv2-application.html"
        ],
        "prefix": "kinesisanalyticsv2-application",
        "scope": "source.cloudformation"
    },
    "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption",
            "  Properties:",
            "    ApplicationName: ${2:String} #required",
            "    CloudWatchLoggingOption: #required",
            "      ${3:CloudWatchLoggingOption}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalyticsv2-applicationcloudwatchloggingoption.html"
        ],
        "prefix": "kinesisanalyticsv2-applicationcloudwatchloggingoption",
        "scope": "source.cloudformation"
    },
    "AWS::KinesisAnalyticsV2::ApplicationOutput": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationOutput",
            "  Properties:",
            "    ApplicationName: ${2:String} #required",
            "    Output: #required",
            "      ${3:Output}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalyticsv2-applicationoutput.html"
        ],
        "prefix": "kinesisanalyticsv2-applicationoutput",
        "scope": "source.cloudformation"
    },
    "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource",
            "  Properties:",
            "    ApplicationName: ${2:String} #required",
            "    ReferenceDataSource: #required",
            "      ${3:ReferenceDataSource}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisanalyticsv2-applicationreferencedatasource.html"
        ],
        "prefix": "kinesisanalyticsv2-applicationreferencedatasource",
        "scope": "source.cloudformation"
    },
    "AWS::KinesisFirehose::DeliveryStream": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::KinesisFirehose::DeliveryStream",
            "  Properties:",
            "    DeliveryStreamEncryptionConfigurationInput:",
            "      ${2:DeliveryStreamEncryptionConfigurationInput}",
            "    DeliveryStreamName: ${3:String}",
            "    DeliveryStreamType: ${4:String}",
            "    ElasticsearchDestinationConfiguration:",
            "      ${5:ElasticsearchDestinationConfiguration}",
            "    ExtendedS3DestinationConfiguration:",
            "      ${6:ExtendedS3DestinationConfiguration}",
            "    HttpEndpointDestinationConfiguration:",
            "      ${7:HttpEndpointDestinationConfiguration}",
            "    KinesisStreamSourceConfiguration:",
            "      ${8:KinesisStreamSourceConfiguration}",
            "    RedshiftDestinationConfiguration:",
            "      ${9:RedshiftDestinationConfiguration}",
            "    S3DestinationConfiguration:",
            "      ${10:S3DestinationConfiguration}",
            "    SplunkDestinationConfiguration:",
            "      ${11:SplunkDestinationConfiguration}",
            "    Tags:",
            "      - ${12:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kinesisfirehose-deliverystream.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "kinesisfirehose-deliverystream",
        "scope": "source.cloudformation"
    },
    "AWS::LakeFormation::DataLakeSettings": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::LakeFormation::DataLakeSettings",
            "  Properties:",
            "    Admins:",
            "      ${2:Admins}",
            "    TrustedResourceOwners:",
            "      - ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-datalakesettings.html"
        ],
        "prefix": "lakeformation-datalakesettings",
        "scope": "source.cloudformation"
    },
    "AWS::LakeFormation::Permissions": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::LakeFormation::Permissions",
            "  Properties:",
            "    DataLakePrincipal: #required",
            "      ${2:DataLakePrincipal}",
            "    Permissions:",
            "      - ${3:String}",
            "    PermissionsWithGrantOption:",
            "      - ${4:String}",
            "    Resource: #required",
            "      ${5:Resource}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-permissions.html"
        ],
        "prefix": "lakeformation-permissions",
        "scope": "source.cloudformation"
    },
    "AWS::LakeFormation::Resource": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::LakeFormation::Resource",
            "  Properties:",
            "    ResourceArn: ${2:String} #required",
            "    RoleArn: ${3:String}",
            "    UseServiceLinkedRole: ${4:Boolean} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lakeformation-resource.html"
        ],
        "prefix": "lakeformation-resource",
        "scope": "source.cloudformation"
    },
    "AWS::Lambda::Alias": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Lambda::Alias",
            "  Properties:",
            "    Description: ${2:String}",
            "    FunctionName: ${3:String} #required",
            "    FunctionVersion: ${4:String} #required",
            "    Name: ${5:String} #required",
            "    ProvisionedConcurrencyConfig:",
            "      ${6:ProvisionedConcurrencyConfiguration}",
            "    RoutingConfig:",
            "      ${7:AliasRoutingConfiguration}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-alias.html"
        ],
        "prefix": "lambda-alias",
        "scope": "source.cloudformation"
    },
    "AWS::Lambda::CodeSigningConfig": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Lambda::CodeSigningConfig",
            "  Properties:",
            "    AllowedPublishers: #required",
            "      ${2:AllowedPublishers}",
            "    CodeSigningPolicies:",
            "      ${3:CodeSigningPolicies}",
            "    Description: ${4:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-codesigningconfig.html",
            "Attributes: ",
            "  CodeSigningConfigId",
            "  CodeSigningConfigArn"
        ],
        "prefix": "lambda-codesigningconfig",
        "scope": "source.cloudformation"
    },
    "AWS::Lambda::EventInvokeConfig": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Lambda::EventInvokeConfig",
            "  Properties:",
            "    DestinationConfig:",
            "      ${2:DestinationConfig}",
            "    FunctionName: ${3:String} #required",
            "    MaximumEventAgeInSeconds: ${4:Integer}",
            "    MaximumRetryAttempts: ${5:Integer}",
            "    Qualifier: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-eventinvokeconfig.html"
        ],
        "prefix": "lambda-eventinvokeconfig",
        "scope": "source.cloudformation"
    },
    "AWS::Lambda::EventSourceMapping": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Lambda::EventSourceMapping",
            "  Properties:",
            "    BatchSize: ${2:Integer}",
            "    BisectBatchOnFunctionError: ${3:Boolean}",
            "    DestinationConfig:",
            "      ${4:DestinationConfig}",
            "    Enabled: ${5:Boolean}",
            "    EventSourceArn: ${6:String}",
            "    FunctionName: ${7:String} #required",
            "    FunctionResponseTypes:",
            "      - ${8:String}",
            "    MaximumBatchingWindowInSeconds: ${9:Integer}",
            "    MaximumRecordAgeInSeconds: ${10:Integer}",
            "    MaximumRetryAttempts: ${11:Integer}",
            "    ParallelizationFactor: ${12:Integer}",
            "    PartialBatchResponse: ${13:Boolean}",
            "    Queues:",
            "      - ${14:String}",
            "    SelfManagedEventSource:",
            "      ${15:SelfManagedEventSource}",
            "    SourceAccessConfigurations:",
            "      - ${16:SourceAccessConfiguration}",
            "    StartingPosition: ${17:String}",
            "    Topics:",
            "      - ${18:String}",
            "    TumblingWindowInSeconds: ${19:Integer}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-eventsourcemapping.html",
            "Attributes: ",
            "  Id"
        ],
        "prefix": "lambda-eventsourcemapping",
        "scope": "source.cloudformation"
    },
    "AWS::Lambda::Function": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Lambda::Function",
            "  Properties:",
            "    Code: #required",
            "      ${2:Code}",
            "    CodeSigningConfigArn: ${3:String}",
            "    DeadLetterConfig:",
            "      ${4:DeadLetterConfig}",
            "    Description: ${5:String}",
            "    Environment:",
            "      ${6:Environment}",
            "    FileSystemConfigs:",
            "      - ${7:FileSystemConfig}",
            "    FunctionName: ${8:String}",
            "    Handler: ${9:String}",
            "    ImageConfig:",
            "      ${10:ImageConfig}",
            "    KmsKeyArn: ${11:String}",
            "    Layers:",
            "      - ${12:String}",
            "    MemorySize: ${13:Integer}",
            "    PackageType: ${14:String}",
            "    ReservedConcurrentExecutions: ${15:Integer}",
            "    Role: ${16:String} #required",
            "    Runtime: ${17:String}",
            "    Tags:",
            "      - ${18:Tag}",
            "    Timeout: ${19:Integer}",
            "    TracingConfig:",
            "      ${20:TracingConfig}",
            "    VpcConfig:",
            "      ${21:VpcConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "lambda-function",
        "scope": "source.cloudformation"
    },
    "AWS::Lambda::LayerVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Lambda::LayerVersion",
            "  Properties:",
            "    CompatibleRuntimes:",
            "      - ${2:String}",
            "    Content: #required",
            "      ${3:Content}",
            "    Description: ${4:String}",
            "    LayerName: ${5:String}",
            "    LicenseInfo: ${6:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-layerversion.html"
        ],
        "prefix": "lambda-layerversion",
        "scope": "source.cloudformation"
    },
    "AWS::Lambda::LayerVersionPermission": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Lambda::LayerVersionPermission",
            "  Properties:",
            "    Action: ${2:String} #required",
            "    LayerVersionArn: ${3:String} #required",
            "    OrganizationId: ${4:String}",
            "    Principal: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-layerversionpermission.html"
        ],
        "prefix": "lambda-layerversionpermission",
        "scope": "source.cloudformation"
    },
    "AWS::Lambda::Permission": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Lambda::Permission",
            "  Properties:",
            "    Action: ${2:String} #required",
            "    EventSourceToken: ${3:String}",
            "    FunctionName: ${4:String} #required",
            "    Principal: ${5:String} #required",
            "    SourceAccount: ${6:String}",
            "    SourceArn: ${7:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html"
        ],
        "prefix": "lambda-permission",
        "scope": "source.cloudformation"
    },
    "AWS::Lambda::Version": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Lambda::Version",
            "  Properties:",
            "    CodeSha256: ${2:String}",
            "    Description: ${3:String}",
            "    FunctionName: ${4:String} #required",
            "    ProvisionedConcurrencyConfig:",
            "      ${5:ProvisionedConcurrencyConfiguration}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-version.html",
            "Attributes: ",
            "  Version"
        ],
        "prefix": "lambda-version",
        "scope": "source.cloudformation"
    },
    "AWS::LicenseManager::Grant": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::LicenseManager::Grant",
            "  Properties:",
            "    AllowedOperations:",
            "      ${2:AllowedOperationList}",
            "    ClientToken: ${3:String}",
            "    Filters:",
            "      ${4:FilterList}",
            "    GrantArns:",
            "      ${5:ArnList}",
            "    GrantName: ${6:String}",
            "    GrantStatus: ${7:String}",
            "    GrantedOperations:",
            "      ${8:AllowedOperationList}",
            "    GranteePrincipalArn: ${9:String}",
            "    HomeRegion: ${10:String}",
            "    LicenseArn: ${11:String}",
            "    MaxResults: ${12:Integer}",
            "    NextToken: ${13:String}",
            "    ParentArn: ${14:String}",
            "    Principals:",
            "      ${15:ArnList}",
            "    SourceVersion: ${16:String}",
            "    Status: ${17:String}",
            "    StatusReason: ${18:String}",
            "    Tags:",
            "      ${19:TagList}",
            "    Version: ${20:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-grant.html",
            "Attributes: ",
            "  GrantArn"
        ],
        "prefix": "licensemanager-grant",
        "scope": "source.cloudformation"
    },
    "AWS::LicenseManager::License": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::LicenseManager::License",
            "  Properties:",
            "    Beneficiary: ${2:String}",
            "    ClientToken: ${3:String}",
            "    ConsumptionConfiguration: #required",
            "      ${4:ConsumptionConfiguration}",
            "    Entitlements: #required",
            "      ${5:EntitlementList}",
            "    Filters:",
            "      ${6:FilterList}",
            "    HomeRegion: ${7:String} #required",
            "    Issuer: #required",
            "      ${8:IssuerData}",
            "    LicenseArns:",
            "      ${9:ArnList}",
            "    LicenseMetadata:",
            "      ${10:MetadataList}",
            "    LicenseName: ${11:String}",
            "    MaxResults: ${12:Integer}",
            "    NextToken: ${13:String}",
            "    ProductName: ${14:String}",
            "    ProductSKU: ${15:String}",
            "    SourceVersion: ${16:String}",
            "    Status: ${17:String}",
            "    Tags:",
            "      ${18:TagList}",
            "    Validity: #required",
            "      ${19:ValidityDateFormat}",
            "    Version: ${20:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-licensemanager-license.html",
            "Attributes: ",
            "  LicenseArn"
        ],
        "prefix": "licensemanager-license",
        "scope": "source.cloudformation"
    },
    "AWS::Logs::Destination": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Logs::Destination",
            "  Properties:",
            "    DestinationName: ${2:String} #required",
            "    DestinationPolicy: ${3:String} #required",
            "    RoleArn: ${4:String} #required",
            "    TargetArn: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-destination.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "logs-destination",
        "scope": "source.cloudformation"
    },
    "AWS::Logs::LogGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Logs::LogGroup",
            "  Properties:",
            "    KmsKeyId: ${2:String}",
            "    LogGroupName: ${3:String}",
            "    RetentionInDays: ${4:Integer}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "logs-loggroup",
        "scope": "source.cloudformation"
    },
    "AWS::Logs::LogStream": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Logs::LogStream",
            "  Properties:",
            "    LogGroupName: ${2:String} #required",
            "    LogStreamName: ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-logstream.html"
        ],
        "prefix": "logs-logstream",
        "scope": "source.cloudformation"
    },
    "AWS::Logs::MetricFilter": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Logs::MetricFilter",
            "  Properties:",
            "    FilterPattern: ${2:String} #required",
            "    LogGroupName: ${3:String} #required",
            "    MetricTransformations: #required",
            "      - ${4:MetricTransformation}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-metricfilter.html"
        ],
        "prefix": "logs-metricfilter",
        "scope": "source.cloudformation"
    },
    "AWS::Logs::SubscriptionFilter": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Logs::SubscriptionFilter",
            "  Properties:",
            "    DestinationArn: ${2:String} #required",
            "    FilterPattern: ${3:String} #required",
            "    LogGroupName: ${4:String} #required",
            "    RoleArn: ${5:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-subscriptionfilter.html"
        ],
        "prefix": "logs-subscriptionfilter",
        "scope": "source.cloudformation"
    },
    "AWS::MSK::Cluster": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::MSK::Cluster",
            "  Properties:",
            "    BrokerNodeGroupInfo: #required",
            "      ${2:BrokerNodeGroupInfo}",
            "    ClientAuthentication:",
            "      ${3:ClientAuthentication}",
            "    ClusterName: ${4:String} #required",
            "    ConfigurationInfo:",
            "      ${5:ConfigurationInfo}",
            "    EncryptionInfo:",
            "      ${6:EncryptionInfo}",
            "    EnhancedMonitoring: ${7:String}",
            "    KafkaVersion: ${8:String} #required",
            "    LoggingInfo:",
            "      ${9:LoggingInfo}",
            "    NumberOfBrokerNodes: ${10:Integer} #required",
            "    OpenMonitoring:",
            "      ${11:OpenMonitoring}",
            "    Tags: ${12:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-msk-cluster.html"
        ],
        "prefix": "msk-cluster",
        "scope": "source.cloudformation"
    },
    "AWS::MWAA::Environment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::MWAA::Environment",
            "  Properties:",
            "    AirflowConfigurationOptions:",
            "      ${2:AirflowConfigurationOptions}",
            "    AirflowVersion: ${3:String}",
            "    DagS3Path: ${4:String}",
            "    EnvironmentClass: ${5:String}",
            "    ExecutionRoleArn: ${6:String}",
            "    KmsKey: ${7:String}",
            "    LoggingConfiguration:",
            "      ${8:LoggingConfiguration}",
            "    MaxWorkers: ${9:Integer}",
            "    NetworkConfiguration:",
            "      ${10:NetworkConfiguration}",
            "    PluginsS3ObjectVersion: ${11:String}",
            "    PluginsS3Path: ${12:String}",
            "    RequirementsS3ObjectVersion: ${13:String}",
            "    RequirementsS3Path: ${14:String}",
            "    SourceBucketArn: ${15:String}",
            "    Tags:",
            "      ${16:TagMap}",
            "    WebserverAccessMode: ${17:String}",
            "    WebserverUrl: ${18:String}",
            "    WeeklyMaintenanceWindowStart: ${19:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mwaa-environment.html",
            "Attributes: ",
            "  Name",
            "  Status",
            "  Arn",
            "  CreatedAt",
            "  ServiceRoleArn",
            "  LastUpdate"
        ],
        "prefix": "mwaa-environment",
        "scope": "source.cloudformation"
    },
    "AWS::Macie::CustomDataIdentifier": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Macie::CustomDataIdentifier",
            "  Properties:",
            "    Description: ${2:String}",
            "    IgnoreWords:",
            "      - ${3:String}",
            "    Keywords:",
            "      - ${4:String}",
            "    MaximumMatchDistance: ${5:Integer}",
            "    Name: ${6:String} #required",
            "    Regex: ${7:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-macie-customdataidentifier.html",
            "Attributes: ",
            "  Id",
            "  Arn",
            "  CreatedAt",
            "  Deleted"
        ],
        "prefix": "macie-customdataidentifier",
        "scope": "source.cloudformation"
    },
    "AWS::Macie::FindingsFilter": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Macie::FindingsFilter",
            "  Properties:",
            "    Action: ${2:String}",
            "    Description: ${3:String}",
            "    FindingCriteria: #required",
            "      ${4:FindingCriteria}",
            "    Name: ${5:String} #required",
            "    Position: ${6:Integer}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-macie-findingsfilter.html",
            "Attributes: ",
            "  Id",
            "  Arn",
            "  FindingsFilterListItems"
        ],
        "prefix": "macie-findingsfilter",
        "scope": "source.cloudformation"
    },
    "AWS::Macie::Session": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Macie::Session",
            "  Properties:",
            "    FindingPublishingFrequency: ${2:String}",
            "    Status: ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-macie-session.html",
            "Attributes: ",
            "  AwsAccountId",
            "  ServiceRole"
        ],
        "prefix": "macie-session",
        "scope": "source.cloudformation"
    },
    "AWS::ManagedBlockchain::Member": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ManagedBlockchain::Member",
            "  Properties:",
            "    InvitationId: ${2:String}",
            "    MemberConfiguration: #required",
            "      ${3:MemberConfiguration}",
            "    NetworkConfiguration:",
            "      ${4:NetworkConfiguration}",
            "    NetworkId: ${5:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-managedblockchain-member.html",
            "Attributes: ",
            "  MemberId",
            "  NetworkId"
        ],
        "prefix": "managedblockchain-member",
        "scope": "source.cloudformation"
    },
    "AWS::ManagedBlockchain::Node": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ManagedBlockchain::Node",
            "  Properties:",
            "    MemberId: ${2:String} #required",
            "    NetworkId: ${3:String} #required",
            "    NodeConfiguration: #required",
            "      ${4:NodeConfiguration}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-managedblockchain-node.html",
            "Attributes: ",
            "  MemberId",
            "  NodeId",
            "  Arn",
            "  NetworkId"
        ],
        "prefix": "managedblockchain-node",
        "scope": "source.cloudformation"
    },
    "AWS::MediaConvert::JobTemplate": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::MediaConvert::JobTemplate",
            "  Properties:",
            "    AccelerationSettings:",
            "      ${2:AccelerationSettings}",
            "    Category: ${3:String}",
            "    Description: ${4:String}",
            "    HopDestinations:",
            "      - ${5:HopDestination}",
            "    Name: ${6:String}",
            "    Priority: ${7:Integer}",
            "    Queue: ${8:String}",
            "    SettingsJson: ${9:Json} #required",
            "    StatusUpdateInterval: ${10:String}",
            "    Tags: ${11:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconvert-jobtemplate.html",
            "Attributes: ",
            "  Arn",
            "  Name"
        ],
        "prefix": "mediaconvert-jobtemplate",
        "scope": "source.cloudformation"
    },
    "AWS::MediaConvert::Preset": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::MediaConvert::Preset",
            "  Properties:",
            "    Category: ${2:String}",
            "    Description: ${3:String}",
            "    Name: ${4:String}",
            "    SettingsJson: ${5:Json} #required",
            "    Tags: ${6:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconvert-preset.html",
            "Attributes: ",
            "  Arn",
            "  Name"
        ],
        "prefix": "mediaconvert-preset",
        "scope": "source.cloudformation"
    },
    "AWS::MediaConvert::Queue": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::MediaConvert::Queue",
            "  Properties:",
            "    Description: ${2:String}",
            "    Name: ${3:String}",
            "    PricingPlan: ${4:String}",
            "    Status: ${5:String}",
            "    Tags: ${6:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediaconvert-queue.html",
            "Attributes: ",
            "  Arn",
            "  Name"
        ],
        "prefix": "mediaconvert-queue",
        "scope": "source.cloudformation"
    },
    "AWS::MediaLive::Channel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::MediaLive::Channel",
            "  Properties:",
            "    ChannelClass: ${2:String}",
            "    Destinations:",
            "      - ${3:OutputDestination}",
            "    EncoderSettings:",
            "      ${4:EncoderSettings}",
            "    InputAttachments:",
            "      - ${5:InputAttachment}",
            "    InputSpecification:",
            "      ${6:InputSpecification}",
            "    LogLevel: ${7:String}",
            "    Name: ${8:String}",
            "    RoleArn: ${9:String}",
            "    Tags: ${10:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-channel.html",
            "Attributes: ",
            "  Arn",
            "  Inputs"
        ],
        "prefix": "medialive-channel",
        "scope": "source.cloudformation"
    },
    "AWS::MediaLive::Input": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::MediaLive::Input",
            "  Properties:",
            "    Destinations:",
            "      - ${2:InputDestinationRequest}",
            "    InputDevices:",
            "      - ${3:InputDeviceSettings}",
            "    InputSecurityGroups:",
            "      - ${4:String}",
            "    MediaConnectFlows:",
            "      - ${5:MediaConnectFlowRequest}",
            "    Name: ${6:String}",
            "    RoleArn: ${7:String}",
            "    Sources:",
            "      - ${8:InputSourceRequest}",
            "    Tags: ${9:Json}",
            "    Type: ${10:String}",
            "    Vpc:",
            "      ${11:InputVpcRequest}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-input.html",
            "Attributes: ",
            "  Destinations",
            "  Arn",
            "  Sources"
        ],
        "prefix": "medialive-input",
        "scope": "source.cloudformation"
    },
    "AWS::MediaLive::InputSecurityGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::MediaLive::InputSecurityGroup",
            "  Properties:",
            "    Tags: ${2:Json}",
            "    WhitelistRules:",
            "      - ${3:InputWhitelistRuleCidr}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-medialive-inputsecuritygroup.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "medialive-inputsecuritygroup",
        "scope": "source.cloudformation"
    },
    "AWS::MediaPackage::Asset": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::MediaPackage::Asset",
            "  Properties:",
            "    EgressEndpoints:",
            "      - ${2:EgressEndpoint}",
            "    Id: ${3:String} #required",
            "    PackagingGroupId: ${4:String} #required",
            "    ResourceId: ${5:String}",
            "    SourceArn: ${6:String} #required",
            "    SourceRoleArn: ${7:String} #required",
            "    Tags:",
            "      - ${8:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-asset.html",
            "Attributes: ",
            "  Arn",
            "  CreatedAt"
        ],
        "prefix": "mediapackage-asset",
        "scope": "source.cloudformation"
    },
    "AWS::MediaPackage::Channel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::MediaPackage::Channel",
            "  Properties:",
            "    Description: ${2:String}",
            "    Id: ${3:String} #required",
            "    Tags:",
            "      - ${4:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-channel.html",
            "Attributes: ",
            "  Arn",
            "  HlsIngest"
        ],
        "prefix": "mediapackage-channel",
        "scope": "source.cloudformation"
    },
    "AWS::MediaPackage::OriginEndpoint": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::MediaPackage::OriginEndpoint",
            "  Properties:",
            "    Authorization:",
            "      ${2:Authorization}",
            "    ChannelId: ${3:String} #required",
            "    CmafPackage:",
            "      ${4:CmafPackage}",
            "    DashPackage:",
            "      ${5:DashPackage}",
            "    Description: ${6:String}",
            "    HlsPackage:",
            "      ${7:HlsPackage}",
            "    Id: ${8:String} #required",
            "    ManifestName: ${9:String}",
            "    MssPackage:",
            "      ${10:MssPackage}",
            "    Origination: ${11:String}",
            "    StartoverWindowSeconds: ${12:Integer}",
            "    Tags:",
            "      - ${13:Tag}",
            "    TimeDelaySeconds: ${14:Integer}",
            "    Whitelist:",
            "      - ${15:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-originendpoint.html",
            "Attributes: ",
            "  Arn",
            "  Url"
        ],
        "prefix": "mediapackage-originendpoint",
        "scope": "source.cloudformation"
    },
    "AWS::MediaPackage::PackagingConfiguration": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::MediaPackage::PackagingConfiguration",
            "  Properties:",
            "    CmafPackage:",
            "      ${2:CmafPackage}",
            "    DashPackage:",
            "      ${3:DashPackage}",
            "    HlsPackage:",
            "      ${4:HlsPackage}",
            "    Id: ${5:String} #required",
            "    MssPackage:",
            "      ${6:MssPackage}",
            "    PackagingGroupId: ${7:String} #required",
            "    Tags:",
            "      - ${8:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-packagingconfiguration.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "mediapackage-packagingconfiguration",
        "scope": "source.cloudformation"
    },
    "AWS::MediaPackage::PackagingGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::MediaPackage::PackagingGroup",
            "  Properties:",
            "    Authorization:",
            "      ${2:Authorization}",
            "    Id: ${3:String} #required",
            "    Tags:",
            "      - ${4:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackage-packaginggroup.html",
            "Attributes: ",
            "  Arn",
            "  DomainName"
        ],
        "prefix": "mediapackage-packaginggroup",
        "scope": "source.cloudformation"
    },
    "AWS::MediaStore::Container": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::MediaStore::Container",
            "  Properties:",
            "    AccessLoggingEnabled: ${2:Boolean}",
            "    ContainerName: ${3:String} #required",
            "    CorsPolicy:",
            "      - ${4:CorsRule}",
            "    LifecyclePolicy: ${5:String}",
            "    MetricPolicy:",
            "      ${6:MetricPolicy}",
            "    Policy: ${7:String}",
            "    Tags:",
            "      - ${8:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediastore-container.html",
            "Attributes: ",
            "  Endpoint"
        ],
        "prefix": "mediastore-container",
        "scope": "source.cloudformation"
    },
    "AWS::Neptune::DBCluster": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Neptune::DBCluster",
            "  Properties:",
            "    AssociatedRoles:",
            "      - ${2:DBClusterRole}",
            "    AvailabilityZones:",
            "      - ${3:String}",
            "    BackupRetentionPeriod: ${4:Integer}",
            "    DBClusterIdentifier: ${5:String}",
            "    DBClusterParameterGroupName: ${6:String}",
            "    DBSubnetGroupName: ${7:String}",
            "    DeletionProtection: ${8:Boolean}",
            "    EnableCloudwatchLogsExports:",
            "      - ${9:String}",
            "    EngineVersion: ${10:String}",
            "    IamAuthEnabled: ${11:Boolean}",
            "    KmsKeyId: ${12:String}",
            "    Port: ${13:Integer}",
            "    PreferredBackupWindow: ${14:String}",
            "    PreferredMaintenanceWindow: ${15:String}",
            "    RestoreToTime: ${16:String}",
            "    RestoreType: ${17:String}",
            "    SnapshotIdentifier: ${18:String}",
            "    SourceDBClusterIdentifier: ${19:String}",
            "    StorageEncrypted: ${20:Boolean}",
            "    Tags:",
            "      - ${21:Tag}",
            "    UseLatestRestorableTime: ${22:Boolean}",
            "    VpcSecurityGroupIds:",
            "      - ${23:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbcluster.html",
            "Attributes: ",
            "  ClusterResourceId",
            "  Endpoint",
            "  Port",
            "  ReadEndpoint"
        ],
        "prefix": "neptune-dbcluster",
        "scope": "source.cloudformation"
    },
    "AWS::Neptune::DBClusterParameterGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Neptune::DBClusterParameterGroup",
            "  Properties:",
            "    Description: ${2:String} #required",
            "    Family: ${3:String} #required",
            "    Name: ${4:String}",
            "    Parameters: ${5:Json} #required",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbclusterparametergroup.html"
        ],
        "prefix": "neptune-dbclusterparametergroup",
        "scope": "source.cloudformation"
    },
    "AWS::Neptune::DBInstance": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Neptune::DBInstance",
            "  Properties:",
            "    AllowMajorVersionUpgrade: ${2:Boolean}",
            "    AutoMinorVersionUpgrade: ${3:Boolean}",
            "    AvailabilityZone: ${4:String}",
            "    DBClusterIdentifier: ${5:String}",
            "    DBInstanceClass: ${6:String} #required",
            "    DBInstanceIdentifier: ${7:String}",
            "    DBParameterGroupName: ${8:String}",
            "    DBSnapshotIdentifier: ${9:String}",
            "    DBSubnetGroupName: ${10:String}",
            "    PreferredMaintenanceWindow: ${11:String}",
            "    Tags:",
            "      - ${12:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbinstance.html",
            "Attributes: ",
            "  Endpoint",
            "  Port"
        ],
        "prefix": "neptune-dbinstance",
        "scope": "source.cloudformation"
    },
    "AWS::Neptune::DBParameterGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Neptune::DBParameterGroup",
            "  Properties:",
            "    Description: ${2:String} #required",
            "    Family: ${3:String} #required",
            "    Name: ${4:String}",
            "    Parameters: ${5:Json} #required",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbparametergroup.html"
        ],
        "prefix": "neptune-dbparametergroup",
        "scope": "source.cloudformation"
    },
    "AWS::Neptune::DBSubnetGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Neptune::DBSubnetGroup",
            "  Properties:",
            "    DBSubnetGroupDescription: ${2:String} #required",
            "    DBSubnetGroupName: ${3:String}",
            "    SubnetIds: #required",
            "      - ${4:String}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-neptune-dbsubnetgroup.html"
        ],
        "prefix": "neptune-dbsubnetgroup",
        "scope": "source.cloudformation"
    },
    "AWS::NetworkFirewall::Firewall": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::NetworkFirewall::Firewall",
            "  Properties:",
            "    DeleteProtection: ${2:Boolean}",
            "    Description: ${3:String}",
            "    FirewallName: ${4:String} #required",
            "    FirewallPolicyArn: ${5:String} #required",
            "    FirewallPolicyChangeProtection: ${6:Boolean}",
            "    SubnetChangeProtection: ${7:Boolean}",
            "    SubnetMappings: #required",
            "      - ${8:SubnetMapping}",
            "    Tags:",
            "      - ${9:Tag}",
            "    VpcId: ${10:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkfirewall-firewall.html",
            "Attributes: ",
            "  FirewallArn",
            "  FirewallId",
            "  EndpointIds"
        ],
        "prefix": "networkfirewall-firewall",
        "scope": "source.cloudformation"
    },
    "AWS::NetworkFirewall::FirewallPolicy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::NetworkFirewall::FirewallPolicy",
            "  Properties:",
            "    Description: ${2:String}",
            "    FirewallPolicy: #required",
            "      ${3:FirewallPolicy}",
            "    FirewallPolicyName: ${4:String} #required",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkfirewall-firewallpolicy.html",
            "Attributes: ",
            "  FirewallPolicyArn",
            "  FirewallPolicyId"
        ],
        "prefix": "networkfirewall-firewallpolicy",
        "scope": "source.cloudformation"
    },
    "AWS::NetworkFirewall::LoggingConfiguration": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::NetworkFirewall::LoggingConfiguration",
            "  Properties:",
            "    FirewallArn: ${2:String} #required",
            "    FirewallName: ${3:String}",
            "    LoggingConfiguration: #required",
            "      ${4:LoggingConfiguration}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkfirewall-loggingconfiguration.html"
        ],
        "prefix": "networkfirewall-loggingconfiguration",
        "scope": "source.cloudformation"
    },
    "AWS::NetworkFirewall::RuleGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::NetworkFirewall::RuleGroup",
            "  Properties:",
            "    Capacity: ${2:Integer} #required",
            "    Description: ${3:String}",
            "    RuleGroup:",
            "      ${4:RuleGroup}",
            "    RuleGroupName: ${5:String} #required",
            "    Tags:",
            "      - ${6:Tag}",
            "    Type: ${7:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkfirewall-rulegroup.html",
            "Attributes: ",
            "  RuleGroupArn",
            "  RuleGroupId"
        ],
        "prefix": "networkfirewall-rulegroup",
        "scope": "source.cloudformation"
    },
    "AWS::NetworkManager::CustomerGatewayAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::NetworkManager::CustomerGatewayAssociation",
            "  Properties:",
            "    CustomerGatewayArn: ${2:String} #required",
            "    DeviceId: ${3:String} #required",
            "    GlobalNetworkId: ${4:String} #required",
            "    LinkId: ${5:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-customergatewayassociation.html"
        ],
        "prefix": "networkmanager-customergatewayassociation",
        "scope": "source.cloudformation"
    },
    "AWS::NetworkManager::Device": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::NetworkManager::Device",
            "  Properties:",
            "    Description: ${2:String}",
            "    GlobalNetworkId: ${3:String} #required",
            "    Location:",
            "      ${4:Location}",
            "    Model: ${5:String}",
            "    SerialNumber: ${6:String}",
            "    SiteId: ${7:String}",
            "    Tags:",
            "      - ${8:Tag}",
            "    Type: ${9:String}",
            "    Vendor: ${10:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-device.html",
            "Attributes: ",
            "  DeviceArn",
            "  DeviceId"
        ],
        "prefix": "networkmanager-device",
        "scope": "source.cloudformation"
    },
    "AWS::NetworkManager::GlobalNetwork": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::NetworkManager::GlobalNetwork",
            "  Properties:",
            "    Description: ${2:String}",
            "    Tags:",
            "      - ${3:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-globalnetwork.html",
            "Attributes: ",
            "  Arn",
            "  Id"
        ],
        "prefix": "networkmanager-globalnetwork",
        "scope": "source.cloudformation"
    },
    "AWS::NetworkManager::Link": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::NetworkManager::Link",
            "  Properties:",
            "    Bandwidth: #required",
            "      ${2:Bandwidth}",
            "    Description: ${3:String}",
            "    GlobalNetworkId: ${4:String} #required",
            "    Provider: ${5:String}",
            "    SiteId: ${6:String} #required",
            "    Tags:",
            "      - ${7:Tag}",
            "    Type: ${8:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-link.html",
            "Attributes: ",
            "  LinkArn",
            "  LinkId"
        ],
        "prefix": "networkmanager-link",
        "scope": "source.cloudformation"
    },
    "AWS::NetworkManager::LinkAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::NetworkManager::LinkAssociation",
            "  Properties:",
            "    DeviceId: ${2:String} #required",
            "    GlobalNetworkId: ${3:String} #required",
            "    LinkId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-linkassociation.html"
        ],
        "prefix": "networkmanager-linkassociation",
        "scope": "source.cloudformation"
    },
    "AWS::NetworkManager::Site": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::NetworkManager::Site",
            "  Properties:",
            "    Description: ${2:String}",
            "    GlobalNetworkId: ${3:String} #required",
            "    Location:",
            "      ${4:Location}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-site.html",
            "Attributes: ",
            "  SiteArn",
            "  SiteId"
        ],
        "prefix": "networkmanager-site",
        "scope": "source.cloudformation"
    },
    "AWS::NetworkManager::TransitGatewayRegistration": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::NetworkManager::TransitGatewayRegistration",
            "  Properties:",
            "    GlobalNetworkId: ${2:String} #required",
            "    TransitGatewayArn: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-networkmanager-transitgatewayregistration.html"
        ],
        "prefix": "networkmanager-transitgatewayregistration",
        "scope": "source.cloudformation"
    },
    "AWS::OpsWorks::App": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::OpsWorks::App",
            "  Properties:",
            "    AppSource:",
            "      ${2:Source}",
            "    Attributes:",
            "      ${3:Map}",
            "    DataSources:",
            "      - ${4:DataSource}",
            "    Description: ${5:String}",
            "    Domains:",
            "      - ${6:String}",
            "    EnableSsl: ${7:Boolean}",
            "    Environment:",
            "      - ${8:EnvironmentVariable}",
            "    Name: ${9:String} #required",
            "    Shortname: ${10:String}",
            "    SslConfiguration:",
            "      ${11:SslConfiguration}",
            "    StackId: ${12:String} #required",
            "    Type: ${13:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-opsworks-app.html"
        ],
        "prefix": "opsworks-app",
        "scope": "source.cloudformation"
    },
    "AWS::OpsWorks::ElasticLoadBalancerAttachment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::OpsWorks::ElasticLoadBalancerAttachment",
            "  Properties:",
            "    ElasticLoadBalancerName: ${2:String} #required",
            "    LayerId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-opsworks-elbattachment.html"
        ],
        "prefix": "opsworks-elasticloadbalancerattachment",
        "scope": "source.cloudformation"
    },
    "AWS::OpsWorks::Instance": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::OpsWorks::Instance",
            "  Properties:",
            "    AgentVersion: ${2:String}",
            "    AmiId: ${3:String}",
            "    Architecture: ${4:String}",
            "    AutoScalingType: ${5:String}",
            "    AvailabilityZone: ${6:String}",
            "    BlockDeviceMappings:",
            "      - ${7:BlockDeviceMapping}",
            "    EbsOptimized: ${8:Boolean}",
            "    ElasticIps:",
            "      - ${9:String}",
            "    Hostname: ${10:String}",
            "    InstallUpdatesOnBoot: ${11:Boolean}",
            "    InstanceType: ${12:String} #required",
            "    LayerIds: #required",
            "      - ${13:String}",
            "    Os: ${14:String}",
            "    RootDeviceType: ${15:String}",
            "    SshKeyName: ${16:String}",
            "    StackId: ${17:String} #required",
            "    SubnetId: ${18:String}",
            "    Tenancy: ${19:String}",
            "    TimeBasedAutoScaling:",
            "      ${20:TimeBasedAutoScaling}",
            "    VirtualizationType: ${21:String}",
            "    Volumes:",
            "      - ${22:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-opsworks-instance.html",
            "Attributes: ",
            "  AvailabilityZone",
            "  PrivateDnsName",
            "  PrivateIp",
            "  PublicDnsName",
            "  PublicIp"
        ],
        "prefix": "opsworks-instance",
        "scope": "source.cloudformation"
    },
    "AWS::OpsWorks::Layer": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::OpsWorks::Layer",
            "  Properties:",
            "    Attributes:",
            "      ${2:Map}",
            "    AutoAssignElasticIps: ${3:Boolean} #required",
            "    AutoAssignPublicIps: ${4:Boolean} #required",
            "    CustomInstanceProfileArn: ${5:String}",
            "    CustomJson: ${6:Json}",
            "    CustomRecipes:",
            "      ${7:Recipes}",
            "    CustomSecurityGroupIds:",
            "      - ${8:String}",
            "    EnableAutoHealing: ${9:Boolean} #required",
            "    InstallUpdatesOnBoot: ${10:Boolean}",
            "    LifecycleEventConfiguration:",
            "      ${11:LifecycleEventConfiguration}",
            "    LoadBasedAutoScaling:",
            "      ${12:LoadBasedAutoScaling}",
            "    Name: ${13:String} #required",
            "    Packages:",
            "      - ${14:String}",
            "    Shortname: ${15:String} #required",
            "    StackId: ${16:String} #required",
            "    Tags:",
            "      - ${17:Tag}",
            "    Type: ${18:String} #required",
            "    UseEbsOptimizedInstances: ${19:Boolean}",
            "    VolumeConfigurations:",
            "      - ${20:VolumeConfiguration}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-opsworks-layer.html"
        ],
        "prefix": "opsworks-layer",
        "scope": "source.cloudformation"
    },
    "AWS::OpsWorks::Stack": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::OpsWorks::Stack",
            "  Properties:",
            "    AgentVersion: ${2:String}",
            "    Attributes:",
            "      ${3:Map}",
            "    ChefConfiguration:",
            "      ${4:ChefConfiguration}",
            "    CloneAppIds:",
            "      - ${5:String}",
            "    ClonePermissions: ${6:Boolean}",
            "    ConfigurationManager:",
            "      ${7:StackConfigurationManager}",
            "    CustomCookbooksSource:",
            "      ${8:Source}",
            "    CustomJson: ${9:Json}",
            "    DefaultAvailabilityZone: ${10:String}",
            "    DefaultInstanceProfileArn: ${11:String} #required",
            "    DefaultOs: ${12:String}",
            "    DefaultRootDeviceType: ${13:String}",
            "    DefaultSshKeyName: ${14:String}",
            "    DefaultSubnetId: ${15:String}",
            "    EcsClusterArn: ${16:String}",
            "    ElasticIps:",
            "      - ${17:ElasticIp}",
            "    HostnameTheme: ${18:String}",
            "    Name: ${19:String} #required",
            "    RdsDbInstances:",
            "      - ${20:RdsDbInstance}",
            "    ServiceRoleArn: ${21:String} #required",
            "    SourceStackId: ${22:String}",
            "    Tags:",
            "      - ${23:Tag}",
            "    UseCustomCookbooks: ${24:Boolean}",
            "    UseOpsworksSecurityGroups: ${25:Boolean}",
            "    VpcId: ${26:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-opsworks-stack.html"
        ],
        "prefix": "opsworks-stack",
        "scope": "source.cloudformation"
    },
    "AWS::OpsWorks::UserProfile": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::OpsWorks::UserProfile",
            "  Properties:",
            "    AllowSelfManagement: ${2:Boolean}",
            "    IamUserArn: ${3:String} #required",
            "    SshPublicKey: ${4:String}",
            "    SshUsername: ${5:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-opsworks-userprofile.html",
            "Attributes: ",
            "  SshUsername"
        ],
        "prefix": "opsworks-userprofile",
        "scope": "source.cloudformation"
    },
    "AWS::OpsWorks::Volume": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::OpsWorks::Volume",
            "  Properties:",
            "    Ec2VolumeId: ${2:String} #required",
            "    MountPoint: ${3:String}",
            "    Name: ${4:String}",
            "    StackId: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-opsworks-volume.html"
        ],
        "prefix": "opsworks-volume",
        "scope": "source.cloudformation"
    },
    "AWS::OpsWorksCM::Server": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::OpsWorksCM::Server",
            "  Properties:",
            "    AssociatePublicIpAddress: ${2:Boolean}",
            "    BackupId: ${3:String}",
            "    BackupRetentionCount: ${4:Integer}",
            "    CustomCertificate: ${5:String}",
            "    CustomDomain: ${6:String}",
            "    CustomPrivateKey: ${7:String}",
            "    DisableAutomatedBackup: ${8:Boolean}",
            "    Engine: ${9:String}",
            "    EngineAttributes:",
            "      - ${10:EngineAttribute}",
            "    EngineModel: ${11:String}",
            "    EngineVersion: ${12:String}",
            "    InstanceProfileArn: ${13:String} #required",
            "    InstanceType: ${14:String} #required",
            "    KeyPair: ${15:String}",
            "    PreferredBackupWindow: ${16:String}",
            "    PreferredMaintenanceWindow: ${17:String}",
            "    SecurityGroupIds:",
            "      - ${18:String}",
            "    ServerName: ${19:String}",
            "    ServiceRoleArn: ${20:String} #required",
            "    SubnetIds:",
            "      - ${21:String}",
            "    Tags:",
            "      - ${22:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-opsworkscm-server.html",
            "Attributes: ",
            "  Endpoint",
            "  Id",
            "  Arn"
        ],
        "prefix": "opsworkscm-server",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::ADMChannel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::ADMChannel",
            "  Properties:",
            "    ApplicationId: ${2:String} #required",
            "    ClientId: ${3:String} #required",
            "    ClientSecret: ${4:String} #required",
            "    Enabled: ${5:Boolean}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-admchannel.html"
        ],
        "prefix": "pinpoint-admchannel",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::APNSChannel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::APNSChannel",
            "  Properties:",
            "    ApplicationId: ${2:String} #required",
            "    BundleId: ${3:String}",
            "    Certificate: ${4:String}",
            "    DefaultAuthenticationMethod: ${5:String}",
            "    Enabled: ${6:Boolean}",
            "    PrivateKey: ${7:String}",
            "    TeamId: ${8:String}",
            "    TokenKey: ${9:String}",
            "    TokenKeyId: ${10:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-apnschannel.html"
        ],
        "prefix": "pinpoint-apnschannel",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::APNSSandboxChannel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::APNSSandboxChannel",
            "  Properties:",
            "    ApplicationId: ${2:String} #required",
            "    BundleId: ${3:String}",
            "    Certificate: ${4:String}",
            "    DefaultAuthenticationMethod: ${5:String}",
            "    Enabled: ${6:Boolean}",
            "    PrivateKey: ${7:String}",
            "    TeamId: ${8:String}",
            "    TokenKey: ${9:String}",
            "    TokenKeyId: ${10:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-apnssandboxchannel.html"
        ],
        "prefix": "pinpoint-apnssandboxchannel",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::APNSVoipChannel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::APNSVoipChannel",
            "  Properties:",
            "    ApplicationId: ${2:String} #required",
            "    BundleId: ${3:String}",
            "    Certificate: ${4:String}",
            "    DefaultAuthenticationMethod: ${5:String}",
            "    Enabled: ${6:Boolean}",
            "    PrivateKey: ${7:String}",
            "    TeamId: ${8:String}",
            "    TokenKey: ${9:String}",
            "    TokenKeyId: ${10:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-apnsvoipchannel.html"
        ],
        "prefix": "pinpoint-apnsvoipchannel",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::APNSVoipSandboxChannel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::APNSVoipSandboxChannel",
            "  Properties:",
            "    ApplicationId: ${2:String} #required",
            "    BundleId: ${3:String}",
            "    Certificate: ${4:String}",
            "    DefaultAuthenticationMethod: ${5:String}",
            "    Enabled: ${6:Boolean}",
            "    PrivateKey: ${7:String}",
            "    TeamId: ${8:String}",
            "    TokenKey: ${9:String}",
            "    TokenKeyId: ${10:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-apnsvoipsandboxchannel.html"
        ],
        "prefix": "pinpoint-apnsvoipsandboxchannel",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::App": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::App",
            "  Properties:",
            "    Name: ${2:String} #required",
            "    Tags: ${3:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-app.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "pinpoint-app",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::ApplicationSettings": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::ApplicationSettings",
            "  Properties:",
            "    ApplicationId: ${2:String} #required",
            "    CampaignHook:",
            "      ${3:CampaignHook}",
            "    CloudWatchMetricsEnabled: ${4:Boolean}",
            "    Limits:",
            "      ${5:Limits}",
            "    QuietTime:",
            "      ${6:QuietTime}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-applicationsettings.html"
        ],
        "prefix": "pinpoint-applicationsettings",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::BaiduChannel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::BaiduChannel",
            "  Properties:",
            "    ApiKey: ${2:String} #required",
            "    ApplicationId: ${3:String} #required",
            "    Enabled: ${4:Boolean}",
            "    SecretKey: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-baiduchannel.html"
        ],
        "prefix": "pinpoint-baiduchannel",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::Campaign": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::Campaign",
            "  Properties:",
            "    AdditionalTreatments:",
            "      - ${2:WriteTreatmentResource}",
            "    ApplicationId: ${3:String} #required",
            "    CampaignHook:",
            "      ${4:CampaignHook}",
            "    Description: ${5:String}",
            "    HoldoutPercent: ${6:Integer}",
            "    IsPaused: ${7:Boolean}",
            "    Limits:",
            "      ${8:Limits}",
            "    MessageConfiguration: #required",
            "      ${9:MessageConfiguration}",
            "    Name: ${10:String} #required",
            "    Schedule: #required",
            "      ${11:Schedule}",
            "    SegmentId: ${12:String} #required",
            "    SegmentVersion: ${13:Integer}",
            "    Tags: ${14:Json}",
            "    TreatmentDescription: ${15:String}",
            "    TreatmentName: ${16:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-campaign.html",
            "Attributes: ",
            "  CampaignId",
            "  Arn"
        ],
        "prefix": "pinpoint-campaign",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::EmailChannel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::EmailChannel",
            "  Properties:",
            "    ApplicationId: ${2:String} #required",
            "    ConfigurationSet: ${3:String}",
            "    Enabled: ${4:Boolean}",
            "    FromAddress: ${5:String} #required",
            "    Identity: ${6:String} #required",
            "    RoleArn: ${7:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-emailchannel.html"
        ],
        "prefix": "pinpoint-emailchannel",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::EmailTemplate": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::EmailTemplate",
            "  Properties:",
            "    DefaultSubstitutions: ${2:String}",
            "    HtmlPart: ${3:String}",
            "    Subject: ${4:String} #required",
            "    Tags: ${5:Json}",
            "    TemplateDescription: ${6:String}",
            "    TemplateName: ${7:String} #required",
            "    TextPart: ${8:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-emailtemplate.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "pinpoint-emailtemplate",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::EventStream": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::EventStream",
            "  Properties:",
            "    ApplicationId: ${2:String} #required",
            "    DestinationStreamArn: ${3:String} #required",
            "    RoleArn: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-eventstream.html"
        ],
        "prefix": "pinpoint-eventstream",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::GCMChannel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::GCMChannel",
            "  Properties:",
            "    ApiKey: ${2:String} #required",
            "    ApplicationId: ${3:String} #required",
            "    Enabled: ${4:Boolean}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-gcmchannel.html"
        ],
        "prefix": "pinpoint-gcmchannel",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::PushTemplate": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::PushTemplate",
            "  Properties:",
            "    ADM:",
            "      ${2:AndroidPushNotificationTemplate}",
            "    APNS:",
            "      ${3:APNSPushNotificationTemplate}",
            "    Baidu:",
            "      ${4:AndroidPushNotificationTemplate}",
            "    Default:",
            "      ${5:DefaultPushNotificationTemplate}",
            "    DefaultSubstitutions: ${6:String}",
            "    GCM:",
            "      ${7:AndroidPushNotificationTemplate}",
            "    Tags: ${8:Json}",
            "    TemplateDescription: ${9:String}",
            "    TemplateName: ${10:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-pushtemplate.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "pinpoint-pushtemplate",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::SMSChannel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::SMSChannel",
            "  Properties:",
            "    ApplicationId: ${2:String} #required",
            "    Enabled: ${3:Boolean}",
            "    SenderId: ${4:String}",
            "    ShortCode: ${5:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-smschannel.html"
        ],
        "prefix": "pinpoint-smschannel",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::Segment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::Segment",
            "  Properties:",
            "    ApplicationId: ${2:String} #required",
            "    Dimensions:",
            "      ${3:SegmentDimensions}",
            "    Name: ${4:String} #required",
            "    SegmentGroups:",
            "      ${5:SegmentGroups}",
            "    Tags: ${6:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-segment.html",
            "Attributes: ",
            "  SegmentId",
            "  Arn"
        ],
        "prefix": "pinpoint-segment",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::SmsTemplate": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::SmsTemplate",
            "  Properties:",
            "    Body: ${2:String} #required",
            "    DefaultSubstitutions: ${3:String}",
            "    Tags: ${4:Json}",
            "    TemplateDescription: ${5:String}",
            "    TemplateName: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-smstemplate.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "pinpoint-smstemplate",
        "scope": "source.cloudformation"
    },
    "AWS::Pinpoint::VoiceChannel": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Pinpoint::VoiceChannel",
            "  Properties:",
            "    ApplicationId: ${2:String} #required",
            "    Enabled: ${3:Boolean}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpoint-voicechannel.html"
        ],
        "prefix": "pinpoint-voicechannel",
        "scope": "source.cloudformation"
    },
    "AWS::PinpointEmail::ConfigurationSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::PinpointEmail::ConfigurationSet",
            "  Properties:",
            "    DeliveryOptions:",
            "      ${2:DeliveryOptions}",
            "    Name: ${3:String} #required",
            "    ReputationOptions:",
            "      ${4:ReputationOptions}",
            "    SendingOptions:",
            "      ${5:SendingOptions}",
            "    Tags:",
            "      - ${6:Tags}",
            "    TrackingOptions:",
            "      ${7:TrackingOptions}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpointemail-configurationset.html"
        ],
        "prefix": "pinpointemail-configurationset",
        "scope": "source.cloudformation"
    },
    "AWS::PinpointEmail::ConfigurationSetEventDestination": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::PinpointEmail::ConfigurationSetEventDestination",
            "  Properties:",
            "    ConfigurationSetName: ${2:String} #required",
            "    EventDestination:",
            "      ${3:EventDestination}",
            "    EventDestinationName: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpointemail-configurationseteventdestination.html"
        ],
        "prefix": "pinpointemail-configurationseteventdestination",
        "scope": "source.cloudformation"
    },
    "AWS::PinpointEmail::DedicatedIpPool": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::PinpointEmail::DedicatedIpPool",
            "  Properties:",
            "    PoolName: ${2:String}",
            "    Tags:",
            "      - ${3:Tags}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpointemail-dedicatedippool.html"
        ],
        "prefix": "pinpointemail-dedicatedippool",
        "scope": "source.cloudformation"
    },
    "AWS::PinpointEmail::Identity": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::PinpointEmail::Identity",
            "  Properties:",
            "    DkimSigningEnabled: ${2:Boolean}",
            "    FeedbackForwardingEnabled: ${3:Boolean}",
            "    MailFromAttributes:",
            "      ${4:MailFromAttributes}",
            "    Name: ${5:String} #required",
            "    Tags:",
            "      - ${6:Tags}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-pinpointemail-identity.html",
            "Attributes: ",
            "  IdentityDNSRecordName3",
            "  IdentityDNSRecordName1",
            "  IdentityDNSRecordName2",
            "  IdentityDNSRecordValue3",
            "  IdentityDNSRecordValue2",
            "  IdentityDNSRecordValue1"
        ],
        "prefix": "pinpointemail-identity",
        "scope": "source.cloudformation"
    },
    "AWS::QLDB::Ledger": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::QLDB::Ledger",
            "  Properties:",
            "    DeletionProtection: ${2:Boolean}",
            "    Name: ${3:String}",
            "    PermissionsMode: ${4:String} #required",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-qldb-ledger.html"
        ],
        "prefix": "qldb-ledger",
        "scope": "source.cloudformation"
    },
    "AWS::QLDB::Stream": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::QLDB::Stream",
            "  Properties:",
            "    ExclusiveEndTime: ${2:String}",
            "    InclusiveStartTime: ${3:String} #required",
            "    KinesisConfiguration: #required",
            "      ${4:KinesisConfiguration}",
            "    LedgerName: ${5:String} #required",
            "    RoleArn: ${6:String} #required",
            "    StreamName: ${7:String} #required",
            "    Tags:",
            "      - ${8:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-qldb-stream.html",
            "Attributes: ",
            "  Arn",
            "  Id"
        ],
        "prefix": "qldb-stream",
        "scope": "source.cloudformation"
    },
    "AWS::RAM::ResourceShare": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RAM::ResourceShare",
            "  Properties:",
            "    AllowExternalPrincipals: ${2:Boolean}",
            "    Name: ${3:String} #required",
            "    Principals:",
            "      - ${4:String}",
            "    ResourceArns:",
            "      - ${5:String}",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ram-resourceshare.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "ram-resourceshare",
        "scope": "source.cloudformation"
    },
    "AWS::RDS::DBCluster": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RDS::DBCluster",
            "  Properties:",
            "    AssociatedRoles:",
            "      - ${2:DBClusterRole}",
            "    AvailabilityZones:",
            "      - ${3:String}",
            "    BacktrackWindow: ${4:Long}",
            "    BackupRetentionPeriod: ${5:Integer}",
            "    DBClusterIdentifier: ${6:String}",
            "    DBClusterParameterGroupName: ${7:String}",
            "    DBSubnetGroupName: ${8:String}",
            "    DatabaseName: ${9:String}",
            "    DeletionProtection: ${10:Boolean}",
            "    EnableCloudwatchLogsExports:",
            "      - ${11:String}",
            "    EnableHttpEndpoint: ${12:Boolean}",
            "    EnableIAMDatabaseAuthentication: ${13:Boolean}",
            "    Engine: ${14:String} #required",
            "    EngineMode: ${15:String}",
            "    EngineVersion: ${16:String}",
            "    GlobalClusterIdentifier: ${17:String}",
            "    KmsKeyId: ${18:String}",
            "    MasterUserPassword: ${19:String}",
            "    MasterUsername: ${20:String}",
            "    Port: ${21:Integer}",
            "    PreferredBackupWindow: ${22:String}",
            "    PreferredMaintenanceWindow: ${23:String}",
            "    ReplicationSourceIdentifier: ${24:String}",
            "    RestoreType: ${25:String}",
            "    ScalingConfiguration:",
            "      ${26:ScalingConfiguration}",
            "    SnapshotIdentifier: ${27:String}",
            "    SourceDBClusterIdentifier: ${28:String}",
            "    SourceRegion: ${29:String}",
            "    StorageEncrypted: ${30:Boolean}",
            "    Tags:",
            "      - ${31:Tag}",
            "    UseLatestRestorableTime: ${32:Boolean}",
            "    VpcSecurityGroupIds:",
            "      - ${33:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbcluster.html",
            "Attributes: ",
            "  Endpoint.Address",
            "  Endpoint.Port",
            "  ReadEndpoint.Address"
        ],
        "prefix": "rds-dbcluster",
        "scope": "source.cloudformation"
    },
    "AWS::RDS::DBClusterParameterGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RDS::DBClusterParameterGroup",
            "  Properties:",
            "    Description: ${2:String} #required",
            "    Family: ${3:String} #required",
            "    Parameters: ${4:Json} #required",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbclusterparametergroup.html"
        ],
        "prefix": "rds-dbclusterparametergroup",
        "scope": "source.cloudformation"
    },
    "AWS::RDS::DBInstance": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RDS::DBInstance",
            "  Properties:",
            "    AllocatedStorage: ${2:String}",
            "    AllowMajorVersionUpgrade: ${3:Boolean}",
            "    AssociatedRoles:",
            "      - ${4:DBInstanceRole}",
            "    AutoMinorVersionUpgrade: ${5:Boolean}",
            "    AvailabilityZone: ${6:String}",
            "    BackupRetentionPeriod: ${7:Integer}",
            "    CACertificateIdentifier: ${8:String}",
            "    CharacterSetName: ${9:String}",
            "    CopyTagsToSnapshot: ${10:Boolean}",
            "    DBClusterIdentifier: ${11:String}",
            "    DBInstanceClass: ${12:String} #required",
            "    DBInstanceIdentifier: ${13:String}",
            "    DBName: ${14:String}",
            "    DBParameterGroupName: ${15:String}",
            "    DBSecurityGroups:",
            "      - ${16:String}",
            "    DBSnapshotIdentifier: ${17:String}",
            "    DBSubnetGroupName: ${18:String}",
            "    DeleteAutomatedBackups: ${19:Boolean}",
            "    DeletionProtection: ${20:Boolean}",
            "    Domain: ${21:String}",
            "    DomainIAMRoleName: ${22:String}",
            "    EnableCloudwatchLogsExports:",
            "      - ${23:String}",
            "    EnableIAMDatabaseAuthentication: ${24:Boolean}",
            "    EnablePerformanceInsights: ${25:Boolean}",
            "    Engine: ${26:String}",
            "    EngineVersion: ${27:String}",
            "    Iops: ${28:Integer}",
            "    KmsKeyId: ${29:String}",
            "    LicenseModel: ${30:String}",
            "    MasterUserPassword: ${31:String}",
            "    MasterUsername: ${32:String}",
            "    MaxAllocatedStorage: ${33:Integer}",
            "    MonitoringInterval: ${34:Integer}",
            "    MonitoringRoleArn: ${35:String}",
            "    MultiAZ: ${36:Boolean}",
            "    OptionGroupName: ${37:String}",
            "    PerformanceInsightsKMSKeyId: ${38:String}",
            "    PerformanceInsightsRetentionPeriod: ${39:Integer}",
            "    Port: ${40:String}",
            "    PreferredBackupWindow: ${41:String}",
            "    PreferredMaintenanceWindow: ${42:String}",
            "    ProcessorFeatures:",
            "      - ${43:ProcessorFeature}",
            "    PromotionTier: ${44:Integer}",
            "    PubliclyAccessible: ${45:Boolean}",
            "    SourceDBInstanceIdentifier: ${46:String}",
            "    SourceRegion: ${47:String}",
            "    StorageEncrypted: ${48:Boolean}",
            "    StorageType: ${49:String}",
            "    Tags:",
            "      - ${50:Tag}",
            "    Timezone: ${51:String}",
            "    UseDefaultProcessorFeatures: ${52:Boolean}",
            "    VPCSecurityGroups:",
            "      - ${53:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-rds-database-instance.html",
            "Attributes: ",
            "  Endpoint.Address",
            "  Endpoint.Port"
        ],
        "prefix": "rds-dbinstance",
        "scope": "source.cloudformation"
    },
    "AWS::RDS::DBParameterGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RDS::DBParameterGroup",
            "  Properties:",
            "    Description: ${2:String} #required",
            "    Family: ${3:String} #required",
            "    Parameters:",
            "      ${4:Map}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-rds-dbparametergroup.html"
        ],
        "prefix": "rds-dbparametergroup",
        "scope": "source.cloudformation"
    },
    "AWS::RDS::DBProxy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RDS::DBProxy",
            "  Properties:",
            "    Auth: #required",
            "      - ${2:AuthFormat}",
            "    DBProxyName: ${3:String} #required",
            "    DebugLogging: ${4:Boolean}",
            "    EngineFamily: ${5:String} #required",
            "    IdleClientTimeout: ${6:Integer}",
            "    RequireTLS: ${7:Boolean}",
            "    RoleArn: ${8:String} #required",
            "    Tags:",
            "      - ${9:TagFormat}",
            "    VpcSecurityGroupIds:",
            "      - ${10:String}",
            "    VpcSubnetIds: #required",
            "      - ${11:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbproxy.html",
            "Attributes: ",
            "  DBProxyArn",
            "  Endpoint"
        ],
        "prefix": "rds-dbproxy",
        "scope": "source.cloudformation"
    },
    "AWS::RDS::DBProxyTargetGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RDS::DBProxyTargetGroup",
            "  Properties:",
            "    ConnectionPoolConfigurationInfo:",
            "      ${2:ConnectionPoolConfigurationInfoFormat}",
            "    DBClusterIdentifiers:",
            "      - ${3:String}",
            "    DBInstanceIdentifiers:",
            "      - ${4:String}",
            "    DBProxyName: ${5:String} #required",
            "    TargetGroupName: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbproxytargetgroup.html",
            "Attributes: ",
            "  TargetGroupArn"
        ],
        "prefix": "rds-dbproxytargetgroup",
        "scope": "source.cloudformation"
    },
    "AWS::RDS::DBSecurityGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RDS::DBSecurityGroup",
            "  Properties:",
            "    DBSecurityGroupIngress: #required",
            "      - ${2:Ingress}",
            "    EC2VpcId: ${3:String}",
            "    GroupDescription: ${4:String} #required",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-rds-security-group.html"
        ],
        "prefix": "rds-dbsecuritygroup",
        "scope": "source.cloudformation"
    },
    "AWS::RDS::DBSecurityGroupIngress": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RDS::DBSecurityGroupIngress",
            "  Properties:",
            "    CIDRIP: ${2:String}",
            "    DBSecurityGroupName: ${3:String} #required",
            "    EC2SecurityGroupId: ${4:String}",
            "    EC2SecurityGroupName: ${5:String}",
            "    EC2SecurityGroupOwnerId: ${6:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-security-group-ingress.html"
        ],
        "prefix": "rds-dbsecuritygroupingress",
        "scope": "source.cloudformation"
    },
    "AWS::RDS::DBSubnetGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RDS::DBSubnetGroup",
            "  Properties:",
            "    DBSubnetGroupDescription: ${2:String} #required",
            "    DBSubnetGroupName: ${3:String}",
            "    SubnetIds: #required",
            "      - ${4:String}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbsubnet-group.html"
        ],
        "prefix": "rds-dbsubnetgroup",
        "scope": "source.cloudformation"
    },
    "AWS::RDS::EventSubscription": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RDS::EventSubscription",
            "  Properties:",
            "    Enabled: ${2:Boolean}",
            "    EventCategories:",
            "      - ${3:String}",
            "    SnsTopicArn: ${4:String} #required",
            "    SourceIds:",
            "      - ${5:String}",
            "    SourceType: ${6:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-eventsubscription.html"
        ],
        "prefix": "rds-eventsubscription",
        "scope": "source.cloudformation"
    },
    "AWS::RDS::GlobalCluster": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RDS::GlobalCluster",
            "  Properties:",
            "    DeletionProtection: ${2:Boolean}",
            "    Engine: ${3:String}",
            "    EngineVersion: ${4:String}",
            "    GlobalClusterIdentifier: ${5:String}",
            "    SourceDBClusterIdentifier: ${6:String}",
            "    StorageEncrypted: ${7:Boolean}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-globalcluster.html"
        ],
        "prefix": "rds-globalcluster",
        "scope": "source.cloudformation"
    },
    "AWS::RDS::OptionGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RDS::OptionGroup",
            "  Properties:",
            "    EngineName: ${2:String} #required",
            "    MajorEngineVersion: ${3:String} #required",
            "    OptionConfigurations: #required",
            "      - ${4:OptionConfiguration}",
            "    OptionGroupDescription: ${5:String} #required",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-optiongroup.html"
        ],
        "prefix": "rds-optiongroup",
        "scope": "source.cloudformation"
    },
    "AWS::Redshift::Cluster": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Redshift::Cluster",
            "  Properties:",
            "    AllowVersionUpgrade: ${2:Boolean}",
            "    AutomatedSnapshotRetentionPeriod: ${3:Integer}",
            "    AvailabilityZone: ${4:String}",
            "    ClusterIdentifier: ${5:String}",
            "    ClusterParameterGroupName: ${6:String}",
            "    ClusterSecurityGroups:",
            "      - ${7:String}",
            "    ClusterSubnetGroupName: ${8:String}",
            "    ClusterType: ${9:String} #required",
            "    ClusterVersion: ${10:String}",
            "    DBName: ${11:String} #required",
            "    ElasticIp: ${12:String}",
            "    Encrypted: ${13:Boolean}",
            "    HsmClientCertificateIdentifier: ${14:String}",
            "    HsmConfigurationIdentifier: ${15:String}",
            "    IamRoles:",
            "      - ${16:String}",
            "    KmsKeyId: ${17:String}",
            "    LoggingProperties:",
            "      ${18:LoggingProperties}",
            "    MasterUserPassword: ${19:String} #required",
            "    MasterUsername: ${20:String} #required",
            "    NodeType: ${21:String} #required",
            "    NumberOfNodes: ${22:Integer}",
            "    OwnerAccount: ${23:String}",
            "    Port: ${24:Integer}",
            "    PreferredMaintenanceWindow: ${25:String}",
            "    PubliclyAccessible: ${26:Boolean}",
            "    SnapshotClusterIdentifier: ${27:String}",
            "    SnapshotIdentifier: ${28:String}",
            "    Tags:",
            "      - ${29:Tag}",
            "    VpcSecurityGroupIds:",
            "      - ${30:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-cluster.html",
            "Attributes: ",
            "  Endpoint.Address",
            "  Endpoint.Port"
        ],
        "prefix": "redshift-cluster",
        "scope": "source.cloudformation"
    },
    "AWS::Redshift::ClusterParameterGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Redshift::ClusterParameterGroup",
            "  Properties:",
            "    Description: ${2:String} #required",
            "    ParameterGroupFamily: ${3:String} #required",
            "    Parameters:",
            "      - ${4:Parameter}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-clusterparametergroup.html"
        ],
        "prefix": "redshift-clusterparametergroup",
        "scope": "source.cloudformation"
    },
    "AWS::Redshift::ClusterSecurityGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Redshift::ClusterSecurityGroup",
            "  Properties:",
            "    Description: ${2:String} #required",
            "    Tags:",
            "      - ${3:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-clustersecuritygroup.html"
        ],
        "prefix": "redshift-clustersecuritygroup",
        "scope": "source.cloudformation"
    },
    "AWS::Redshift::ClusterSecurityGroupIngress": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Redshift::ClusterSecurityGroupIngress",
            "  Properties:",
            "    CIDRIP: ${2:String}",
            "    ClusterSecurityGroupName: ${3:String} #required",
            "    EC2SecurityGroupName: ${4:String}",
            "    EC2SecurityGroupOwnerId: ${5:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-clustersecuritygroupingress.html"
        ],
        "prefix": "redshift-clustersecuritygroupingress",
        "scope": "source.cloudformation"
    },
    "AWS::Redshift::ClusterSubnetGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Redshift::ClusterSubnetGroup",
            "  Properties:",
            "    Description: ${2:String} #required",
            "    SubnetIds: #required",
            "      - ${3:String}",
            "    Tags:",
            "      - ${4:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-redshift-clustersubnetgroup.html"
        ],
        "prefix": "redshift-clustersubnetgroup",
        "scope": "source.cloudformation"
    },
    "AWS::ResourceGroups::Group": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ResourceGroups::Group",
            "  Properties:",
            "    Description: ${2:String}",
            "    Name: ${3:String} #required",
            "    ResourceQuery:",
            "      ${4:ResourceQuery}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-resourcegroups-group.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "resourcegroups-group",
        "scope": "source.cloudformation"
    },
    "AWS::RoboMaker::Fleet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RoboMaker::Fleet",
            "  Properties:",
            "    Name: ${2:String}",
            "    Tags: ${3:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-robomaker-fleet.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "robomaker-fleet",
        "scope": "source.cloudformation"
    },
    "AWS::RoboMaker::Robot": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RoboMaker::Robot",
            "  Properties:",
            "    Architecture: ${2:String} #required",
            "    Fleet: ${3:String}",
            "    GreengrassGroupId: ${4:String} #required",
            "    Name: ${5:String}",
            "    Tags: ${6:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-robomaker-robot.html"
        ],
        "prefix": "robomaker-robot",
        "scope": "source.cloudformation"
    },
    "AWS::RoboMaker::RobotApplication": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RoboMaker::RobotApplication",
            "  Properties:",
            "    CurrentRevisionId: ${2:String}",
            "    Name: ${3:String}",
            "    RobotSoftwareSuite: #required",
            "      ${4:RobotSoftwareSuite}",
            "    Sources: #required",
            "      - ${5:SourceConfig}",
            "    Tags: ${6:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-robomaker-robotapplication.html",
            "Attributes: ",
            "  CurrentRevisionId",
            "  Arn"
        ],
        "prefix": "robomaker-robotapplication",
        "scope": "source.cloudformation"
    },
    "AWS::RoboMaker::RobotApplicationVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RoboMaker::RobotApplicationVersion",
            "  Properties:",
            "    Application: ${2:String} #required",
            "    CurrentRevisionId: ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-robomaker-robotapplicationversion.html"
        ],
        "prefix": "robomaker-robotapplicationversion",
        "scope": "source.cloudformation"
    },
    "AWS::RoboMaker::SimulationApplication": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RoboMaker::SimulationApplication",
            "  Properties:",
            "    CurrentRevisionId: ${2:String}",
            "    Name: ${3:String}",
            "    RenderingEngine: #required",
            "      ${4:RenderingEngine}",
            "    RobotSoftwareSuite: #required",
            "      ${5:RobotSoftwareSuite}",
            "    SimulationSoftwareSuite: #required",
            "      ${6:SimulationSoftwareSuite}",
            "    Sources: #required",
            "      - ${7:SourceConfig}",
            "    Tags: ${8:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-robomaker-simulationapplication.html",
            "Attributes: ",
            "  CurrentRevisionId",
            "  Arn"
        ],
        "prefix": "robomaker-simulationapplication",
        "scope": "source.cloudformation"
    },
    "AWS::RoboMaker::SimulationApplicationVersion": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::RoboMaker::SimulationApplicationVersion",
            "  Properties:",
            "    Application: ${2:String} #required",
            "    CurrentRevisionId: ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-robomaker-simulationapplicationversion.html"
        ],
        "prefix": "robomaker-simulationapplicationversion",
        "scope": "source.cloudformation"
    },
    "AWS::Route53::HealthCheck": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Route53::HealthCheck",
            "  Properties:",
            "    HealthCheckConfig: ${2:Json} #required",
            "    HealthCheckTags:",
            "      - ${3:HealthCheckTag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-healthcheck.html",
            "Attributes: ",
            "  HealthCheckId"
        ],
        "prefix": "route53-healthcheck",
        "scope": "source.cloudformation"
    },
    "AWS::Route53::HostedZone": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Route53::HostedZone",
            "  Properties:",
            "    HostedZoneConfig:",
            "      ${2:HostedZoneConfig}",
            "    HostedZoneTags:",
            "      - ${3:HostedZoneTag}",
            "    Name: ${4:String} #required",
            "    QueryLoggingConfig:",
            "      ${5:QueryLoggingConfig}",
            "    VPCs:",
            "      - ${6:VPC}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-hostedzone.html",
            "Attributes: ",
            "  Id",
            "  NameServers"
        ],
        "prefix": "route53-hostedzone",
        "scope": "source.cloudformation"
    },
    "AWS::Route53::RecordSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Route53::RecordSet",
            "  Properties:",
            "    AliasTarget:",
            "      ${2:AliasTarget}",
            "    Comment: ${3:String}",
            "    Failover: ${4:String}",
            "    GeoLocation:",
            "      ${5:GeoLocation}",
            "    HealthCheckId: ${6:String}",
            "    HostedZoneId: ${7:String}",
            "    HostedZoneName: ${8:String}",
            "    MultiValueAnswer: ${9:Boolean}",
            "    Name: ${10:String} #required",
            "    Region: ${11:String}",
            "    ResourceRecords:",
            "      - ${12:String}",
            "    SetIdentifier: ${13:String}",
            "    TTL: ${14:String}",
            "    Type: ${15:String} #required",
            "    Weight: ${16:Integer}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset.html"
        ],
        "prefix": "route53-recordset",
        "scope": "source.cloudformation"
    },
    "AWS::Route53::RecordSetGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Route53::RecordSetGroup",
            "  Properties:",
            "    Comment: ${2:String}",
            "    HostedZoneId: ${3:String}",
            "    HostedZoneName: ${4:String}",
            "    RecordSets:",
            "      - ${5:RecordSet}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-recordsetgroup.html"
        ],
        "prefix": "route53-recordsetgroup",
        "scope": "source.cloudformation"
    },
    "AWS::Route53Resolver::ResolverEndpoint": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Route53Resolver::ResolverEndpoint",
            "  Properties:",
            "    Direction: ${2:String} #required",
            "    IpAddresses: #required",
            "      - ${3:IpAddressRequest}",
            "    Name: ${4:String}",
            "    SecurityGroupIds: #required",
            "      - ${5:String}",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverendpoint.html",
            "Attributes: ",
            "  ResolverEndpointId",
            "  IpAddressCount",
            "  Arn",
            "  Direction",
            "  HostVPCId",
            "  Name"
        ],
        "prefix": "route53resolver-resolverendpoint",
        "scope": "source.cloudformation"
    },
    "AWS::Route53Resolver::ResolverQueryLoggingConfig": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Route53Resolver::ResolverQueryLoggingConfig",
            "  Properties:",
            "    DestinationArn: ${2:String}",
            "    Name: ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverqueryloggingconfig.html",
            "Attributes: ",
            "  Id",
            "  OwnerId",
            "  Status",
            "  ShareStatus",
            "  AssociationCount",
            "  Arn",
            "  CreatorRequestId",
            "  CreationTime"
        ],
        "prefix": "route53resolver-resolverqueryloggingconfig",
        "scope": "source.cloudformation"
    },
    "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation",
            "  Properties:",
            "    ResolverQueryLogConfigId: ${2:String}",
            "    ResourceId: ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverqueryloggingconfigassociation.html",
            "Attributes: ",
            "  Id",
            "  Status",
            "  Error",
            "  ErrorMessage",
            "  CreationTime"
        ],
        "prefix": "route53resolver-resolverqueryloggingconfigassociation",
        "scope": "source.cloudformation"
    },
    "AWS::Route53Resolver::ResolverRule": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Route53Resolver::ResolverRule",
            "  Properties:",
            "    DomainName: ${2:String} #required",
            "    Name: ${3:String}",
            "    ResolverEndpointId: ${4:String}",
            "    RuleType: ${5:String} #required",
            "    Tags:",
            "      - ${6:Tag}",
            "    TargetIps:",
            "      - ${7:TargetAddress}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverrule.html",
            "Attributes: ",
            "  ResolverEndpointId",
            "  DomainName",
            "  ResolverRuleId",
            "  Arn",
            "  TargetIps",
            "  Name"
        ],
        "prefix": "route53resolver-resolverrule",
        "scope": "source.cloudformation"
    },
    "AWS::Route53Resolver::ResolverRuleAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Route53Resolver::ResolverRuleAssociation",
            "  Properties:",
            "    Name: ${2:String}",
            "    ResolverRuleId: ${3:String} #required",
            "    VPCId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53resolver-resolverruleassociation.html",
            "Attributes: ",
            "  VPCId",
            "  ResolverRuleId",
            "  ResolverRuleAssociationId",
            "  Name"
        ],
        "prefix": "route53resolver-resolverruleassociation",
        "scope": "source.cloudformation"
    },
    "AWS::S3::AccessPoint": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::S3::AccessPoint",
            "  Properties:",
            "    Bucket: ${2:String} #required",
            "    CreationDate: ${3:String}",
            "    Name: ${4:String}",
            "    NetworkOrigin: ${5:String}",
            "    Policy: ${6:Json}",
            "    PolicyStatus: ${7:Json}",
            "    PublicAccessBlockConfiguration:",
            "      ${8:PublicAccessBlockConfiguration}",
            "    VpcConfiguration:",
            "      ${9:VpcConfiguration}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-accesspoint.html"
        ],
        "prefix": "s3-accesspoint",
        "scope": "source.cloudformation"
    },
    "AWS::S3::Bucket": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::S3::Bucket",
            "  Properties:",
            "    AccelerateConfiguration:",
            "      ${2:AccelerateConfiguration}",
            "    AccessControl: ${3:String}",
            "    AnalyticsConfigurations:",
            "      - ${4:AnalyticsConfiguration}",
            "    BucketEncryption:",
            "      ${5:BucketEncryption}",
            "    BucketName: ${6:String}",
            "    CorsConfiguration:",
            "      ${7:CorsConfiguration}",
            "    IntelligentTieringConfigurations:",
            "      - ${8:IntelligentTieringConfiguration}",
            "    InventoryConfigurations:",
            "      - ${9:InventoryConfiguration}",
            "    LifecycleConfiguration:",
            "      ${10:LifecycleConfiguration}",
            "    LoggingConfiguration:",
            "      ${11:LoggingConfiguration}",
            "    MetricsConfigurations:",
            "      - ${12:MetricsConfiguration}",
            "    NotificationConfiguration:",
            "      ${13:NotificationConfiguration}",
            "    ObjectLockConfiguration:",
            "      ${14:ObjectLockConfiguration}",
            "    ObjectLockEnabled: ${15:Boolean}",
            "    OwnershipControls:",
            "      ${16:OwnershipControls}",
            "    PublicAccessBlockConfiguration:",
            "      ${17:PublicAccessBlockConfiguration}",
            "    ReplicationConfiguration:",
            "      ${18:ReplicationConfiguration}",
            "    Tags:",
            "      - ${19:Tag}",
            "    VersioningConfiguration:",
            "      ${20:VersioningConfiguration}",
            "    WebsiteConfiguration:",
            "      ${21:WebsiteConfiguration}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html",
            "Attributes: ",
            "  Arn",
            "  DomainName",
            "  DualStackDomainName",
            "  RegionalDomainName",
            "  WebsiteURL"
        ],
        "prefix": "s3-bucket",
        "scope": "source.cloudformation"
    },
    "AWS::S3::BucketPolicy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::S3::BucketPolicy",
            "  Properties:",
            "    Bucket: ${2:String} #required",
            "    PolicyDocument: ${3:Json} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html"
        ],
        "prefix": "s3-bucketpolicy",
        "scope": "source.cloudformation"
    },
    "AWS::S3::StorageLens": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::S3::StorageLens",
            "  Properties:",
            "    StorageLensConfiguration: #required",
            "      ${2:StorageLensConfiguration}",
            "    Tags:",
            "      - ${3:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-storagelens.html",
            "Attributes: ",
            "  StorageLensArn"
        ],
        "prefix": "s3-storagelens",
        "scope": "source.cloudformation"
    },
    "AWS::SDB::Domain": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SDB::Domain",
            "  Properties:",
            "    Description: ${2:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-simpledb.html"
        ],
        "prefix": "sdb-domain",
        "scope": "source.cloudformation"
    },
    "AWS::SES::ConfigurationSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SES::ConfigurationSet",
            "  Properties:",
            "    Name: ${2:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-configurationset.html"
        ],
        "prefix": "ses-configurationset",
        "scope": "source.cloudformation"
    },
    "AWS::SES::ConfigurationSetEventDestination": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SES::ConfigurationSetEventDestination",
            "  Properties:",
            "    ConfigurationSetName: ${2:String} #required",
            "    EventDestination: #required",
            "      ${3:EventDestination}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-configurationseteventdestination.html"
        ],
        "prefix": "ses-configurationseteventdestination",
        "scope": "source.cloudformation"
    },
    "AWS::SES::ReceiptFilter": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SES::ReceiptFilter",
            "  Properties:",
            "    Filter: #required",
            "      ${2:Filter}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-receiptfilter.html"
        ],
        "prefix": "ses-receiptfilter",
        "scope": "source.cloudformation"
    },
    "AWS::SES::ReceiptRule": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SES::ReceiptRule",
            "  Properties:",
            "    After: ${2:String}",
            "    Rule: #required",
            "      ${3:Rule}",
            "    RuleSetName: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-receiptrule.html"
        ],
        "prefix": "ses-receiptrule",
        "scope": "source.cloudformation"
    },
    "AWS::SES::ReceiptRuleSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SES::ReceiptRuleSet",
            "  Properties:",
            "    RuleSetName: ${2:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-receiptruleset.html"
        ],
        "prefix": "ses-receiptruleset",
        "scope": "source.cloudformation"
    },
    "AWS::SES::Template": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SES::Template",
            "  Properties:",
            "    Template:",
            "      ${2:Template}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ses-template.html"
        ],
        "prefix": "ses-template",
        "scope": "source.cloudformation"
    },
    "AWS::SNS::Subscription": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SNS::Subscription",
            "  Properties:",
            "    DeliveryPolicy: ${2:Json}",
            "    Endpoint: ${3:String}",
            "    FilterPolicy: ${4:Json}",
            "    Protocol: ${5:String} #required",
            "    RawMessageDelivery: ${6:Boolean}",
            "    RedrivePolicy: ${7:Json}",
            "    Region: ${8:String}",
            "    SubscriptionRoleArn: ${9:String}",
            "    TopicArn: ${10:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html"
        ],
        "prefix": "sns-subscription",
        "scope": "source.cloudformation"
    },
    "AWS::SNS::Topic": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SNS::Topic",
            "  Properties:",
            "    ContentBasedDeduplication: ${2:Boolean}",
            "    DisplayName: ${3:String}",
            "    FifoTopic: ${4:Boolean}",
            "    KmsMasterKeyId: ${5:String}",
            "    Subscription:",
            "      - ${6:Subscription}",
            "    Tags:",
            "      - ${7:Tag}",
            "    TopicName: ${8:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html",
            "Attributes: ",
            "  TopicName"
        ],
        "prefix": "sns-topic",
        "scope": "source.cloudformation"
    },
    "AWS::SNS::TopicPolicy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SNS::TopicPolicy",
            "  Properties:",
            "    PolicyDocument: ${2:Json} #required",
            "    Topics: #required",
            "      - ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-policy.html"
        ],
        "prefix": "sns-topicpolicy",
        "scope": "source.cloudformation"
    },
    "AWS::SQS::Queue": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SQS::Queue",
            "  Properties:",
            "    ContentBasedDeduplication: ${2:Boolean}",
            "    DelaySeconds: ${3:Integer}",
            "    FifoQueue: ${4:Boolean}",
            "    KmsDataKeyReusePeriodSeconds: ${5:Integer}",
            "    KmsMasterKeyId: ${6:String}",
            "    MaximumMessageSize: ${7:Integer}",
            "    MessageRetentionPeriod: ${8:Integer}",
            "    QueueName: ${9:String}",
            "    ReceiveMessageWaitTimeSeconds: ${10:Integer}",
            "    RedrivePolicy: ${11:Json}",
            "    Tags:",
            "      - ${12:Tag}",
            "    VisibilityTimeout: ${13:Integer}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html",
            "Attributes: ",
            "  Arn",
            "  QueueName"
        ],
        "prefix": "sqs-queue",
        "scope": "source.cloudformation"
    },
    "AWS::SQS::QueuePolicy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SQS::QueuePolicy",
            "  Properties:",
            "    PolicyDocument: ${2:Json} #required",
            "    Queues: #required",
            "      - ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-policy.html"
        ],
        "prefix": "sqs-queuepolicy",
        "scope": "source.cloudformation"
    },
    "AWS::SSM::Association": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SSM::Association",
            "  Properties:",
            "    ApplyOnlyAtCronInterval: ${2:Boolean}",
            "    AssociationName: ${3:String}",
            "    AutomationTargetParameterName: ${4:String}",
            "    ComplianceSeverity: ${5:String}",
            "    DocumentVersion: ${6:String}",
            "    InstanceId: ${7:String}",
            "    MaxConcurrency: ${8:String}",
            "    MaxErrors: ${9:String}",
            "    Name: ${10:String} #required",
            "    OutputLocation:",
            "      ${11:InstanceAssociationOutputLocation}",
            "    Parameters:",
            "      ${12:Map}",
            "    ScheduleExpression: ${13:String}",
            "    SyncCompliance: ${14:String}",
            "    Targets:",
            "      - ${15:Target}",
            "    WaitForSuccessTimeoutSeconds: ${16:Integer}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-association.html",
            "Attributes: ",
            "  AssociationId"
        ],
        "prefix": "ssm-association",
        "scope": "source.cloudformation"
    },
    "AWS::SSM::Document": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SSM::Document",
            "  Properties:",
            "    Content: ${2:Json} #required",
            "    DocumentType: ${3:String}",
            "    Name: ${4:String}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-document.html"
        ],
        "prefix": "ssm-document",
        "scope": "source.cloudformation"
    },
    "AWS::SSM::MaintenanceWindow": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SSM::MaintenanceWindow",
            "  Properties:",
            "    AllowUnassociatedTargets: ${2:Boolean} #required",
            "    Cutoff: ${3:Integer} #required",
            "    Description: ${4:String}",
            "    Duration: ${5:Integer} #required",
            "    EndDate: ${6:String}",
            "    Name: ${7:String} #required",
            "    Schedule: ${8:String} #required",
            "    ScheduleOffset: ${9:Integer}",
            "    ScheduleTimezone: ${10:String}",
            "    StartDate: ${11:String}",
            "    Tags:",
            "      - ${12:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-maintenancewindow.html"
        ],
        "prefix": "ssm-maintenancewindow",
        "scope": "source.cloudformation"
    },
    "AWS::SSM::MaintenanceWindowTarget": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SSM::MaintenanceWindowTarget",
            "  Properties:",
            "    Description: ${2:String}",
            "    Name: ${3:String}",
            "    OwnerInformation: ${4:String}",
            "    ResourceType: ${5:String} #required",
            "    Targets: #required",
            "      - ${6:Targets}",
            "    WindowId: ${7:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-maintenancewindowtarget.html"
        ],
        "prefix": "ssm-maintenancewindowtarget",
        "scope": "source.cloudformation"
    },
    "AWS::SSM::MaintenanceWindowTask": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SSM::MaintenanceWindowTask",
            "  Properties:",
            "    Description: ${2:String}",
            "    LoggingInfo:",
            "      ${3:LoggingInfo}",
            "    MaxConcurrency: ${4:String} #required",
            "    MaxErrors: ${5:String} #required",
            "    Name: ${6:String}",
            "    Priority: ${7:Integer} #required",
            "    ServiceRoleArn: ${8:String}",
            "    Targets: #required",
            "      - ${9:Target}",
            "    TaskArn: ${10:String} #required",
            "    TaskInvocationParameters:",
            "      ${11:TaskInvocationParameters}",
            "    TaskParameters: ${12:Json}",
            "    TaskType: ${13:String} #required",
            "    WindowId: ${14:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-maintenancewindowtask.html"
        ],
        "prefix": "ssm-maintenancewindowtask",
        "scope": "source.cloudformation"
    },
    "AWS::SSM::Parameter": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SSM::Parameter",
            "  Properties:",
            "    AllowedPattern: ${2:String}",
            "    DataType: ${3:String}",
            "    Description: ${4:String}",
            "    Name: ${5:String}",
            "    Policies: ${6:String}",
            "    Tags: ${7:Json}",
            "    Tier: ${8:String}",
            "    Type: ${9:String} #required",
            "    Value: ${10:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-parameter.html",
            "Attributes: ",
            "  Type",
            "  Value"
        ],
        "prefix": "ssm-parameter",
        "scope": "source.cloudformation"
    },
    "AWS::SSM::PatchBaseline": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SSM::PatchBaseline",
            "  Properties:",
            "    ApprovalRules:",
            "      ${2:RuleGroup}",
            "    ApprovedPatches:",
            "      - ${3:String}",
            "    ApprovedPatchesComplianceLevel: ${4:String}",
            "    ApprovedPatchesEnableNonSecurity: ${5:Boolean}",
            "    Description: ${6:String}",
            "    GlobalFilters:",
            "      ${7:PatchFilterGroup}",
            "    Name: ${8:String} #required",
            "    OperatingSystem: ${9:String}",
            "    PatchGroups:",
            "      - ${10:String}",
            "    RejectedPatches:",
            "      - ${11:String}",
            "    RejectedPatchesAction: ${12:String}",
            "    Sources:",
            "      - ${13:PatchSource}",
            "    Tags:",
            "      - ${14:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-patchbaseline.html"
        ],
        "prefix": "ssm-patchbaseline",
        "scope": "source.cloudformation"
    },
    "AWS::SSM::ResourceDataSync": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SSM::ResourceDataSync",
            "  Properties:",
            "    BucketName: ${2:String}",
            "    BucketPrefix: ${3:String}",
            "    BucketRegion: ${4:String}",
            "    KMSKeyArn: ${5:String}",
            "    S3Destination:",
            "      ${6:S3Destination}",
            "    SyncFormat: ${7:String}",
            "    SyncName: ${8:String} #required",
            "    SyncSource:",
            "      ${9:SyncSource}",
            "    SyncType: ${10:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-resourcedatasync.html"
        ],
        "prefix": "ssm-resourcedatasync",
        "scope": "source.cloudformation"
    },
    "AWS::SSO::Assignment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SSO::Assignment",
            "  Properties:",
            "    InstanceArn: ${2:String} #required",
            "    PermissionSetArn: ${3:String} #required",
            "    PrincipalId: ${4:String} #required",
            "    PrincipalType: ${5:String} #required",
            "    TargetId: ${6:String} #required",
            "    TargetType: ${7:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sso-assignment.html"
        ],
        "prefix": "sso-assignment",
        "scope": "source.cloudformation"
    },
    "AWS::SSO::InstanceAccessControlAttributeConfiguration": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SSO::InstanceAccessControlAttributeConfiguration",
            "  Properties:",
            "    InstanceAccessControlAttributeConfiguration: ${2:Json} #required",
            "    InstanceArn: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sso-instanceaccesscontrolattributeconfiguration.html"
        ],
        "prefix": "sso-instanceaccesscontrolattributeconfiguration",
        "scope": "source.cloudformation"
    },
    "AWS::SSO::PermissionSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SSO::PermissionSet",
            "  Properties:",
            "    Description: ${2:String}",
            "    InlinePolicy: ${3:String}",
            "    InstanceArn: ${4:String} #required",
            "    ManagedPolicies:",
            "      - ${5:String}",
            "    Name: ${6:String} #required",
            "    RelayStateType: ${7:String}",
            "    SessionDuration: ${8:String}",
            "    Tags:",
            "      - ${9:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sso-permissionset.html",
            "Attributes: ",
            "  PermissionSetArn"
        ],
        "prefix": "sso-permissionset",
        "scope": "source.cloudformation"
    },
    "AWS::SageMaker::CodeRepository": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SageMaker::CodeRepository",
            "  Properties:",
            "    CodeRepositoryName: ${2:String}",
            "    GitConfig: #required",
            "      ${3:GitConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-coderepository.html",
            "Attributes: ",
            "  CodeRepositoryName"
        ],
        "prefix": "sagemaker-coderepository",
        "scope": "source.cloudformation"
    },
    "AWS::SageMaker::DataQualityJobDefinition": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SageMaker::DataQualityJobDefinition",
            "  Properties:",
            "    DataQualityAppSpecification: #required",
            "      ${2:DataQualityAppSpecification}",
            "    DataQualityBaselineConfig:",
            "      ${3:DataQualityBaselineConfig}",
            "    DataQualityJobInput: #required",
            "      ${4:DataQualityJobInput}",
            "    DataQualityJobOutputConfig: #required",
            "      ${5:MonitoringOutputConfig}",
            "    JobDefinitionName: ${6:String}",
            "    JobResources: #required",
            "      ${7:MonitoringResources}",
            "    NetworkConfig:",
            "      ${8:NetworkConfig}",
            "    RoleArn: ${9:String} #required",
            "    StoppingCondition:",
            "      ${10:StoppingCondition}",
            "    Tags:",
            "      - ${11:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-dataqualityjobdefinition.html",
            "Attributes: ",
            "  JobDefinitionArn",
            "  CreationTime"
        ],
        "prefix": "sagemaker-dataqualityjobdefinition",
        "scope": "source.cloudformation"
    },
    "AWS::SageMaker::Device": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SageMaker::Device",
            "  Properties:",
            "    Device:",
            "      ${2:Device}",
            "    Tags:",
            "      ${3:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-device.html",
            "Attributes: ",
            "  DeviceFleetName"
        ],
        "prefix": "sagemaker-device",
        "scope": "source.cloudformation"
    },
    "AWS::SageMaker::DeviceFleet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SageMaker::DeviceFleet",
            "  Properties:",
            "    Description: ${2:String}",
            "    OutputConfig: #required",
            "      ${3:EdgeOutputConfig}",
            "    RoleArn: ${4:String} #required",
            "    Tags:",
            "      ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-devicefleet.html",
            "Attributes: ",
            "  DeviceFleetName"
        ],
        "prefix": "sagemaker-devicefleet",
        "scope": "source.cloudformation"
    },
    "AWS::SageMaker::Endpoint": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SageMaker::Endpoint",
            "  Properties:",
            "    DeploymentConfig:",
            "      ${2:DeploymentConfig}",
            "    EndpointConfigName: ${3:String} #required",
            "    EndpointName: ${4:String}",
            "    ExcludeRetainedVariantProperties:",
            "      - ${5:VariantProperty}",
            "    RetainAllVariantProperties: ${6:Boolean}",
            "    Tags:",
            "      - ${7:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpoint.html",
            "Attributes: ",
            "  EndpointName"
        ],
        "prefix": "sagemaker-endpoint",
        "scope": "source.cloudformation"
    },
    "AWS::SageMaker::EndpointConfig": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SageMaker::EndpointConfig",
            "  Properties:",
            "    DataCaptureConfig:",
            "      ${2:DataCaptureConfig}",
            "    EndpointConfigName: ${3:String}",
            "    KmsKeyId: ${4:String}",
            "    ProductionVariants: #required",
            "      - ${5:ProductionVariant}",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html",
            "Attributes: ",
            "  EndpointConfigName"
        ],
        "prefix": "sagemaker-endpointconfig",
        "scope": "source.cloudformation"
    },
    "AWS::SageMaker::Model": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SageMaker::Model",
            "  Properties:",
            "    Containers:",
            "      - ${2:ContainerDefinition}",
            "    EnableNetworkIsolation: ${3:Boolean}",
            "    ExecutionRoleArn: ${4:String} #required",
            "    ModelName: ${5:String}",
            "    PrimaryContainer:",
            "      ${6:ContainerDefinition}",
            "    Tags:",
            "      - ${7:Tag}",
            "    VpcConfig:",
            "      ${8:VpcConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-model.html",
            "Attributes: ",
            "  ModelName"
        ],
        "prefix": "sagemaker-model",
        "scope": "source.cloudformation"
    },
    "AWS::SageMaker::ModelBiasJobDefinition": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SageMaker::ModelBiasJobDefinition",
            "  Properties:",
            "    JobDefinitionName: ${2:String}",
            "    JobResources: #required",
            "      ${3:MonitoringResources}",
            "    ModelBiasAppSpecification: #required",
            "      ${4:ModelBiasAppSpecification}",
            "    ModelBiasBaselineConfig:",
            "      ${5:ModelBiasBaselineConfig}",
            "    ModelBiasJobInput: #required",
            "      ${6:ModelBiasJobInput}",
            "    ModelBiasJobOutputConfig: #required",
            "      ${7:MonitoringOutputConfig}",
            "    NetworkConfig:",
            "      ${8:NetworkConfig}",
            "    RoleArn: ${9:String} #required",
            "    StoppingCondition:",
            "      ${10:StoppingCondition}",
            "    Tags:",
            "      - ${11:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelbiasjobdefinition.html",
            "Attributes: ",
            "  JobDefinitionArn",
            "  CreationTime"
        ],
        "prefix": "sagemaker-modelbiasjobdefinition",
        "scope": "source.cloudformation"
    },
    "AWS::SageMaker::ModelExplainabilityJobDefinition": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SageMaker::ModelExplainabilityJobDefinition",
            "  Properties:",
            "    JobDefinitionName: ${2:String}",
            "    JobResources: #required",
            "      ${3:MonitoringResources}",
            "    ModelExplainabilityAppSpecification: #required",
            "      ${4:ModelExplainabilityAppSpecification}",
            "    ModelExplainabilityBaselineConfig:",
            "      ${5:ModelExplainabilityBaselineConfig}",
            "    ModelExplainabilityJobInput: #required",
            "      ${6:ModelExplainabilityJobInput}",
            "    ModelExplainabilityJobOutputConfig: #required",
            "      ${7:MonitoringOutputConfig}",
            "    NetworkConfig:",
            "      ${8:NetworkConfig}",
            "    RoleArn: ${9:String} #required",
            "    StoppingCondition:",
            "      ${10:StoppingCondition}",
            "    Tags:",
            "      - ${11:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelexplainabilityjobdefinition.html",
            "Attributes: ",
            "  JobDefinitionArn",
            "  CreationTime"
        ],
        "prefix": "sagemaker-modelexplainabilityjobdefinition",
        "scope": "source.cloudformation"
    },
    "AWS::SageMaker::ModelPackageGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SageMaker::ModelPackageGroup",
            "  Properties:",
            "    ModelPackageGroupDescription: ${2:String}",
            "    ModelPackageGroupName: ${3:String} #required",
            "    ModelPackageGroupPolicy: ${4:}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackagegroup.html",
            "Attributes: ",
            "  ModelPackageGroupArn",
            "  CreationTime",
            "  ModelPackageGroupStatus"
        ],
        "prefix": "sagemaker-modelpackagegroup",
        "scope": "source.cloudformation"
    },
    "AWS::SageMaker::ModelQualityJobDefinition": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SageMaker::ModelQualityJobDefinition",
            "  Properties:",
            "    JobDefinitionName: ${2:String}",
            "    JobResources: #required",
            "      ${3:MonitoringResources}",
            "    ModelQualityAppSpecification: #required",
            "      ${4:ModelQualityAppSpecification}",
            "    ModelQualityBaselineConfig:",
            "      ${5:ModelQualityBaselineConfig}",
            "    ModelQualityJobInput: #required",
            "      ${6:ModelQualityJobInput}",
            "    ModelQualityJobOutputConfig: #required",
            "      ${7:MonitoringOutputConfig}",
            "    NetworkConfig:",
            "      ${8:NetworkConfig}",
            "    RoleArn: ${9:String} #required",
            "    StoppingCondition:",
            "      ${10:StoppingCondition}",
            "    Tags:",
            "      - ${11:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelqualityjobdefinition.html",
            "Attributes: ",
            "  JobDefinitionArn",
            "  CreationTime"
        ],
        "prefix": "sagemaker-modelqualityjobdefinition",
        "scope": "source.cloudformation"
    },
    "AWS::SageMaker::MonitoringSchedule": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SageMaker::MonitoringSchedule",
            "  Properties:",
            "    EndpointName: ${2:String}",
            "    FailureReason: ${3:String}",
            "    LastMonitoringExecutionSummary:",
            "      ${4:MonitoringExecutionSummary}",
            "    MonitoringScheduleConfig: #required",
            "      ${5:MonitoringScheduleConfig}",
            "    MonitoringScheduleName: ${6:String} #required",
            "    MonitoringScheduleStatus: ${7:String}",
            "    Tags:",
            "      - ${8:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-monitoringschedule.html",
            "Attributes: ",
            "  MonitoringScheduleArn",
            "  CreationTime",
            "  LastModifiedTime"
        ],
        "prefix": "sagemaker-monitoringschedule",
        "scope": "source.cloudformation"
    },
    "AWS::SageMaker::NotebookInstance": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SageMaker::NotebookInstance",
            "  Properties:",
            "    AcceleratorTypes:",
            "      - ${2:String}",
            "    AdditionalCodeRepositories:",
            "      - ${3:String}",
            "    DefaultCodeRepository: ${4:String}",
            "    DirectInternetAccess: ${5:String}",
            "    InstanceType: ${6:String} #required",
            "    KmsKeyId: ${7:String}",
            "    LifecycleConfigName: ${8:String}",
            "    NotebookInstanceName: ${9:String}",
            "    RoleArn: ${10:String} #required",
            "    RootAccess: ${11:String}",
            "    SecurityGroupIds:",
            "      - ${12:String}",
            "    SubnetId: ${13:String}",
            "    Tags:",
            "      - ${14:Tag}",
            "    VolumeSizeInGB: ${15:Integer}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html",
            "Attributes: ",
            "  NotebookInstanceName"
        ],
        "prefix": "sagemaker-notebookinstance",
        "scope": "source.cloudformation"
    },
    "AWS::SageMaker::NotebookInstanceLifecycleConfig": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SageMaker::NotebookInstanceLifecycleConfig",
            "  Properties:",
            "    NotebookInstanceLifecycleConfigName: ${2:String}",
            "    OnCreate:",
            "      - ${3:NotebookInstanceLifecycleHook}",
            "    OnStart:",
            "      - ${4:NotebookInstanceLifecycleHook}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstancelifecycleconfig.html",
            "Attributes: ",
            "  NotebookInstanceLifecycleConfigName"
        ],
        "prefix": "sagemaker-notebookinstancelifecycleconfig",
        "scope": "source.cloudformation"
    },
    "AWS::SageMaker::Pipeline": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SageMaker::Pipeline",
            "  Properties:",
            "    PipelineDefinition: ${2:Json} #required",
            "    PipelineDescription: ${3:String}",
            "    PipelineDisplayName: ${4:String}",
            "    PipelineName: ${5:String} #required",
            "    RoleArn: ${6:String} #required",
            "    Tags:",
            "      - ${7:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-pipeline.html"
        ],
        "prefix": "sagemaker-pipeline",
        "scope": "source.cloudformation"
    },
    "AWS::SageMaker::Project": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SageMaker::Project",
            "  Properties:",
            "    ProjectDescription: ${2:String}",
            "    ProjectName: ${3:String} #required",
            "    ServiceCatalogProvisioningDetails: ${4:Json} #required",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-project.html",
            "Attributes: ",
            "  ProjectArn",
            "  ProjectId",
            "  CreationTime",
            "  ServiceCatalogProvisionedProductDetails",
            "  ProjectStatus"
        ],
        "prefix": "sagemaker-project",
        "scope": "source.cloudformation"
    },
    "AWS::SageMaker::Workteam": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SageMaker::Workteam",
            "  Properties:",
            "    Description: ${2:String}",
            "    MemberDefinitions:",
            "      - ${3:MemberDefinition}",
            "    NotificationConfiguration:",
            "      ${4:NotificationConfiguration}",
            "    Tags:",
            "      - ${5:Tag}",
            "    WorkteamName: ${6:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-workteam.html",
            "Attributes: ",
            "  WorkteamName"
        ],
        "prefix": "sagemaker-workteam",
        "scope": "source.cloudformation"
    },
    "AWS::SecretsManager::ResourcePolicy": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SecretsManager::ResourcePolicy",
            "  Properties:",
            "    BlockPublicPolicy: ${2:Boolean}",
            "    ResourcePolicy: ${3:Json} #required",
            "    SecretId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-secretsmanager-resourcepolicy.html"
        ],
        "prefix": "secretsmanager-resourcepolicy",
        "scope": "source.cloudformation"
    },
    "AWS::SecretsManager::RotationSchedule": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SecretsManager::RotationSchedule",
            "  Properties:",
            "    HostedRotationLambda:",
            "      ${2:HostedRotationLambda}",
            "    RotationLambdaARN: ${3:String}",
            "    RotationRules:",
            "      ${4:RotationRules}",
            "    SecretId: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-secretsmanager-rotationschedule.html"
        ],
        "prefix": "secretsmanager-rotationschedule",
        "scope": "source.cloudformation"
    },
    "AWS::SecretsManager::Secret": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SecretsManager::Secret",
            "  Properties:",
            "    Description: ${2:String}",
            "    GenerateSecretString:",
            "      ${3:GenerateSecretString}",
            "    KmsKeyId: ${4:String}",
            "    Name: ${5:String}",
            "    SecretString: ${6:String}",
            "    Tags:",
            "      - ${7:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-secretsmanager-secret.html"
        ],
        "prefix": "secretsmanager-secret",
        "scope": "source.cloudformation"
    },
    "AWS::SecretsManager::SecretTargetAttachment": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SecretsManager::SecretTargetAttachment",
            "  Properties:",
            "    SecretId: ${2:String} #required",
            "    TargetId: ${3:String} #required",
            "    TargetType: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-secretsmanager-secrettargetattachment.html"
        ],
        "prefix": "secretsmanager-secrettargetattachment",
        "scope": "source.cloudformation"
    },
    "AWS::SecurityHub::Hub": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::SecurityHub::Hub",
            "  Properties:",
            "    Tags: ${2:Json}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securityhub-hub.html"
        ],
        "prefix": "securityhub-hub",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceCatalog::AcceptedPortfolioShare": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceCatalog::AcceptedPortfolioShare",
            "  Properties:",
            "    AcceptLanguage: ${2:String}",
            "    PortfolioId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicecatalog-acceptedportfolioshare.html"
        ],
        "prefix": "servicecatalog-acceptedportfolioshare",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceCatalog::CloudFormationProduct": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceCatalog::CloudFormationProduct",
            "  Properties:",
            "    AcceptLanguage: ${2:String}",
            "    Description: ${3:String}",
            "    Distributor: ${4:String}",
            "    Name: ${5:String} #required",
            "    Owner: ${6:String} #required",
            "    ProvisioningArtifactParameters: #required",
            "      - ${7:ProvisioningArtifactProperties}",
            "    ReplaceProvisioningArtifacts: ${8:Boolean}",
            "    SupportDescription: ${9:String}",
            "    SupportEmail: ${10:String}",
            "    SupportUrl: ${11:String}",
            "    Tags:",
            "      - ${12:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicecatalog-cloudformationproduct.html",
            "Attributes: ",
            "  ProductName",
            "  ProvisioningArtifactIds",
            "  ProvisioningArtifactNames"
        ],
        "prefix": "servicecatalog-cloudformationproduct",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceCatalog::CloudFormationProvisionedProduct": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceCatalog::CloudFormationProvisionedProduct",
            "  Properties:",
            "    AcceptLanguage: ${2:String}",
            "    NotificationArns:",
            "      - ${3:String}",
            "    PathId: ${4:String}",
            "    PathName: ${5:String}",
            "    ProductId: ${6:String}",
            "    ProductName: ${7:String}",
            "    ProvisionedProductName: ${8:String}",
            "    ProvisioningArtifactId: ${9:String}",
            "    ProvisioningArtifactName: ${10:String}",
            "    ProvisioningParameters:",
            "      - ${11:ProvisioningParameter}",
            "    ProvisioningPreferences:",
            "      ${12:ProvisioningPreferences}",
            "    Tags:",
            "      - ${13:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicecatalog-cloudformationprovisionedproduct.html",
            "Attributes: ",
            "  ProvisionedProductId",
            "  RecordId",
            "  CloudformationStackArn",
            "  Outputs"
        ],
        "prefix": "servicecatalog-cloudformationprovisionedproduct",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceCatalog::LaunchNotificationConstraint": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceCatalog::LaunchNotificationConstraint",
            "  Properties:",
            "    AcceptLanguage: ${2:String}",
            "    Description: ${3:String}",
            "    NotificationArns: #required",
            "      - ${4:String}",
            "    PortfolioId: ${5:String} #required",
            "    ProductId: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicecatalog-launchnotificationconstraint.html"
        ],
        "prefix": "servicecatalog-launchnotificationconstraint",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceCatalog::LaunchRoleConstraint": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceCatalog::LaunchRoleConstraint",
            "  Properties:",
            "    AcceptLanguage: ${2:String}",
            "    Description: ${3:String}",
            "    LocalRoleName: ${4:String}",
            "    PortfolioId: ${5:String} #required",
            "    ProductId: ${6:String} #required",
            "    RoleArn: ${7:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicecatalog-launchroleconstraint.html"
        ],
        "prefix": "servicecatalog-launchroleconstraint",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceCatalog::LaunchTemplateConstraint": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceCatalog::LaunchTemplateConstraint",
            "  Properties:",
            "    AcceptLanguage: ${2:String}",
            "    Description: ${3:String}",
            "    PortfolioId: ${4:String} #required",
            "    ProductId: ${5:String} #required",
            "    Rules: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicecatalog-launchtemplateconstraint.html"
        ],
        "prefix": "servicecatalog-launchtemplateconstraint",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceCatalog::Portfolio": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceCatalog::Portfolio",
            "  Properties:",
            "    AcceptLanguage: ${2:String}",
            "    Description: ${3:String}",
            "    DisplayName: ${4:String} #required",
            "    ProviderName: ${5:String} #required",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicecatalog-portfolio.html",
            "Attributes: ",
            "  PortfolioName"
        ],
        "prefix": "servicecatalog-portfolio",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceCatalog::PortfolioPrincipalAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceCatalog::PortfolioPrincipalAssociation",
            "  Properties:",
            "    AcceptLanguage: ${2:String}",
            "    PortfolioId: ${3:String} #required",
            "    PrincipalARN: ${4:String} #required",
            "    PrincipalType: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicecatalog-portfolioprincipalassociation.html"
        ],
        "prefix": "servicecatalog-portfolioprincipalassociation",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceCatalog::PortfolioProductAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceCatalog::PortfolioProductAssociation",
            "  Properties:",
            "    AcceptLanguage: ${2:String}",
            "    PortfolioId: ${3:String} #required",
            "    ProductId: ${4:String} #required",
            "    SourcePortfolioId: ${5:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicecatalog-portfolioproductassociation.html"
        ],
        "prefix": "servicecatalog-portfolioproductassociation",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceCatalog::PortfolioShare": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceCatalog::PortfolioShare",
            "  Properties:",
            "    AcceptLanguage: ${2:String}",
            "    AccountId: ${3:String} #required",
            "    PortfolioId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicecatalog-portfolioshare.html"
        ],
        "prefix": "servicecatalog-portfolioshare",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceCatalog::ResourceUpdateConstraint": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceCatalog::ResourceUpdateConstraint",
            "  Properties:",
            "    AcceptLanguage: ${2:String}",
            "    Description: ${3:String}",
            "    PortfolioId: ${4:String} #required",
            "    ProductId: ${5:String} #required",
            "    TagUpdateOnProvisionedProduct: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicecatalog-resourceupdateconstraint.html"
        ],
        "prefix": "servicecatalog-resourceupdateconstraint",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceCatalog::StackSetConstraint": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceCatalog::StackSetConstraint",
            "  Properties:",
            "    AcceptLanguage: ${2:String}",
            "    AccountList: #required",
            "      - ${3:String}",
            "    AdminRole: ${4:String} #required",
            "    Description: ${5:String} #required",
            "    ExecutionRole: ${6:String} #required",
            "    PortfolioId: ${7:String} #required",
            "    ProductId: ${8:String} #required",
            "    RegionList: #required",
            "      - ${9:String}",
            "    StackInstanceControl: ${10:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicecatalog-stacksetconstraint.html"
        ],
        "prefix": "servicecatalog-stacksetconstraint",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceCatalog::TagOption": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceCatalog::TagOption",
            "  Properties:",
            "    Active: ${2:Boolean}",
            "    Key: ${3:String} #required",
            "    Value: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicecatalog-tagoption.html"
        ],
        "prefix": "servicecatalog-tagoption",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceCatalog::TagOptionAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceCatalog::TagOptionAssociation",
            "  Properties:",
            "    ResourceId: ${2:String} #required",
            "    TagOptionId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicecatalog-tagoptionassociation.html"
        ],
        "prefix": "servicecatalog-tagoptionassociation",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceDiscovery::HttpNamespace": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceDiscovery::HttpNamespace",
            "  Properties:",
            "    Description: ${2:String}",
            "    Name: ${3:String} #required",
            "    Tags:",
            "      - ${4:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-httpnamespace.html",
            "Attributes: ",
            "  Id",
            "  Arn"
        ],
        "prefix": "servicediscovery-httpnamespace",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceDiscovery::Instance": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceDiscovery::Instance",
            "  Properties:",
            "    InstanceAttributes: ${2:Json} #required",
            "    InstanceId: ${3:String}",
            "    ServiceId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-instance.html"
        ],
        "prefix": "servicediscovery-instance",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceDiscovery::PrivateDnsNamespace": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceDiscovery::PrivateDnsNamespace",
            "  Properties:",
            "    Description: ${2:String}",
            "    Name: ${3:String} #required",
            "    Tags:",
            "      - ${4:Tag}",
            "    Vpc: ${5:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html",
            "Attributes: ",
            "  Id",
            "  Arn"
        ],
        "prefix": "servicediscovery-privatednsnamespace",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceDiscovery::PublicDnsNamespace": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceDiscovery::PublicDnsNamespace",
            "  Properties:",
            "    Description: ${2:String}",
            "    Name: ${3:String} #required",
            "    Tags:",
            "      - ${4:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-publicdnsnamespace.html",
            "Attributes: ",
            "  Id",
            "  Arn"
        ],
        "prefix": "servicediscovery-publicdnsnamespace",
        "scope": "source.cloudformation"
    },
    "AWS::ServiceDiscovery::Service": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::ServiceDiscovery::Service",
            "  Properties:",
            "    Description: ${2:String}",
            "    DnsConfig:",
            "      ${3:DnsConfig}",
            "    HealthCheckConfig:",
            "      ${4:HealthCheckConfig}",
            "    HealthCheckCustomConfig:",
            "      ${5:HealthCheckCustomConfig}",
            "    Name: ${6:String}",
            "    NamespaceId: ${7:String}",
            "    Tags:",
            "      - ${8:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html",
            "Attributes: ",
            "  Id",
            "  Arn",
            "  Name"
        ],
        "prefix": "servicediscovery-service",
        "scope": "source.cloudformation"
    },
    "AWS::Signer::ProfilePermission": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Signer::ProfilePermission",
            "  Properties:",
            "    Action: ${2:String} #required",
            "    Principal: ${3:String} #required",
            "    ProfileName: ${4:String} #required",
            "    ProfileVersion: ${5:String}",
            "    StatementId: ${6:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-signer-profilepermission.html"
        ],
        "prefix": "signer-profilepermission",
        "scope": "source.cloudformation"
    },
    "AWS::Signer::SigningProfile": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Signer::SigningProfile",
            "  Properties:",
            "    PlatformId: ${2:String} #required",
            "    SignatureValidityPeriod:",
            "      ${3:SignatureValidityPeriod}",
            "    Tags:",
            "      - ${4:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-signer-signingprofile.html",
            "Attributes: ",
            "  ProfileName",
            "  ProfileVersion",
            "  Arn",
            "  ProfileVersionArn"
        ],
        "prefix": "signer-signingprofile",
        "scope": "source.cloudformation"
    },
    "AWS::StepFunctions::Activity": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::StepFunctions::Activity",
            "  Properties:",
            "    Name: ${2:String} #required",
            "    Tags:",
            "      - ${3:TagsEntry}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-activity.html",
            "Attributes: ",
            "  Name"
        ],
        "prefix": "stepfunctions-activity",
        "scope": "source.cloudformation"
    },
    "AWS::StepFunctions::StateMachine": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::StepFunctions::StateMachine",
            "  Properties:",
            "    DefinitionS3Location:",
            "      ${2:S3Location}",
            "    DefinitionString: ${3:String}",
            "    DefinitionSubstitutions:",
            "      ${4:DefinitionSubstitutions}",
            "    LoggingConfiguration:",
            "      ${5:LoggingConfiguration}",
            "    RoleArn: ${6:String} #required",
            "    StateMachineName: ${7:String}",
            "    StateMachineType: ${8:String}",
            "    Tags:",
            "      - ${9:TagsEntry}",
            "    TracingConfiguration:",
            "      ${10:TracingConfiguration}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html",
            "Attributes: ",
            "  Arn",
            "  Name"
        ],
        "prefix": "stepfunctions-statemachine",
        "scope": "source.cloudformation"
    },
    "AWS::Synthetics::Canary": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Synthetics::Canary",
            "  Properties:",
            "    ArtifactS3Location: ${2:String} #required",
            "    Code: #required",
            "      ${3:Code}",
            "    ExecutionRoleArn: ${4:String} #required",
            "    FailureRetentionPeriod: ${5:Integer}",
            "    Name: ${6:String} #required",
            "    RunConfig:",
            "      ${7:RunConfig}",
            "    RuntimeVersion: ${8:String} #required",
            "    Schedule: #required",
            "      ${9:Schedule}",
            "    StartCanaryAfterCreation: ${10:Boolean} #required",
            "    SuccessRetentionPeriod: ${11:Integer}",
            "    Tags:",
            "      - ${12:Tag}",
            "    VPCConfig:",
            "      ${13:VPCConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-synthetics-canary.html",
            "Attributes: ",
            "  Id",
            "  State"
        ],
        "prefix": "synthetics-canary",
        "scope": "source.cloudformation"
    },
    "AWS::Timestream::Database": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Timestream::Database",
            "  Properties:",
            "    DatabaseName: ${2:String}",
            "    KmsKeyId: ${3:String}",
            "    Tags:",
            "      - ${4:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-timestream-database.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "timestream-database",
        "scope": "source.cloudformation"
    },
    "AWS::Timestream::Table": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Timestream::Table",
            "  Properties:",
            "    DatabaseName: ${2:String} #required",
            "    RetentionProperties: ${3:Json}",
            "    TableName: ${4:String}",
            "    Tags:",
            "      - ${5:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-timestream-table.html",
            "Attributes: ",
            "  Arn"
        ],
        "prefix": "timestream-table",
        "scope": "source.cloudformation"
    },
    "AWS::Transfer::Server": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Transfer::Server",
            "  Properties:",
            "    Certificate: ${2:String}",
            "    EndpointDetails:",
            "      ${3:EndpointDetails}",
            "    EndpointType: ${4:String}",
            "    IdentityProviderDetails:",
            "      ${5:IdentityProviderDetails}",
            "    IdentityProviderType: ${6:String}",
            "    LoggingRole: ${7:String}",
            "    Protocols:",
            "      - ${8:Protocol}",
            "    SecurityPolicyName: ${9:String}",
            "    Tags:",
            "      - ${10:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-server.html",
            "Attributes: ",
            "  ServerId",
            "  Arn"
        ],
        "prefix": "transfer-server",
        "scope": "source.cloudformation"
    },
    "AWS::Transfer::User": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::Transfer::User",
            "  Properties:",
            "    HomeDirectory: ${2:String}",
            "    HomeDirectoryMappings:",
            "      - ${3:HomeDirectoryMapEntry}",
            "    HomeDirectoryType: ${4:String}",
            "    Policy: ${5:String}",
            "    Role: ${6:String} #required",
            "    ServerId: ${7:String} #required",
            "    SshPublicKeys:",
            "      - ${8:SshPublicKey}",
            "    Tags:",
            "      - ${9:Tag}",
            "    UserName: ${10:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-transfer-user.html",
            "Attributes: ",
            "  ServerId",
            "  UserName",
            "  Arn"
        ],
        "prefix": "transfer-user",
        "scope": "source.cloudformation"
    },
    "AWS::WAF::ByteMatchSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAF::ByteMatchSet",
            "  Properties:",
            "    ByteMatchTuples:",
            "      - ${2:ByteMatchTuple}",
            "    Name: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-waf-bytematchset.html"
        ],
        "prefix": "waf-bytematchset",
        "scope": "source.cloudformation"
    },
    "AWS::WAF::IPSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAF::IPSet",
            "  Properties:",
            "    IPSetDescriptors:",
            "      - ${2:IPSetDescriptor}",
            "    Name: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-waf-ipset.html"
        ],
        "prefix": "waf-ipset",
        "scope": "source.cloudformation"
    },
    "AWS::WAF::Rule": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAF::Rule",
            "  Properties:",
            "    MetricName: ${2:String} #required",
            "    Name: ${3:String} #required",
            "    Predicates:",
            "      - ${4:Predicate}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-waf-rule.html"
        ],
        "prefix": "waf-rule",
        "scope": "source.cloudformation"
    },
    "AWS::WAF::SizeConstraintSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAF::SizeConstraintSet",
            "  Properties:",
            "    Name: ${2:String} #required",
            "    SizeConstraints: #required",
            "      - ${3:SizeConstraint}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-waf-sizeconstraintset.html"
        ],
        "prefix": "waf-sizeconstraintset",
        "scope": "source.cloudformation"
    },
    "AWS::WAF::SqlInjectionMatchSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAF::SqlInjectionMatchSet",
            "  Properties:",
            "    Name: ${2:String} #required",
            "    SqlInjectionMatchTuples:",
            "      - ${3:SqlInjectionMatchTuple}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-waf-sqlinjectionmatchset.html"
        ],
        "prefix": "waf-sqlinjectionmatchset",
        "scope": "source.cloudformation"
    },
    "AWS::WAF::WebACL": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAF::WebACL",
            "  Properties:",
            "    DefaultAction: #required",
            "      ${2:WafAction}",
            "    MetricName: ${3:String} #required",
            "    Name: ${4:String} #required",
            "    Rules:",
            "      - ${5:ActivatedRule}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-waf-webacl.html"
        ],
        "prefix": "waf-webacl",
        "scope": "source.cloudformation"
    },
    "AWS::WAF::XssMatchSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAF::XssMatchSet",
            "  Properties:",
            "    Name: ${2:String} #required",
            "    XssMatchTuples: #required",
            "      - ${3:XssMatchTuple}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-waf-xssmatchset.html"
        ],
        "prefix": "waf-xssmatchset",
        "scope": "source.cloudformation"
    },
    "AWS::WAFRegional::ByteMatchSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAFRegional::ByteMatchSet",
            "  Properties:",
            "    ByteMatchTuples:",
            "      - ${2:ByteMatchTuple}",
            "    Name: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafregional-bytematchset.html"
        ],
        "prefix": "wafregional-bytematchset",
        "scope": "source.cloudformation"
    },
    "AWS::WAFRegional::GeoMatchSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAFRegional::GeoMatchSet",
            "  Properties:",
            "    GeoMatchConstraints:",
            "      - ${2:GeoMatchConstraint}",
            "    Name: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafregional-geomatchset.html"
        ],
        "prefix": "wafregional-geomatchset",
        "scope": "source.cloudformation"
    },
    "AWS::WAFRegional::IPSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAFRegional::IPSet",
            "  Properties:",
            "    IPSetDescriptors:",
            "      - ${2:IPSetDescriptor}",
            "    Name: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafregional-ipset.html"
        ],
        "prefix": "wafregional-ipset",
        "scope": "source.cloudformation"
    },
    "AWS::WAFRegional::RateBasedRule": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAFRegional::RateBasedRule",
            "  Properties:",
            "    MatchPredicates:",
            "      - ${2:Predicate}",
            "    MetricName: ${3:String} #required",
            "    Name: ${4:String} #required",
            "    RateKey: ${5:String} #required",
            "    RateLimit: ${6:Integer} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafregional-ratebasedrule.html"
        ],
        "prefix": "wafregional-ratebasedrule",
        "scope": "source.cloudformation"
    },
    "AWS::WAFRegional::RegexPatternSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAFRegional::RegexPatternSet",
            "  Properties:",
            "    Name: ${2:String} #required",
            "    RegexPatternStrings: #required",
            "      - ${3:String}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafregional-regexpatternset.html"
        ],
        "prefix": "wafregional-regexpatternset",
        "scope": "source.cloudformation"
    },
    "AWS::WAFRegional::Rule": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAFRegional::Rule",
            "  Properties:",
            "    MetricName: ${2:String} #required",
            "    Name: ${3:String} #required",
            "    Predicates:",
            "      - ${4:Predicate}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafregional-rule.html"
        ],
        "prefix": "wafregional-rule",
        "scope": "source.cloudformation"
    },
    "AWS::WAFRegional::SizeConstraintSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAFRegional::SizeConstraintSet",
            "  Properties:",
            "    Name: ${2:String} #required",
            "    SizeConstraints:",
            "      - ${3:SizeConstraint}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafregional-sizeconstraintset.html"
        ],
        "prefix": "wafregional-sizeconstraintset",
        "scope": "source.cloudformation"
    },
    "AWS::WAFRegional::SqlInjectionMatchSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAFRegional::SqlInjectionMatchSet",
            "  Properties:",
            "    Name: ${2:String} #required",
            "    SqlInjectionMatchTuples:",
            "      - ${3:SqlInjectionMatchTuple}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafregional-sqlinjectionmatchset.html"
        ],
        "prefix": "wafregional-sqlinjectionmatchset",
        "scope": "source.cloudformation"
    },
    "AWS::WAFRegional::WebACL": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAFRegional::WebACL",
            "  Properties:",
            "    DefaultAction: #required",
            "      ${2:Action}",
            "    MetricName: ${3:String} #required",
            "    Name: ${4:String} #required",
            "    Rules:",
            "      - ${5:Rule}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafregional-webacl.html"
        ],
        "prefix": "wafregional-webacl",
        "scope": "source.cloudformation"
    },
    "AWS::WAFRegional::WebACLAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAFRegional::WebACLAssociation",
            "  Properties:",
            "    ResourceArn: ${2:String} #required",
            "    WebACLId: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafregional-webaclassociation.html"
        ],
        "prefix": "wafregional-webaclassociation",
        "scope": "source.cloudformation"
    },
    "AWS::WAFRegional::XssMatchSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAFRegional::XssMatchSet",
            "  Properties:",
            "    Name: ${2:String} #required",
            "    XssMatchTuples:",
            "      - ${3:XssMatchTuple}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafregional-xssmatchset.html"
        ],
        "prefix": "wafregional-xssmatchset",
        "scope": "source.cloudformation"
    },
    "AWS::WAFv2::IPSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAFv2::IPSet",
            "  Properties:",
            "    Addresses: #required",
            "      - ${2:String}",
            "    Description: ${3:String}",
            "    IPAddressVersion: ${4:String} #required",
            "    Name: ${5:String}",
            "    Scope: ${6:String} #required",
            "    Tags:",
            "      - ${7:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-ipset.html",
            "Attributes: ",
            "  Arn",
            "  Id"
        ],
        "prefix": "wafv2-ipset",
        "scope": "source.cloudformation"
    },
    "AWS::WAFv2::RegexPatternSet": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAFv2::RegexPatternSet",
            "  Properties:",
            "    Description: ${2:String}",
            "    Name: ${3:String}",
            "    RegularExpressionList: #required",
            "      - ${4:String}",
            "    Scope: ${5:String} #required",
            "    Tags:",
            "      - ${6:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-regexpatternset.html",
            "Attributes: ",
            "  Arn",
            "  Id"
        ],
        "prefix": "wafv2-regexpatternset",
        "scope": "source.cloudformation"
    },
    "AWS::WAFv2::RuleGroup": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAFv2::RuleGroup",
            "  Properties:",
            "    Capacity: ${2:Integer} #required",
            "    Description: ${3:String}",
            "    Name: ${4:String}",
            "    Rules:",
            "      - ${5:Rule}",
            "    Scope: ${6:String} #required",
            "    Tags:",
            "      - ${7:Tag}",
            "    VisibilityConfig: #required",
            "      ${8:VisibilityConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-rulegroup.html",
            "Attributes: ",
            "  Arn",
            "  Id"
        ],
        "prefix": "wafv2-rulegroup",
        "scope": "source.cloudformation"
    },
    "AWS::WAFv2::WebACL": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAFv2::WebACL",
            "  Properties:",
            "    DefaultAction: #required",
            "      ${2:DefaultAction}",
            "    Description: ${3:String}",
            "    Name: ${4:String}",
            "    Rules:",
            "      - ${5:Rule}",
            "    Scope: ${6:String} #required",
            "    Tags:",
            "      - ${7:Tag}",
            "    VisibilityConfig: #required",
            "      ${8:VisibilityConfig}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-webacl.html",
            "Attributes: ",
            "  Arn",
            "  Capacity",
            "  Id"
        ],
        "prefix": "wafv2-webacl",
        "scope": "source.cloudformation"
    },
    "AWS::WAFv2::WebACLAssociation": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WAFv2::WebACLAssociation",
            "  Properties:",
            "    ResourceArn: ${2:String} #required",
            "    WebACLArn: ${3:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-webaclassociation.html"
        ],
        "prefix": "wafv2-webaclassociation",
        "scope": "source.cloudformation"
    },
    "AWS::WorkSpaces::ConnectionAlias": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WorkSpaces::ConnectionAlias",
            "  Properties:",
            "    ConnectionString: ${2:String} #required",
            "    Tags:",
            "      - ${3:Tag}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-connectionalias.html",
            "Attributes: ",
            "  Associations",
            "  AliasId",
            "  ConnectionAliasState"
        ],
        "prefix": "workspaces-connectionalias",
        "scope": "source.cloudformation"
    },
    "AWS::WorkSpaces::Workspace": {
        "body": [
            "${1:LogicalID}:",
            "  Type: AWS::WorkSpaces::Workspace",
            "  Properties:",
            "    BundleId: ${2:String} #required",
            "    DirectoryId: ${3:String} #required",
            "    RootVolumeEncryptionEnabled: ${4:Boolean}",
            "    Tags:",
            "      - ${5:Tag}",
            "    UserName: ${6:String} #required",
            "    UserVolumeEncryptionEnabled: ${7:Boolean}",
            "    VolumeEncryptionKey: ${8:String}",
            "    WorkspaceProperties:",
            "      ${9:WorkspaceProperties}"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-workspaces-workspace.html"
        ],
        "prefix": "workspaces-workspace",
        "scope": "source.cloudformation"
    },
    "Alexa::ASK::Skill": {
        "body": [
            "${1:LogicalID}:",
            "  Type: Alexa::ASK::Skill",
            "  Properties:",
            "    AuthenticationConfiguration: #required",
            "      ${2:AuthenticationConfiguration}",
            "    SkillPackage: #required",
            "      ${3:SkillPackage}",
            "    VendorId: ${4:String} #required"
        ],
        "description": [
            "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ask-skill.html"
        ],
        "prefix": "alexa-ask-skill",
        "scope": "source.cloudformation"
    }
}