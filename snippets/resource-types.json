{
    "AWS::ACMPCA::Certificate": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ACMPCA::Certificate\"\r\n\tProperties:\r\n\t\tCertificateAuthorityArn: String #required\r\n\t\tCertificateSigningRequest: String #required\r\n\t\tSigningAlgorithm: String #required\r\n\t\tTemplateArn: String\r\n\t\tValidity: #required\r\n\t\t\tValidity\r\n",
        "description": "Attributes:\r\n  Certificate\r\n  Arn\r\n",
        "prefix": "acmpca-certificate"
    },
    "AWS::ACMPCA::CertificateAuthority": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ACMPCA::CertificateAuthority\"\r\n\tProperties:\r\n\t\tType: String #required\r\n\t\tKeyAlgorithm: String #required\r\n\t\tSigningAlgorithm: String #required\r\n\t\tSubject: #required\r\n\t\t\tSubject\r\n\t\tRevocationConfiguration:\r\n\t\t\tRevocationConfiguration\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n  CertificateSigningRequest\r\n",
        "prefix": "acmpca-certificateauthority"
    },
    "AWS::ACMPCA::CertificateAuthorityActivation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ACMPCA::CertificateAuthorityActivation\"\r\n\tProperties:\r\n\t\tCertificateAuthorityArn: String #required\r\n\t\tCertificate: String #required\r\n\t\tCertificateChain: String\r\n\t\tStatus: String\r\n",
        "description": "Attributes:\r\n  CompleteCertificateChain\r\n",
        "prefix": "acmpca-certificateauthorityactivation"
    },
    "AWS::AccessAnalyzer::Analyzer": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AccessAnalyzer::Analyzer\"\r\n\tProperties:\r\n\t\tAnalyzerName: String\r\n\t\tArchiveRules:\r\n\t\t\t- ArchiveRule\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tType: String #required\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "accessanalyzer-analyzer"
    },
    "AWS::AmazonMQ::Broker": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AmazonMQ::Broker\"\r\n\tProperties:\r\n\t\tSecurityGroups:\r\n\t\t\t- String\r\n\t\tStorageType: String\r\n\t\tEngineVersion: String #required\r\n\t\tConfiguration:\r\n\t\t\tConfigurationId\r\n\t\tAuthenticationStrategy: String\r\n\t\tMaintenanceWindowStartTime:\r\n\t\t\tMaintenanceWindow\r\n\t\tHostInstanceType: String #required\r\n\t\tAutoMinorVersionUpgrade: Boolean #required\r\n\t\tUsers: #required\r\n\t\t\t- User\r\n\t\tLogs:\r\n\t\t\tLogList\r\n\t\tSubnetIds:\r\n\t\t\t- String\r\n\t\tBrokerName: String #required\r\n\t\tLdapServerMetadata:\r\n\t\t\tLdapServerMetadata\r\n\t\tDeploymentMode: String #required\r\n\t\tEngineType: String #required\r\n\t\tPubliclyAccessible: Boolean #required\r\n\t\tEncryptionOptions:\r\n\t\t\tEncryptionOptions\r\n\t\tTags:\r\n\t\t\t- TagsEntry\r\n",
        "description": "Attributes:\r\n  IpAddresses\r\n  OpenWireEndpoints\r\n  ConfigurationRevision\r\n  StompEndpoints\r\n  MqttEndpoints\r\n  AmqpEndpoints\r\n  Arn\r\n  ConfigurationId\r\n  WssEndpoints\r\n",
        "prefix": "amazonmq-broker"
    },
    "AWS::AmazonMQ::Configuration": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AmazonMQ::Configuration\"\r\n\tProperties:\r\n\t\tEngineVersion: String #required\r\n\t\tDescription: String\r\n\t\tEngineType: String #required\r\n\t\tData: String #required\r\n\t\tTags:\r\n\t\t\t- TagsEntry\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  Revision\r\n  Id\r\n  Arn\r\n",
        "prefix": "amazonmq-configuration"
    },
    "AWS::AmazonMQ::ConfigurationAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AmazonMQ::ConfigurationAssociation\"\r\n\tProperties:\r\n\t\tBroker: String #required\r\n\t\tConfiguration: #required\r\n\t\t\tConfigurationId\r\n",
        "description": "No Attributes\r\n",
        "prefix": "amazonmq-configurationassociation"
    },
    "AWS::Amplify::App": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Amplify::App\"\r\n\tProperties:\r\n\t\tAutoBranchCreationConfig:\r\n\t\t\tAutoBranchCreationConfig\r\n\t\tOauthToken: String\r\n\t\tDescription: String\r\n\t\tEnableBranchAutoDeletion: Boolean\r\n\t\tName: String #required\r\n\t\tRepository: String\r\n\t\tEnvironmentVariables:\r\n\t\t\t- EnvironmentVariable\r\n\t\tAccessToken: String\r\n\t\tBuildSpec: String\r\n\t\tCustomRules:\r\n\t\t\t- CustomRule\r\n\t\tBasicAuthConfig:\r\n\t\t\tBasicAuthConfig\r\n\t\tCustomHeaders: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tIAMServiceRole: String\r\n",
        "description": "Attributes:\r\n  AppId\r\n  Arn\r\n  DefaultDomain\r\n  AppName\r\n",
        "prefix": "amplify-app"
    },
    "AWS::Amplify::Branch": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Amplify::Branch\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tEnvironmentVariables:\r\n\t\t\t- EnvironmentVariable\r\n\t\tAppId: String #required\r\n\t\tPullRequestEnvironmentName: String\r\n\t\tEnablePullRequestPreview: Boolean\r\n\t\tEnableAutoBuild: Boolean\r\n\t\tEnablePerformanceMode: Boolean\r\n\t\tBuildSpec: String\r\n\t\tStage: String\r\n\t\tBranchName: String #required\r\n\t\tBasicAuthConfig:\r\n\t\t\tBasicAuthConfig\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  BranchName\r\n  Arn\r\n",
        "prefix": "amplify-branch"
    },
    "AWS::Amplify::Domain": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Amplify::Domain\"\r\n\tProperties:\r\n\t\tSubDomainSettings: #required\r\n\t\t\t- SubDomainSetting\r\n\t\tAppId: String #required\r\n\t\tAutoSubDomainIAMRole: String\r\n\t\tDomainName: String #required\r\n\t\tEnableAutoSubDomain: Boolean\r\n\t\tAutoSubDomainCreationPatterns:\r\n\t\t\t- String\r\n",
        "description": "Attributes:\r\n  AutoSubDomainIAMRole\r\n  DomainName\r\n  StatusReason\r\n  EnableAutoSubDomain\r\n  Arn\r\n  DomainStatus\r\n  AutoSubDomainCreationPatterns\r\n  CertificateRecord\r\n",
        "prefix": "amplify-domain"
    },
    "AWS::ApiGateway::Account": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::Account\"\r\n\tProperties:\r\n\t\tCloudWatchRoleArn: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigateway-account"
    },
    "AWS::ApiGateway::ApiKey": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::ApiKey\"\r\n\tProperties:\r\n\t\tCustomerId: String\r\n\t\tDescription: String\r\n\t\tEnabled: Boolean\r\n\t\tGenerateDistinctId: Boolean\r\n\t\tName: String\r\n\t\tStageKeys:\r\n\t\t\t- StageKey\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tValue: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigateway-apikey"
    },
    "AWS::ApiGateway::Authorizer": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::Authorizer\"\r\n\tProperties:\r\n\t\tAuthType: String\r\n\t\tAuthorizerCredentials: String\r\n\t\tAuthorizerResultTtlInSeconds: Integer\r\n\t\tAuthorizerUri: String\r\n\t\tIdentitySource: String\r\n\t\tIdentityValidationExpression: String\r\n\t\tName: String\r\n\t\tProviderARNs:\r\n\t\t\t- String\r\n\t\tRestApiId: String #required\r\n\t\tType: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigateway-authorizer"
    },
    "AWS::ApiGateway::BasePathMapping": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::BasePathMapping\"\r\n\tProperties:\r\n\t\tBasePath: String\r\n\t\tDomainName: String #required\r\n\t\tRestApiId: String\r\n\t\tStage: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigateway-basepathmapping"
    },
    "AWS::ApiGateway::ClientCertificate": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::ClientCertificate\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigateway-clientcertificate"
    },
    "AWS::ApiGateway::Deployment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::Deployment\"\r\n\tProperties:\r\n\t\tDeploymentCanarySettings:\r\n\t\t\tDeploymentCanarySettings\r\n\t\tDescription: String\r\n\t\tRestApiId: String #required\r\n\t\tStageDescription:\r\n\t\t\tStageDescription\r\n\t\tStageName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigateway-deployment"
    },
    "AWS::ApiGateway::DocumentationPart": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::DocumentationPart\"\r\n\tProperties:\r\n\t\tLocation: #required\r\n\t\t\tLocation\r\n\t\tProperties: String #required\r\n\t\tRestApiId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigateway-documentationpart"
    },
    "AWS::ApiGateway::DocumentationVersion": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::DocumentationVersion\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tDocumentationVersion: String #required\r\n\t\tRestApiId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigateway-documentationversion"
    },
    "AWS::ApiGateway::DomainName": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::DomainName\"\r\n\tProperties:\r\n\t\tDomainName: String\r\n\t\tEndpointConfiguration:\r\n\t\t\tEndpointConfiguration\r\n\t\tMutualTlsAuthentication:\r\n\t\t\tMutualTlsAuthentication\r\n\t\tCertificateArn: String\r\n\t\tRegionalCertificateArn: String\r\n\t\tSecurityPolicy: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  DistributionDomainName\r\n  DistributionHostedZoneId\r\n  RegionalDomainName\r\n  RegionalHostedZoneId\r\n",
        "prefix": "apigateway-domainname"
    },
    "AWS::ApiGateway::GatewayResponse": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::GatewayResponse\"\r\n\tProperties:\r\n\t\tResponseParameters:\r\n\t\t\tMap\r\n\t\tResponseTemplates:\r\n\t\t\tMap\r\n\t\tResponseType: String #required\r\n\t\tRestApiId: String #required\r\n\t\tStatusCode: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigateway-gatewayresponse"
    },
    "AWS::ApiGateway::Method": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::Method\"\r\n\tProperties:\r\n\t\tApiKeyRequired: Boolean\r\n\t\tAuthorizationScopes:\r\n\t\t\t- String\r\n\t\tAuthorizationType: String\r\n\t\tAuthorizerId: String\r\n\t\tHttpMethod: String #required\r\n\t\tIntegration:\r\n\t\t\tIntegration\r\n\t\tMethodResponses:\r\n\t\t\t- MethodResponse\r\n\t\tOperationName: String\r\n\t\tRequestModels:\r\n\t\t\tMap\r\n\t\tRequestParameters:\r\n\t\t\tMap\r\n\t\tRequestValidatorId: String\r\n\t\tResourceId: String #required\r\n\t\tRestApiId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigateway-method"
    },
    "AWS::ApiGateway::Model": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::Model\"\r\n\tProperties:\r\n\t\tContentType: String\r\n\t\tDescription: String\r\n\t\tName: String\r\n\t\tRestApiId: String #required\r\n\t\tSchema: Json\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigateway-model"
    },
    "AWS::ApiGateway::RequestValidator": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::RequestValidator\"\r\n\tProperties:\r\n\t\tName: String\r\n\t\tRestApiId: String #required\r\n\t\tValidateRequestBody: Boolean\r\n\t\tValidateRequestParameters: Boolean\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigateway-requestvalidator"
    },
    "AWS::ApiGateway::Resource": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::Resource\"\r\n\tProperties:\r\n\t\tParentId: String #required\r\n\t\tPathPart: String #required\r\n\t\tRestApiId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigateway-resource"
    },
    "AWS::ApiGateway::RestApi": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::RestApi\"\r\n\tProperties:\r\n\t\tApiKeySourceType: String\r\n\t\tBinaryMediaTypes:\r\n\t\t\t- String\r\n\t\tBody: Json\r\n\t\tBodyS3Location:\r\n\t\t\tS3Location\r\n\t\tCloneFrom: String\r\n\t\tDescription: String\r\n\t\tEndpointConfiguration:\r\n\t\t\tEndpointConfiguration\r\n\t\tFailOnWarnings: Boolean\r\n\t\tMinimumCompressionSize: Integer\r\n\t\tName: String\r\n\t\tParameters:\r\n\t\t\tMap\r\n\t\tPolicy: Json\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  RootResourceId\r\n",
        "prefix": "apigateway-restapi"
    },
    "AWS::ApiGateway::Stage": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::Stage\"\r\n\tProperties:\r\n\t\tAccessLogSetting:\r\n\t\t\tAccessLogSetting\r\n\t\tCacheClusterEnabled: Boolean\r\n\t\tCacheClusterSize: String\r\n\t\tCanarySetting:\r\n\t\t\tCanarySetting\r\n\t\tClientCertificateId: String\r\n\t\tDeploymentId: String\r\n\t\tDescription: String\r\n\t\tDocumentationVersion: String\r\n\t\tMethodSettings:\r\n\t\t\t- MethodSetting\r\n\t\tRestApiId: String #required\r\n\t\tStageName: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTracingEnabled: Boolean\r\n\t\tVariables:\r\n\t\t\tMap\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigateway-stage"
    },
    "AWS::ApiGateway::UsagePlan": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::UsagePlan\"\r\n\tProperties:\r\n\t\tApiStages:\r\n\t\t\t- ApiStage\r\n\t\tDescription: String\r\n\t\tQuota:\r\n\t\t\tQuotaSettings\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tThrottle:\r\n\t\t\tThrottleSettings\r\n\t\tUsagePlanName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigateway-usageplan"
    },
    "AWS::ApiGateway::UsagePlanKey": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::UsagePlanKey\"\r\n\tProperties:\r\n\t\tKeyId: String #required\r\n\t\tKeyType: String #required\r\n\t\tUsagePlanId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigateway-usageplankey"
    },
    "AWS::ApiGateway::VpcLink": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGateway::VpcLink\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tTargetArns: #required\r\n\t\t\t- String\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigateway-vpclink"
    },
    "AWS::ApiGatewayV2::Api": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGatewayV2::Api\"\r\n\tProperties:\r\n\t\tRouteSelectionExpression: String\r\n\t\tBodyS3Location:\r\n\t\t\tBodyS3Location\r\n\t\tDescription: String\r\n\t\tBasePath: String\r\n\t\tFailOnWarnings: Boolean\r\n\t\tDisableExecuteApiEndpoint: Boolean\r\n\t\tDisableSchemaValidation: Boolean\r\n\t\tName: String\r\n\t\tTarget: String\r\n\t\tCredentialsArn: String\r\n\t\tCorsConfiguration:\r\n\t\t\tCors\r\n\t\tVersion: String\r\n\t\tProtocolType: String\r\n\t\tRouteKey: String\r\n\t\tBody: Json\r\n\t\tTags: Json\r\n\t\tApiKeySelectionExpression: String\r\n",
        "description": "Attributes:\r\n  ApiEndpoint\r\n",
        "prefix": "apigatewayv2-api"
    },
    "AWS::ApiGatewayV2::ApiGatewayManagedOverrides": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGatewayV2::ApiGatewayManagedOverrides\"\r\n\tProperties:\r\n\t\tIntegration:\r\n\t\t\tIntegrationOverrides\r\n\t\tStage:\r\n\t\t\tStageOverrides\r\n\t\tApiId: String #required\r\n\t\tRoute:\r\n\t\t\tRouteOverrides\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigatewayv2-apigatewaymanagedoverrides"
    },
    "AWS::ApiGatewayV2::ApiMapping": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGatewayV2::ApiMapping\"\r\n\tProperties:\r\n\t\tDomainName: String #required\r\n\t\tStage: String #required\r\n\t\tApiMappingKey: String\r\n\t\tApiId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigatewayv2-apimapping"
    },
    "AWS::ApiGatewayV2::Authorizer": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGatewayV2::Authorizer\"\r\n\tProperties:\r\n\t\tIdentityValidationExpression: String\r\n\t\tAuthorizerUri: String\r\n\t\tAuthorizerCredentialsArn: String\r\n\t\tAuthorizerType: String #required\r\n\t\tJwtConfiguration:\r\n\t\t\tJWTConfiguration\r\n\t\tAuthorizerResultTtlInSeconds: Integer\r\n\t\tIdentitySource: #required\r\n\t\t\t- String\r\n\t\tAuthorizerPayloadFormatVersion: String\r\n\t\tEnableSimpleResponses: Boolean\r\n\t\tApiId: String #required\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigatewayv2-authorizer"
    },
    "AWS::ApiGatewayV2::Deployment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGatewayV2::Deployment\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tStageName: String\r\n\t\tApiId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigatewayv2-deployment"
    },
    "AWS::ApiGatewayV2::DomainName": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGatewayV2::DomainName\"\r\n\tProperties:\r\n\t\tMutualTlsAuthentication:\r\n\t\t\tMutualTlsAuthentication\r\n\t\tDomainName: String #required\r\n\t\tDomainNameConfigurations:\r\n\t\t\t- DomainNameConfiguration\r\n\t\tTags: Json\r\n",
        "description": "Attributes:\r\n  RegionalHostedZoneId\r\n  RegionalDomainName\r\n",
        "prefix": "apigatewayv2-domainname"
    },
    "AWS::ApiGatewayV2::Integration": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGatewayV2::Integration\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tTemplateSelectionExpression: String\r\n\t\tConnectionType: String\r\n\t\tIntegrationMethod: String\r\n\t\tPassthroughBehavior: String\r\n\t\tRequestParameters: Json\r\n\t\tConnectionId: String\r\n\t\tIntegrationUri: String\r\n\t\tPayloadFormatVersion: String\r\n\t\tCredentialsArn: String\r\n\t\tRequestTemplates: Json\r\n\t\tTimeoutInMillis: Integer\r\n\t\tTlsConfig:\r\n\t\t\tTlsConfig\r\n\t\tContentHandlingStrategy: String\r\n\t\tIntegrationSubtype: String\r\n\t\tApiId: String #required\r\n\t\tIntegrationType: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigatewayv2-integration"
    },
    "AWS::ApiGatewayV2::IntegrationResponse": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGatewayV2::IntegrationResponse\"\r\n\tProperties:\r\n\t\tResponseTemplates: Json\r\n\t\tTemplateSelectionExpression: String\r\n\t\tResponseParameters: Json\r\n\t\tContentHandlingStrategy: String\r\n\t\tIntegrationId: String #required\r\n\t\tIntegrationResponseKey: String #required\r\n\t\tApiId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigatewayv2-integrationresponse"
    },
    "AWS::ApiGatewayV2::Model": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGatewayV2::Model\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tContentType: String\r\n\t\tSchema: Json #required\r\n\t\tApiId: String #required\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigatewayv2-model"
    },
    "AWS::ApiGatewayV2::Route": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGatewayV2::Route\"\r\n\tProperties:\r\n\t\tTarget: String\r\n\t\tRouteResponseSelectionExpression: String\r\n\t\tAuthorizerId: String\r\n\t\tRequestModels: Json\r\n\t\tOperationName: String\r\n\t\tAuthorizationScopes:\r\n\t\t\t- String\r\n\t\tApiKeyRequired: Boolean\r\n\t\tRouteKey: String #required\r\n\t\tAuthorizationType: String\r\n\t\tModelSelectionExpression: String\r\n\t\tApiId: String #required\r\n\t\tRequestParameters: Json\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigatewayv2-route"
    },
    "AWS::ApiGatewayV2::RouteResponse": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGatewayV2::RouteResponse\"\r\n\tProperties:\r\n\t\tRouteResponseKey: String #required\r\n\t\tResponseParameters: Json\r\n\t\tRouteId: String #required\r\n\t\tModelSelectionExpression: String\r\n\t\tApiId: String #required\r\n\t\tResponseModels: Json\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigatewayv2-routeresponse"
    },
    "AWS::ApiGatewayV2::Stage": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGatewayV2::Stage\"\r\n\tProperties:\r\n\t\tClientCertificateId: String\r\n\t\tDeploymentId: String\r\n\t\tDescription: String\r\n\t\tAccessLogSettings:\r\n\t\t\tAccessLogSettings\r\n\t\tAutoDeploy: Boolean\r\n\t\tRouteSettings: Json\r\n\t\tStageName: String #required\r\n\t\tStageVariables: Json\r\n\t\tApiId: String #required\r\n\t\tDefaultRouteSettings:\r\n\t\t\tRouteSettings\r\n\t\tTags: Json\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigatewayv2-stage"
    },
    "AWS::ApiGatewayV2::VpcLink": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApiGatewayV2::VpcLink\"\r\n\tProperties:\r\n\t\tSubnetIds: #required\r\n\t\t\t- String\r\n\t\tSecurityGroupIds:\r\n\t\t\t- String\r\n\t\tTags: Json\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "apigatewayv2-vpclink"
    },
    "AWS::AppConfig::Application": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppConfig::Application\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tTags:\r\n\t\t\t- Tags\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "appconfig-application"
    },
    "AWS::AppConfig::ConfigurationProfile": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppConfig::ConfigurationProfile\"\r\n\tProperties:\r\n\t\tLocationUri: String #required\r\n\t\tDescription: String\r\n\t\tValidators:\r\n\t\t\t- Validators\r\n\t\tRetrievalRoleArn: String\r\n\t\tApplicationId: String #required\r\n\t\tTags:\r\n\t\t\t- Tags\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "appconfig-configurationprofile"
    },
    "AWS::AppConfig::Deployment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppConfig::Deployment\"\r\n\tProperties:\r\n\t\tDeploymentStrategyId: String #required\r\n\t\tConfigurationProfileId: String #required\r\n\t\tEnvironmentId: String #required\r\n\t\tDescription: String\r\n\t\tConfigurationVersion: String #required\r\n\t\tApplicationId: String #required\r\n\t\tTags:\r\n\t\t\t- Tags\r\n",
        "description": "No Attributes\r\n",
        "prefix": "appconfig-deployment"
    },
    "AWS::AppConfig::DeploymentStrategy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppConfig::DeploymentStrategy\"\r\n\tProperties:\r\n\t\tReplicateTo: String #required\r\n\t\tGrowthType: String\r\n\t\tDescription: String\r\n\t\tDeploymentDurationInMinutes: Double #required\r\n\t\tGrowthFactor: Double #required\r\n\t\tFinalBakeTimeInMinutes: Double\r\n\t\tTags:\r\n\t\t\t- Tags\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "appconfig-deploymentstrategy"
    },
    "AWS::AppConfig::Environment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppConfig::Environment\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tMonitors:\r\n\t\t\t- Monitors\r\n\t\tApplicationId: String #required\r\n\t\tTags:\r\n\t\t\t- Tags\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "appconfig-environment"
    },
    "AWS::AppConfig::HostedConfigurationVersion": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppConfig::HostedConfigurationVersion\"\r\n\tProperties:\r\n\t\tConfigurationProfileId: String #required\r\n\t\tDescription: String\r\n\t\tContentType: String #required\r\n\t\tLatestVersionNumber: Double\r\n\t\tContent: String #required\r\n\t\tApplicationId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "appconfig-hostedconfigurationversion"
    },
    "AWS::AppFlow::ConnectorProfile": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppFlow::ConnectorProfile\"\r\n\tProperties:\r\n\t\tConnectorProfileName: String #required\r\n\t\tKMSArn: String\r\n\t\tConnectorType: String #required\r\n\t\tConnectionMode: String #required\r\n\t\tConnectorProfileConfig:\r\n\t\t\tConnectorProfileConfig\r\n",
        "description": "Attributes:\r\n  ConnectorProfileArn\r\n  CredentialsArn\r\n",
        "prefix": "appflow-connectorprofile"
    },
    "AWS::AppFlow::Flow": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppFlow::Flow\"\r\n\tProperties:\r\n\t\tFlowName: String #required\r\n\t\tDescription: String\r\n\t\tKMSArn: String\r\n\t\tTriggerConfig: #required\r\n\t\t\tTriggerConfig\r\n\t\tSourceFlowConfig: #required\r\n\t\t\tSourceFlowConfig\r\n\t\tDestinationFlowConfigList: #required\r\n\t\t\t- DestinationFlowConfig\r\n\t\tTasks: #required\r\n\t\t\t- Task\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  FlowArn\r\n",
        "prefix": "appflow-flow"
    },
    "AWS::AppMesh::GatewayRoute": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppMesh::GatewayRoute\"\r\n\tProperties:\r\n\t\tMeshName: String #required\r\n\t\tVirtualGatewayName: String #required\r\n\t\tMeshOwner: String\r\n\t\tGatewayRouteName: String #required\r\n\t\tSpec: #required\r\n\t\t\tGatewayRouteSpec\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Uid\r\n  MeshName\r\n  VirtualGatewayName\r\n  MeshOwner\r\n  ResourceOwner\r\n  GatewayRouteName\r\n  Arn\r\n",
        "prefix": "appmesh-gatewayroute"
    },
    "AWS::AppMesh::Mesh": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppMesh::Mesh\"\r\n\tProperties:\r\n\t\tMeshName: String #required\r\n\t\tSpec:\r\n\t\t\tMeshSpec\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Uid\r\n  MeshName\r\n  MeshOwner\r\n  ResourceOwner\r\n  Arn\r\n",
        "prefix": "appmesh-mesh"
    },
    "AWS::AppMesh::Route": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppMesh::Route\"\r\n\tProperties:\r\n\t\tMeshName: String #required\r\n\t\tVirtualRouterName: String #required\r\n\t\tMeshOwner: String\r\n\t\tRouteName: String #required\r\n\t\tSpec: #required\r\n\t\t\tRouteSpec\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Uid\r\n  MeshName\r\n  VirtualRouterName\r\n  MeshOwner\r\n  ResourceOwner\r\n  RouteName\r\n  Arn\r\n",
        "prefix": "appmesh-route"
    },
    "AWS::AppMesh::VirtualGateway": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppMesh::VirtualGateway\"\r\n\tProperties:\r\n\t\tVirtualGatewayName: String #required\r\n\t\tMeshName: String #required\r\n\t\tMeshOwner: String\r\n\t\tSpec: #required\r\n\t\t\tVirtualGatewaySpec\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Uid\r\n  VirtualGatewayName\r\n  MeshName\r\n  MeshOwner\r\n  ResourceOwner\r\n  Arn\r\n",
        "prefix": "appmesh-virtualgateway"
    },
    "AWS::AppMesh::VirtualNode": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppMesh::VirtualNode\"\r\n\tProperties:\r\n\t\tMeshName: String #required\r\n\t\tMeshOwner: String\r\n\t\tSpec: #required\r\n\t\t\tVirtualNodeSpec\r\n\t\tVirtualNodeName: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Uid\r\n  MeshName\r\n  MeshOwner\r\n  ResourceOwner\r\n  Arn\r\n  VirtualNodeName\r\n",
        "prefix": "appmesh-virtualnode"
    },
    "AWS::AppMesh::VirtualRouter": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppMesh::VirtualRouter\"\r\n\tProperties:\r\n\t\tMeshName: String #required\r\n\t\tVirtualRouterName: String #required\r\n\t\tMeshOwner: String\r\n\t\tSpec: #required\r\n\t\t\tVirtualRouterSpec\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Uid\r\n  MeshName\r\n  VirtualRouterName\r\n  MeshOwner\r\n  ResourceOwner\r\n  Arn\r\n",
        "prefix": "appmesh-virtualrouter"
    },
    "AWS::AppMesh::VirtualService": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppMesh::VirtualService\"\r\n\tProperties:\r\n\t\tMeshName: String #required\r\n\t\tMeshOwner: String\r\n\t\tVirtualServiceName: String #required\r\n\t\tSpec: #required\r\n\t\t\tVirtualServiceSpec\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Uid\r\n  MeshName\r\n  MeshOwner\r\n  ResourceOwner\r\n  VirtualServiceName\r\n  Arn\r\n",
        "prefix": "appmesh-virtualservice"
    },
    "AWS::AppStream::DirectoryConfig": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppStream::DirectoryConfig\"\r\n\tProperties:\r\n\t\tOrganizationalUnitDistinguishedNames: #required\r\n\t\t\t- String\r\n\t\tServiceAccountCredentials: #required\r\n\t\t\tServiceAccountCredentials\r\n\t\tDirectoryName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "appstream-directoryconfig"
    },
    "AWS::AppStream::Fleet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppStream::Fleet\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tComputeCapacity: #required\r\n\t\t\tComputeCapacity\r\n\t\tVpcConfig:\r\n\t\t\tVpcConfig\r\n\t\tFleetType: String\r\n\t\tEnableDefaultInternetAccess: Boolean\r\n\t\tDomainJoinInfo:\r\n\t\t\tDomainJoinInfo\r\n\t\tName: String #required\r\n\t\tImageName: String\r\n\t\tMaxUserDurationInSeconds: Integer\r\n\t\tIdleDisconnectTimeoutInSeconds: Integer\r\n\t\tDisconnectTimeoutInSeconds: Integer\r\n\t\tDisplayName: String\r\n\t\tStreamView: String\r\n\t\tIamRoleArn: String\r\n\t\tInstanceType: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tImageArn: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "appstream-fleet"
    },
    "AWS::AppStream::ImageBuilder": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppStream::ImageBuilder\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tVpcConfig:\r\n\t\t\tVpcConfig\r\n\t\tEnableDefaultInternetAccess: Boolean\r\n\t\tDomainJoinInfo:\r\n\t\t\tDomainJoinInfo\r\n\t\tAppstreamAgentVersion: String\r\n\t\tName: String #required\r\n\t\tImageName: String\r\n\t\tDisplayName: String\r\n\t\tIamRoleArn: String\r\n\t\tInstanceType: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tImageArn: String\r\n\t\tAccessEndpoints:\r\n\t\t\t- AccessEndpoint\r\n",
        "description": "Attributes:\r\n  StreamingUrl\r\n",
        "prefix": "appstream-imagebuilder"
    },
    "AWS::AppStream::Stack": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppStream::Stack\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tStorageConnectors:\r\n\t\t\t- StorageConnector\r\n\t\tDeleteStorageConnectors: Boolean\r\n\t\tEmbedHostDomains:\r\n\t\t\t- String\r\n\t\tUserSettings:\r\n\t\t\t- UserSetting\r\n\t\tAttributesToDelete:\r\n\t\t\t- String\r\n\t\tRedirectURL: String\r\n\t\tName: String\r\n\t\tFeedbackURL: String\r\n\t\tApplicationSettings:\r\n\t\t\tApplicationSettings\r\n\t\tDisplayName: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tAccessEndpoints:\r\n\t\t\t- AccessEndpoint\r\n",
        "description": "No Attributes\r\n",
        "prefix": "appstream-stack"
    },
    "AWS::AppStream::StackFleetAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppStream::StackFleetAssociation\"\r\n\tProperties:\r\n\t\tFleetName: String #required\r\n\t\tStackName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "appstream-stackfleetassociation"
    },
    "AWS::AppStream::StackUserAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppStream::StackUserAssociation\"\r\n\tProperties:\r\n\t\tSendEmailNotification: Boolean\r\n\t\tUserName: String #required\r\n\t\tStackName: String #required\r\n\t\tAuthenticationType: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "appstream-stackuserassociation"
    },
    "AWS::AppStream::User": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppStream::User\"\r\n\tProperties:\r\n\t\tUserName: String #required\r\n\t\tFirstName: String\r\n\t\tMessageAction: String\r\n\t\tLastName: String\r\n\t\tAuthenticationType: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "appstream-user"
    },
    "AWS::AppSync::ApiCache": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppSync::ApiCache\"\r\n\tProperties:\r\n\t\tType: String #required\r\n\t\tTransitEncryptionEnabled: Boolean\r\n\t\tAtRestEncryptionEnabled: Boolean\r\n\t\tApiId: String #required\r\n\t\tApiCachingBehavior: String #required\r\n\t\tTtl: Double #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "appsync-apicache"
    },
    "AWS::AppSync::ApiKey": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppSync::ApiKey\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tApiKeyId: String\r\n\t\tExpires: Double\r\n\t\tApiId: String #required\r\n",
        "description": "Attributes:\r\n  ApiKey\r\n  Arn\r\n",
        "prefix": "appsync-apikey"
    },
    "AWS::AppSync::DataSource": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppSync::DataSource\"\r\n\tProperties:\r\n\t\tType: String #required\r\n\t\tDescription: String\r\n\t\tServiceRoleArn: String\r\n\t\tHttpConfig:\r\n\t\t\tHttpConfig\r\n\t\tRelationalDatabaseConfig:\r\n\t\t\tRelationalDatabaseConfig\r\n\t\tLambdaConfig:\r\n\t\t\tLambdaConfig\r\n\t\tApiId: String #required\r\n\t\tName: String #required\r\n\t\tDynamoDBConfig:\r\n\t\t\tDynamoDBConfig\r\n\t\tElasticsearchConfig:\r\n\t\t\tElasticsearchConfig\r\n",
        "description": "Attributes:\r\n  DataSourceArn\r\n  Name\r\n",
        "prefix": "appsync-datasource"
    },
    "AWS::AppSync::FunctionConfiguration": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppSync::FunctionConfiguration\"\r\n\tProperties:\r\n\t\tResponseMappingTemplateS3Location: String\r\n\t\tDescription: String\r\n\t\tDataSourceName: String #required\r\n\t\tRequestMappingTemplate: String\r\n\t\tResponseMappingTemplate: String\r\n\t\tFunctionVersion: String #required\r\n\t\tSyncConfig:\r\n\t\t\tSyncConfig\r\n\t\tRequestMappingTemplateS3Location: String\r\n\t\tApiId: String #required\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  FunctionId\r\n  FunctionArn\r\n  DataSourceName\r\n  Name\r\n",
        "prefix": "appsync-functionconfiguration"
    },
    "AWS::AppSync::GraphQLApi": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppSync::GraphQLApi\"\r\n\tProperties:\r\n\t\tOpenIDConnectConfig:\r\n\t\t\tOpenIDConnectConfig\r\n\t\tXrayEnabled: Boolean\r\n\t\tUserPoolConfig:\r\n\t\t\tUserPoolConfig\r\n\t\tTags:\r\n\t\t\tTags\r\n\t\tName: String #required\r\n\t\tAuthenticationType: String #required\r\n\t\tLogConfig:\r\n\t\t\tLogConfig\r\n\t\tAdditionalAuthenticationProviders:\r\n\t\t\tAdditionalAuthenticationProviders\r\n",
        "description": "Attributes:\r\n  GraphQLUrl\r\n  Arn\r\n  ApiId\r\n",
        "prefix": "appsync-graphqlapi"
    },
    "AWS::AppSync::GraphQLSchema": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppSync::GraphQLSchema\"\r\n\tProperties:\r\n\t\tDefinition: String\r\n\t\tDefinitionS3Location: String\r\n\t\tApiId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "appsync-graphqlschema"
    },
    "AWS::AppSync::Resolver": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AppSync::Resolver\"\r\n\tProperties:\r\n\t\tResponseMappingTemplateS3Location: String\r\n\t\tTypeName: String #required\r\n\t\tPipelineConfig:\r\n\t\t\tPipelineConfig\r\n\t\tDataSourceName: String\r\n\t\tRequestMappingTemplate: String\r\n\t\tResponseMappingTemplate: String\r\n\t\tKind: String\r\n\t\tCachingConfig:\r\n\t\t\tCachingConfig\r\n\t\tSyncConfig:\r\n\t\t\tSyncConfig\r\n\t\tRequestMappingTemplateS3Location: String\r\n\t\tApiId: String #required\r\n\t\tFieldName: String #required\r\n",
        "description": "Attributes:\r\n  TypeName\r\n  ResolverArn\r\n  FieldName\r\n",
        "prefix": "appsync-resolver"
    },
    "AWS::ApplicationAutoScaling::ScalableTarget": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApplicationAutoScaling::ScalableTarget\"\r\n\tProperties:\r\n\t\tMaxCapacity: Integer #required\r\n\t\tMinCapacity: Integer #required\r\n\t\tResourceId: String #required\r\n\t\tRoleARN: String #required\r\n\t\tScalableDimension: String #required\r\n\t\tScheduledActions:\r\n\t\t\t- ScheduledAction\r\n\t\tServiceNamespace: String #required\r\n\t\tSuspendedState:\r\n\t\t\tSuspendedState\r\n",
        "description": "No Attributes\r\n",
        "prefix": "applicationautoscaling-scalabletarget"
    },
    "AWS::ApplicationAutoScaling::ScalingPolicy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApplicationAutoScaling::ScalingPolicy\"\r\n\tProperties:\r\n\t\tPolicyName: String #required\r\n\t\tPolicyType: String #required\r\n\t\tResourceId: String\r\n\t\tScalableDimension: String\r\n\t\tScalingTargetId: String\r\n\t\tServiceNamespace: String\r\n\t\tStepScalingPolicyConfiguration:\r\n\t\t\tStepScalingPolicyConfiguration\r\n\t\tTargetTrackingScalingPolicyConfiguration:\r\n\t\t\tTargetTrackingScalingPolicyConfiguration\r\n",
        "description": "No Attributes\r\n",
        "prefix": "applicationautoscaling-scalingpolicy"
    },
    "AWS::ApplicationInsights::Application": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ApplicationInsights::Application\"\r\n\tProperties:\r\n\t\tResourceGroupName: String #required\r\n\t\tCWEMonitorEnabled: Boolean\r\n\t\tOpsCenterEnabled: Boolean\r\n\t\tOpsItemSNSTopicArn: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tCustomComponents:\r\n\t\t\t- CustomComponent\r\n\t\tLogPatternSets:\r\n\t\t\t- LogPatternSet\r\n\t\tAutoConfigurationEnabled: Boolean\r\n\t\tComponentMonitoringSettings:\r\n\t\t\t- ComponentMonitoringSetting\r\n",
        "description": "Attributes:\r\n  ApplicationARN\r\n",
        "prefix": "applicationinsights-application"
    },
    "AWS::Athena::DataCatalog": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Athena::DataCatalog\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tDescription: String\r\n\t\tParameters:\r\n\t\t\tMap\r\n\t\tTags:\r\n\t\t\tTags\r\n\t\tType: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "athena-datacatalog"
    },
    "AWS::Athena::NamedQuery": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Athena::NamedQuery\"\r\n\tProperties:\r\n\t\tName: String\r\n\t\tDatabase: String #required\r\n\t\tDescription: String\r\n\t\tQueryString: String #required\r\n\t\tWorkGroup: String\r\n",
        "description": "Attributes:\r\n  NamedQueryId\r\n",
        "prefix": "athena-namedquery"
    },
    "AWS::Athena::WorkGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Athena::WorkGroup\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tDescription: String\r\n\t\tTags:\r\n\t\t\tTags\r\n\t\tWorkGroupConfiguration:\r\n\t\t\tWorkGroupConfiguration\r\n\t\tWorkGroupConfigurationUpdates:\r\n\t\t\tWorkGroupConfigurationUpdates\r\n\t\tState: String\r\n\t\tRecursiveDeleteOption: Boolean\r\n",
        "description": "Attributes:\r\n  CreationTime\r\n",
        "prefix": "athena-workgroup"
    },
    "AWS::AutoScaling::AutoScalingGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AutoScaling::AutoScalingGroup\"\r\n\tProperties:\r\n\t\tAutoScalingGroupName: String\r\n\t\tAvailabilityZones:\r\n\t\t\t- String\r\n\t\tCapacityRebalance: Boolean\r\n\t\tCooldown: String\r\n\t\tDesiredCapacity: String\r\n\t\tHealthCheckGracePeriod: Integer\r\n\t\tHealthCheckType: String\r\n\t\tInstanceId: String\r\n\t\tLaunchConfigurationName: String\r\n\t\tLaunchTemplate:\r\n\t\t\tLaunchTemplateSpecification\r\n\t\tLifecycleHookSpecificationList:\r\n\t\t\t- LifecycleHookSpecification\r\n\t\tLoadBalancerNames:\r\n\t\t\t- String\r\n\t\tMaxInstanceLifetime: Integer\r\n\t\tMaxSize: String #required\r\n\t\tMetricsCollection:\r\n\t\t\t- MetricsCollection\r\n\t\tMinSize: String #required\r\n\t\tMixedInstancesPolicy:\r\n\t\t\tMixedInstancesPolicy\r\n\t\tNewInstancesProtectedFromScaleIn: Boolean\r\n\t\tNotificationConfigurations:\r\n\t\t\t- NotificationConfiguration\r\n\t\tPlacementGroup: String\r\n\t\tServiceLinkedRoleARN: String\r\n\t\tTags:\r\n\t\t\t- TagProperty\r\n\t\tTargetGroupARNs:\r\n\t\t\t- String\r\n\t\tTerminationPolicies:\r\n\t\t\t- String\r\n\t\tVPCZoneIdentifier:\r\n\t\t\t- String\r\n",
        "description": "Attributes:\r\n  LaunchConfigurationName\r\n  LaunchTemplateSpecification\r\n  MixedInstancesPolicy\r\n  PlacementGroup\r\n  VPCZoneIdentifier\r\n",
        "prefix": "autoscaling-autoscalinggroup"
    },
    "AWS::AutoScaling::LaunchConfiguration": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AutoScaling::LaunchConfiguration\"\r\n\tProperties:\r\n\t\tAssociatePublicIpAddress: Boolean\r\n\t\tBlockDeviceMappings:\r\n\t\t\t- BlockDeviceMapping\r\n\t\tClassicLinkVPCId: String\r\n\t\tClassicLinkVPCSecurityGroups:\r\n\t\t\t- String\r\n\t\tEbsOptimized: Boolean\r\n\t\tIamInstanceProfile: String\r\n\t\tImageId: String #required\r\n\t\tInstanceId: String\r\n\t\tInstanceMonitoring: Boolean\r\n\t\tInstanceType: String #required\r\n\t\tKernelId: String\r\n\t\tKeyName: String\r\n\t\tLaunchConfigurationName: String\r\n\t\tMetadataOptions:\r\n\t\t\tMetadataOption\r\n\t\tPlacementTenancy: String\r\n\t\tRamDiskId: String\r\n\t\tSecurityGroups:\r\n\t\t\t- String\r\n\t\tSpotPrice: String\r\n\t\tUserData: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "autoscaling-launchconfiguration"
    },
    "AWS::AutoScaling::LifecycleHook": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AutoScaling::LifecycleHook\"\r\n\tProperties:\r\n\t\tAutoScalingGroupName: String #required\r\n\t\tDefaultResult: String\r\n\t\tHeartbeatTimeout: Integer\r\n\t\tLifecycleHookName: String\r\n\t\tLifecycleTransition: String #required\r\n\t\tNotificationMetadata: String\r\n\t\tNotificationTargetARN: String\r\n\t\tRoleARN: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "autoscaling-lifecyclehook"
    },
    "AWS::AutoScaling::ScalingPolicy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AutoScaling::ScalingPolicy\"\r\n\tProperties:\r\n\t\tAdjustmentType: String\r\n\t\tAutoScalingGroupName: String #required\r\n\t\tCooldown: String\r\n\t\tEstimatedInstanceWarmup: Integer\r\n\t\tMetricAggregationType: String\r\n\t\tMinAdjustmentMagnitude: Integer\r\n\t\tPolicyType: String\r\n\t\tScalingAdjustment: Integer\r\n\t\tStepAdjustments:\r\n\t\t\t- StepAdjustment\r\n\t\tTargetTrackingConfiguration:\r\n\t\t\tTargetTrackingConfiguration\r\n",
        "description": "No Attributes\r\n",
        "prefix": "autoscaling-scalingpolicy"
    },
    "AWS::AutoScaling::ScheduledAction": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AutoScaling::ScheduledAction\"\r\n\tProperties:\r\n\t\tAutoScalingGroupName: String #required\r\n\t\tDesiredCapacity: Integer\r\n\t\tEndTime: String\r\n\t\tMaxSize: Integer\r\n\t\tMinSize: Integer\r\n\t\tRecurrence: String\r\n\t\tStartTime: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "autoscaling-scheduledaction"
    },
    "AWS::AutoScalingPlans::ScalingPlan": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::AutoScalingPlans::ScalingPlan\"\r\n\tProperties:\r\n\t\tApplicationSource: #required\r\n\t\t\tApplicationSource\r\n\t\tScalingInstructions: #required\r\n\t\t\t- ScalingInstruction\r\n",
        "description": "Attributes:\r\n  ScalingPlanName\r\n  ScalingPlanVersion\r\n",
        "prefix": "autoscalingplans-scalingplan"
    },
    "AWS::Backup::BackupPlan": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Backup::BackupPlan\"\r\n\tProperties:\r\n\t\tBackupPlan: #required\r\n\t\t\tBackupPlanResourceType\r\n\t\tBackupPlanTags: Json\r\n",
        "description": "Attributes:\r\n  VersionId\r\n  BackupPlanId\r\n  BackupPlanArn\r\n",
        "prefix": "backup-backupplan"
    },
    "AWS::Backup::BackupSelection": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Backup::BackupSelection\"\r\n\tProperties:\r\n\t\tBackupSelection: #required\r\n\t\t\tBackupSelectionResourceType\r\n\t\tBackupPlanId: String #required\r\n",
        "description": "Attributes:\r\n  BackupPlanId\r\n  SelectionId\r\n",
        "prefix": "backup-backupselection"
    },
    "AWS::Backup::BackupVault": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Backup::BackupVault\"\r\n\tProperties:\r\n\t\tBackupVaultTags: Json\r\n\t\tBackupVaultName: String #required\r\n\t\tEncryptionKeyArn: String\r\n\t\tNotifications:\r\n\t\t\tNotificationObjectType\r\n\t\tAccessPolicy: Json\r\n",
        "description": "Attributes:\r\n  BackupVaultName\r\n  BackupVaultArn\r\n",
        "prefix": "backup-backupvault"
    },
    "AWS::Batch::ComputeEnvironment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Batch::ComputeEnvironment\"\r\n\tProperties:\r\n\t\tType: String #required\r\n\t\tServiceRole: String #required\r\n\t\tComputeEnvironmentName: String\r\n\t\tComputeResources:\r\n\t\t\tComputeResources\r\n\t\tState: String\r\n\t\tTags: Json\r\n",
        "description": "No Attributes\r\n",
        "prefix": "batch-computeenvironment"
    },
    "AWS::Batch::JobDefinition": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Batch::JobDefinition\"\r\n\tProperties:\r\n\t\tType: String #required\r\n\t\tParameters: Json\r\n\t\tNodeProperties:\r\n\t\t\tNodeProperties\r\n\t\tTimeout:\r\n\t\t\tTimeout\r\n\t\tContainerProperties:\r\n\t\t\tContainerProperties\r\n\t\tJobDefinitionName: String\r\n\t\tRetryStrategy:\r\n\t\t\tRetryStrategy\r\n\t\tTags: Json\r\n",
        "description": "No Attributes\r\n",
        "prefix": "batch-jobdefinition"
    },
    "AWS::Batch::JobQueue": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Batch::JobQueue\"\r\n\tProperties:\r\n\t\tComputeEnvironmentOrder: #required\r\n\t\t\t- ComputeEnvironmentOrder\r\n\t\tPriority: Integer #required\r\n\t\tState: String\r\n\t\tJobQueueName: String\r\n\t\tTags: Json\r\n",
        "description": "No Attributes\r\n",
        "prefix": "batch-jobqueue"
    },
    "AWS::Budgets::Budget": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Budgets::Budget\"\r\n\tProperties:\r\n\t\tNotificationsWithSubscribers:\r\n\t\t\t- NotificationWithSubscribers\r\n\t\tBudget: #required\r\n\t\t\tBudgetData\r\n",
        "description": "No Attributes\r\n",
        "prefix": "budgets-budget"
    },
    "AWS::CE::CostCategory": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CE::CostCategory\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tRuleVersion: String #required\r\n\t\tRules: String #required\r\n",
        "description": "Attributes:\r\n  Arn\r\n  EffectiveStart\r\n",
        "prefix": "ce-costcategory"
    },
    "AWS::Cassandra::Keyspace": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Cassandra::Keyspace\"\r\n\tProperties:\r\n\t\tKeyspaceName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "cassandra-keyspace"
    },
    "AWS::Cassandra::Table": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Cassandra::Table\"\r\n\tProperties:\r\n\t\tKeyspaceName: String #required\r\n\t\tTableName: String\r\n\t\tRegularColumns:\r\n\t\t\t- Column\r\n\t\tPartitionKeyColumns: #required\r\n\t\t\t- Column\r\n\t\tClusteringKeyColumns:\r\n\t\t\t- ClusteringKeyColumn\r\n\t\tBillingMode:\r\n\t\t\tBillingMode\r\n",
        "description": "No Attributes\r\n",
        "prefix": "cassandra-table"
    },
    "AWS::CertificateManager::Certificate": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CertificateManager::Certificate\"\r\n\tProperties:\r\n\t\tCertificateAuthorityArn: String\r\n\t\tCertificateTransparencyLoggingPreference: String\r\n\t\tDomainName: String #required\r\n\t\tDomainValidationOptions:\r\n\t\t\t- DomainValidationOption\r\n\t\tSubjectAlternativeNames:\r\n\t\t\t- String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tValidationMethod: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "certificatemanager-certificate"
    },
    "AWS::Chatbot::SlackChannelConfiguration": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Chatbot::SlackChannelConfiguration\"\r\n\tProperties:\r\n\t\tSlackWorkspaceId: String #required\r\n\t\tSlackChannelId: String #required\r\n\t\tConfigurationName: String #required\r\n\t\tIamRoleArn: String #required\r\n\t\tSnsTopicArns:\r\n\t\t\t- String\r\n\t\tLoggingLevel: String\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "chatbot-slackchannelconfiguration"
    },
    "AWS::Cloud9::EnvironmentEC2": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Cloud9::EnvironmentEC2\"\r\n\tProperties:\r\n\t\tRepositories:\r\n\t\t\t- Repository\r\n\t\tOwnerArn: String\r\n\t\tDescription: String\r\n\t\tConnectionType: String\r\n\t\tAutomaticStopTimeMinutes: Integer\r\n\t\tSubnetId: String\r\n\t\tInstanceType: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tName: String\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Name\r\n",
        "prefix": "cloud9-environmentec2"
    },
    "AWS::CloudFormation::CustomResource": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudFormation::CustomResource\"\r\n\tProperties:\r\n\t\tServiceToken: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "cloudformation-customresource"
    },
    "AWS::CloudFormation::Macro": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudFormation::Macro\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tFunctionName: String #required\r\n\t\tLogGroupName: String\r\n\t\tLogRoleARN: String\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "cloudformation-macro"
    },
    "AWS::CloudFormation::Stack": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudFormation::Stack\"\r\n\tProperties:\r\n\t\tNotificationARNs:\r\n\t\t\t- String\r\n\t\tParameters:\r\n\t\t\tMap\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTemplateURL: String #required\r\n\t\tTimeoutInMinutes: Integer\r\n",
        "description": "No Attributes\r\n",
        "prefix": "cloudformation-stack"
    },
    "AWS::CloudFormation::StackSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudFormation::StackSet\"\r\n\tProperties:\r\n\t\tStackSetName: String\r\n\t\tAdministrationRoleARN: String\r\n\t\tAutoDeployment:\r\n\t\t\tAutoDeployment\r\n\t\tCapabilities:\r\n\t\t\t- String\r\n\t\tDescription: String\r\n\t\tExecutionRoleName: String\r\n\t\tOperationPreferences:\r\n\t\t\tOperationPreferences\r\n\t\tStackInstancesGroup:\r\n\t\t\t- StackInstances\r\n\t\tParameters:\r\n\t\t\t- Parameter\r\n\t\tPermissionModel: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTemplateBody: String\r\n\t\tTemplateURL: String\r\n",
        "description": "Attributes:\r\n  StackSetId\r\n",
        "prefix": "cloudformation-stackset"
    },
    "AWS::CloudFormation::WaitCondition": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudFormation::WaitCondition\"\r\n\tProperties:\r\n\t\tCount: Integer\r\n\t\tHandle: String\r\n\t\tTimeout: String\r\n",
        "description": "Attributes:\r\n  Data\r\n",
        "prefix": "cloudformation-waitcondition"
    },
    "AWS::CloudFront::CachePolicy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudFront::CachePolicy\"\r\n\tProperties:\r\n\t\tCachePolicyConfig: #required\r\n\t\t\tCachePolicyConfig\r\n",
        "description": "Attributes:\r\n  Id\r\n  LastModifiedTime\r\n",
        "prefix": "cloudfront-cachepolicy"
    },
    "AWS::CloudFront::CloudFrontOriginAccessIdentity": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudFront::CloudFrontOriginAccessIdentity\"\r\n\tProperties:\r\n\t\tCloudFrontOriginAccessIdentityConfig: #required\r\n\t\t\tCloudFrontOriginAccessIdentityConfig\r\n",
        "description": "Attributes:\r\n  S3CanonicalUserId\r\n",
        "prefix": "cloudfront-cloudfrontoriginaccessidentity"
    },
    "AWS::CloudFront::Distribution": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudFront::Distribution\"\r\n\tProperties:\r\n\t\tDistributionConfig: #required\r\n\t\t\tDistributionConfig\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  DomainName\r\n",
        "prefix": "cloudfront-distribution"
    },
    "AWS::CloudFront::KeyGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudFront::KeyGroup\"\r\n\tProperties:\r\n\t\tKeyGroupConfig: #required\r\n\t\t\tKeyGroupConfig\r\n",
        "description": "Attributes:\r\n  Id\r\n  LastModifiedTime\r\n",
        "prefix": "cloudfront-keygroup"
    },
    "AWS::CloudFront::OriginRequestPolicy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudFront::OriginRequestPolicy\"\r\n\tProperties:\r\n\t\tOriginRequestPolicyConfig: #required\r\n\t\t\tOriginRequestPolicyConfig\r\n",
        "description": "Attributes:\r\n  Id\r\n  LastModifiedTime\r\n",
        "prefix": "cloudfront-originrequestpolicy"
    },
    "AWS::CloudFront::PublicKey": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudFront::PublicKey\"\r\n\tProperties:\r\n\t\tPublicKeyConfig: #required\r\n\t\t\tPublicKeyConfig\r\n",
        "description": "Attributes:\r\n  CreatedTime\r\n  Id\r\n",
        "prefix": "cloudfront-publickey"
    },
    "AWS::CloudFront::RealtimeLogConfig": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudFront::RealtimeLogConfig\"\r\n\tProperties:\r\n\t\tEndPoints: #required\r\n\t\t\t- EndPoint\r\n\t\tFields: #required\r\n\t\t\t- String\r\n\t\tName: String #required\r\n\t\tSamplingRate: Double #required\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "cloudfront-realtimelogconfig"
    },
    "AWS::CloudFront::StreamingDistribution": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudFront::StreamingDistribution\"\r\n\tProperties:\r\n\t\tStreamingDistributionConfig: #required\r\n\t\t\tStreamingDistributionConfig\r\n\t\tTags: #required\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  DomainName\r\n",
        "prefix": "cloudfront-streamingdistribution"
    },
    "AWS::CloudTrail::Trail": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudTrail::Trail\"\r\n\tProperties:\r\n\t\tCloudWatchLogsLogGroupArn: String\r\n\t\tCloudWatchLogsRoleArn: String\r\n\t\tEnableLogFileValidation: Boolean\r\n\t\tEventSelectors:\r\n\t\t\t- EventSelector\r\n\t\tIncludeGlobalServiceEvents: Boolean\r\n\t\tIsLogging: Boolean #required\r\n\t\tIsMultiRegionTrail: Boolean\r\n\t\tKMSKeyId: String\r\n\t\tS3BucketName: String #required\r\n\t\tS3KeyPrefix: String\r\n\t\tSnsTopicName: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTrailName: String\r\n",
        "description": "Attributes:\r\n  Arn\r\n  SnsTopicArn\r\n",
        "prefix": "cloudtrail-trail"
    },
    "AWS::CloudWatch::Alarm": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudWatch::Alarm\"\r\n\tProperties:\r\n\t\tActionsEnabled: Boolean\r\n\t\tAlarmActions:\r\n\t\t\t- String\r\n\t\tAlarmDescription: String\r\n\t\tAlarmName: String\r\n\t\tComparisonOperator: String #required\r\n\t\tDatapointsToAlarm: Integer\r\n\t\tDimensions:\r\n\t\t\t- Dimension\r\n\t\tEvaluateLowSampleCountPercentile: String\r\n\t\tEvaluationPeriods: Integer #required\r\n\t\tExtendedStatistic: String\r\n\t\tInsufficientDataActions:\r\n\t\t\t- String\r\n\t\tMetricName: String\r\n\t\tMetrics:\r\n\t\t\t- MetricDataQuery\r\n\t\tNamespace: String\r\n\t\tOKActions:\r\n\t\t\t- String\r\n\t\tPeriod: Integer\r\n\t\tStatistic: String\r\n\t\tThreshold: Double\r\n\t\tThresholdMetricId: String\r\n\t\tTreatMissingData: String\r\n\t\tUnit: String\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "cloudwatch-alarm"
    },
    "AWS::CloudWatch::AnomalyDetector": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudWatch::AnomalyDetector\"\r\n\tProperties:\r\n\t\tMetricName: String #required\r\n\t\tStat: String #required\r\n\t\tConfiguration:\r\n\t\t\tConfiguration\r\n\t\tDimensions:\r\n\t\t\t- Dimension\r\n\t\tNamespace: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "cloudwatch-anomalydetector"
    },
    "AWS::CloudWatch::CompositeAlarm": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudWatch::CompositeAlarm\"\r\n\tProperties:\r\n\t\tAlarmName: String #required\r\n\t\tAlarmRule: String #required\r\n\t\tAlarmDescription: String\r\n\t\tActionsEnabled: Boolean\r\n\t\tOKActions:\r\n\t\t\t- String\r\n\t\tAlarmActions:\r\n\t\t\t- String\r\n\t\tInsufficientDataActions:\r\n\t\t\t- String\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "cloudwatch-compositealarm"
    },
    "AWS::CloudWatch::Dashboard": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudWatch::Dashboard\"\r\n\tProperties:\r\n\t\tDashboardName: String\r\n\t\tDashboardBody: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "cloudwatch-dashboard"
    },
    "AWS::CloudWatch::InsightRule": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudWatch::InsightRule\"\r\n\tProperties:\r\n\t\tRuleState: String #required\r\n\t\tRuleBody: String #required\r\n\t\tRuleName: String #required\r\n\t\tTags:\r\n\t\t\tTags\r\n",
        "description": "Attributes:\r\n  Arn\r\n  RuleName\r\n",
        "prefix": "cloudwatch-insightrule"
    },
    "AWS::CloudWatch::MetricStream": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CloudWatch::MetricStream\"\r\n\tProperties:\r\n\t\tExcludeFilters:\r\n\t\t\t- MetricStreamFilter\r\n\t\tFirehoseArn: String #required\r\n\t\tIncludeFilters:\r\n\t\t\t- MetricStreamFilter\r\n\t\tName: String\r\n\t\tRoleArn: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n  CreationDate\r\n  LastUpdateDate\r\n  State\r\n",
        "prefix": "cloudwatch-metricstream"
    },
    "AWS::CodeArtifact::Domain": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CodeArtifact::Domain\"\r\n\tProperties:\r\n\t\tDomainName: String #required\r\n\t\tPermissionsPolicyDocument: Json\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Name\r\n  Owner\r\n  EncryptionKey\r\n  Arn\r\n",
        "prefix": "codeartifact-domain"
    },
    "AWS::CodeArtifact::Repository": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CodeArtifact::Repository\"\r\n\tProperties:\r\n\t\tRepositoryName: String #required\r\n\t\tDescription: String\r\n\t\tExternalConnections:\r\n\t\t\t- String\r\n\t\tUpstreams:\r\n\t\t\t- String\r\n\t\tPermissionsPolicyDocument: Json\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Name\r\n  DomainName\r\n  DomainOwner\r\n  Arn\r\n",
        "prefix": "codeartifact-repository"
    },
    "AWS::CodeBuild::Project": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CodeBuild::Project\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tVpcConfig:\r\n\t\t\tVpcConfig\r\n\t\tSecondarySources:\r\n\t\t\t- Source\r\n\t\tEncryptionKey: String\r\n\t\tSourceVersion: String\r\n\t\tTriggers:\r\n\t\t\tProjectTriggers\r\n\t\tSecondaryArtifacts:\r\n\t\t\t- Artifacts\r\n\t\tSource: #required\r\n\t\t\tSource\r\n\t\tName: String\r\n\t\tArtifacts: #required\r\n\t\t\tArtifacts\r\n\t\tBadgeEnabled: Boolean\r\n\t\tLogsConfig:\r\n\t\t\tLogsConfig\r\n\t\tServiceRole: String #required\r\n\t\tQueuedTimeoutInMinutes: Integer\r\n\t\tFileSystemLocations:\r\n\t\t\t- ProjectFileSystemLocation\r\n\t\tEnvironment: #required\r\n\t\t\tEnvironment\r\n\t\tSecondarySourceVersions:\r\n\t\t\t- ProjectSourceVersion\r\n\t\tBuildBatchConfig:\r\n\t\t\tProjectBuildBatchConfig\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTimeoutInMinutes: Integer\r\n\t\tCache:\r\n\t\t\tProjectCache\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "codebuild-project"
    },
    "AWS::CodeBuild::ReportGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CodeBuild::ReportGroup\"\r\n\tProperties:\r\n\t\tType: String #required\r\n\t\tExportConfig: #required\r\n\t\t\tReportExportConfig\r\n\t\tDeleteReports: Boolean\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tName: String\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "codebuild-reportgroup"
    },
    "AWS::CodeBuild::SourceCredential": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CodeBuild::SourceCredential\"\r\n\tProperties:\r\n\t\tServerType: String #required\r\n\t\tUsername: String\r\n\t\tToken: String #required\r\n\t\tAuthType: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "codebuild-sourcecredential"
    },
    "AWS::CodeCommit::Repository": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CodeCommit::Repository\"\r\n\tProperties:\r\n\t\tRepositoryName: String #required\r\n\t\tTriggers:\r\n\t\t\t- RepositoryTrigger\r\n\t\tCode:\r\n\t\t\tCode\r\n\t\tRepositoryDescription: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  CloneUrlHttp\r\n  CloneUrlSsh\r\n  Arn\r\n  Name\r\n",
        "prefix": "codecommit-repository"
    },
    "AWS::CodeDeploy::Application": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CodeDeploy::Application\"\r\n\tProperties:\r\n\t\tApplicationName: String\r\n\t\tComputePlatform: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "codedeploy-application"
    },
    "AWS::CodeDeploy::DeploymentConfig": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CodeDeploy::DeploymentConfig\"\r\n\tProperties:\r\n\t\tDeploymentConfigName: String\r\n\t\tMinimumHealthyHosts:\r\n\t\t\tMinimumHealthyHosts\r\n",
        "description": "No Attributes\r\n",
        "prefix": "codedeploy-deploymentconfig"
    },
    "AWS::CodeDeploy::DeploymentGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CodeDeploy::DeploymentGroup\"\r\n\tProperties:\r\n\t\tAlarmConfiguration:\r\n\t\t\tAlarmConfiguration\r\n\t\tApplicationName: String #required\r\n\t\tAutoRollbackConfiguration:\r\n\t\t\tAutoRollbackConfiguration\r\n\t\tAutoScalingGroups:\r\n\t\t\t- String\r\n\t\tDeployment:\r\n\t\t\tDeployment\r\n\t\tDeploymentConfigName: String\r\n\t\tDeploymentGroupName: String\r\n\t\tDeploymentStyle:\r\n\t\t\tDeploymentStyle\r\n\t\tEc2TagFilters:\r\n\t\t\t- EC2TagFilter\r\n\t\tEc2TagSet:\r\n\t\t\tEC2TagSet\r\n\t\tLoadBalancerInfo:\r\n\t\t\tLoadBalancerInfo\r\n\t\tOnPremisesInstanceTagFilters:\r\n\t\t\t- TagFilter\r\n\t\tOnPremisesTagSet:\r\n\t\t\tOnPremisesTagSet\r\n\t\tServiceRoleArn: String #required\r\n\t\tTriggerConfigurations:\r\n\t\t\t- TriggerConfig\r\n",
        "description": "No Attributes\r\n",
        "prefix": "codedeploy-deploymentgroup"
    },
    "AWS::CodeGuruProfiler::ProfilingGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CodeGuruProfiler::ProfilingGroup\"\r\n\tProperties:\r\n\t\tProfilingGroupName: String #required\r\n\t\tComputePlatform: String\r\n\t\tAgentPermissions: Json\r\n\t\tAnomalyDetectionNotificationConfiguration:\r\n\t\t\t- Channel\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "codeguruprofiler-profilinggroup"
    },
    "AWS::CodeGuruReviewer::RepositoryAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CodeGuruReviewer::RepositoryAssociation\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tType: String #required\r\n\t\tOwner: String\r\n\t\tConnectionArn: String\r\n",
        "description": "Attributes:\r\n  AssociationArn\r\n",
        "prefix": "codegurureviewer-repositoryassociation"
    },
    "AWS::CodePipeline::CustomActionType": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CodePipeline::CustomActionType\"\r\n\tProperties:\r\n\t\tCategory: String #required\r\n\t\tConfigurationProperties:\r\n\t\t\t- ConfigurationProperties\r\n\t\tInputArtifactDetails: #required\r\n\t\t\tArtifactDetails\r\n\t\tOutputArtifactDetails: #required\r\n\t\t\tArtifactDetails\r\n\t\tProvider: String #required\r\n\t\tSettings:\r\n\t\t\tSettings\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tVersion: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "codepipeline-customactiontype"
    },
    "AWS::CodePipeline::Pipeline": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CodePipeline::Pipeline\"\r\n\tProperties:\r\n\t\tArtifactStore:\r\n\t\t\tArtifactStore\r\n\t\tArtifactStores:\r\n\t\t\t- ArtifactStoreMap\r\n\t\tDisableInboundStageTransitions:\r\n\t\t\t- StageTransition\r\n\t\tName: String\r\n\t\tRestartExecutionOnUpdate: Boolean\r\n\t\tRoleArn: String #required\r\n\t\tStages: #required\r\n\t\t\t- StageDeclaration\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Version\r\n",
        "prefix": "codepipeline-pipeline"
    },
    "AWS::CodePipeline::Webhook": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CodePipeline::Webhook\"\r\n\tProperties:\r\n\t\tAuthenticationConfiguration: #required\r\n\t\t\tWebhookAuthConfiguration\r\n\t\tFilters: #required\r\n\t\t\t- WebhookFilterRule\r\n\t\tAuthentication: String #required\r\n\t\tTargetPipeline: String #required\r\n\t\tTargetAction: String #required\r\n\t\tName: String\r\n\t\tTargetPipelineVersion: Integer #required\r\n\t\tRegisterWithThirdParty: Boolean\r\n",
        "description": "Attributes:\r\n  Url\r\n",
        "prefix": "codepipeline-webhook"
    },
    "AWS::CodeStar::GitHubRepository": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CodeStar::GitHubRepository\"\r\n\tProperties:\r\n\t\tEnableIssues: Boolean\r\n\t\tConnectionArn: String\r\n\t\tRepositoryName: String #required\r\n\t\tRepositoryAccessToken: String\r\n\t\tRepositoryOwner: String #required\r\n\t\tIsPrivate: Boolean\r\n\t\tCode:\r\n\t\t\tCode\r\n\t\tRepositoryDescription: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "codestar-githubrepository"
    },
    "AWS::CodeStarConnections::Connection": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CodeStarConnections::Connection\"\r\n\tProperties:\r\n\t\tConnectionName: String #required\r\n\t\tProviderType: String\r\n\t\tHostArn: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  ConnectionArn\r\n  ConnectionStatus\r\n  OwnerAccountId\r\n",
        "prefix": "codestarconnections-connection"
    },
    "AWS::CodeStarNotifications::NotificationRule": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::CodeStarNotifications::NotificationRule\"\r\n\tProperties:\r\n\t\tEventTypeIds: #required\r\n\t\t\t- String\r\n\t\tStatus: String\r\n\t\tDetailType: String #required\r\n\t\tResource: String #required\r\n\t\tTargets: #required\r\n\t\t\t- Target\r\n\t\tTags: Json\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "codestarnotifications-notificationrule"
    },
    "AWS::Cognito::IdentityPool": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Cognito::IdentityPool\"\r\n\tProperties:\r\n\t\tPushSync:\r\n\t\t\tPushSync\r\n\t\tCognitoIdentityProviders:\r\n\t\t\t- CognitoIdentityProvider\r\n\t\tCognitoEvents: Json\r\n\t\tDeveloperProviderName: String\r\n\t\tCognitoStreams:\r\n\t\t\tCognitoStreams\r\n\t\tIdentityPoolName: String\r\n\t\tAllowUnauthenticatedIdentities: Boolean #required\r\n\t\tSupportedLoginProviders: Json\r\n\t\tSamlProviderARNs:\r\n\t\t\t- String\r\n\t\tOpenIdConnectProviderARNs:\r\n\t\t\t- String\r\n\t\tAllowClassicFlow: Boolean\r\n",
        "description": "Attributes:\r\n  Name\r\n",
        "prefix": "cognito-identitypool"
    },
    "AWS::Cognito::IdentityPoolRoleAttachment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Cognito::IdentityPoolRoleAttachment\"\r\n\tProperties:\r\n\t\tRoleMappings: Json\r\n\t\tIdentityPoolId: String #required\r\n\t\tRoles: Json\r\n",
        "description": "No Attributes\r\n",
        "prefix": "cognito-identitypoolroleattachment"
    },
    "AWS::Cognito::UserPool": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Cognito::UserPool\"\r\n\tProperties:\r\n\t\tUserPoolTags: Json\r\n\t\tPolicies:\r\n\t\t\tPolicies\r\n\t\tVerificationMessageTemplate:\r\n\t\t\tVerificationMessageTemplate\r\n\t\tMfaConfiguration: String\r\n\t\tSchema:\r\n\t\t\t- SchemaAttribute\r\n\t\tAdminCreateUserConfig:\r\n\t\t\tAdminCreateUserConfig\r\n\t\tSmsAuthenticationMessage: String\r\n\t\tUsernameConfiguration:\r\n\t\t\tUsernameConfiguration\r\n\t\tUserPoolName: String\r\n\t\tSmsVerificationMessage: String\r\n\t\tUserPoolAddOns:\r\n\t\t\tUserPoolAddOns\r\n\t\tEmailConfiguration:\r\n\t\t\tEmailConfiguration\r\n\t\tSmsConfiguration:\r\n\t\t\tSmsConfiguration\r\n\t\tAliasAttributes:\r\n\t\t\t- String\r\n\t\tEnabledMfas:\r\n\t\t\t- String\r\n\t\tEmailVerificationSubject: String\r\n\t\tLambdaConfig:\r\n\t\t\tLambdaConfig\r\n\t\tUsernameAttributes:\r\n\t\t\t- String\r\n\t\tAutoVerifiedAttributes:\r\n\t\t\t- String\r\n\t\tDeviceConfiguration:\r\n\t\t\tDeviceConfiguration\r\n\t\tEmailVerificationMessage: String\r\n\t\tAccountRecoverySetting:\r\n\t\t\tAccountRecoverySetting\r\n",
        "description": "Attributes:\r\n  ProviderName\r\n  ProviderURL\r\n  Arn\r\n",
        "prefix": "cognito-userpool"
    },
    "AWS::Cognito::UserPoolClient": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Cognito::UserPoolClient\"\r\n\tProperties:\r\n\t\tAnalyticsConfiguration:\r\n\t\t\tAnalyticsConfiguration\r\n\t\tGenerateSecret: Boolean\r\n\t\tCallbackURLs:\r\n\t\t\t- String\r\n\t\tIdTokenValidity: Integer\r\n\t\tAllowedOAuthScopes:\r\n\t\t\t- String\r\n\t\tTokenValidityUnits:\r\n\t\t\tTokenValidityUnits\r\n\t\tReadAttributes:\r\n\t\t\t- String\r\n\t\tAllowedOAuthFlowsUserPoolClient: Boolean\r\n\t\tDefaultRedirectURI: String\r\n\t\tSupportedIdentityProviders:\r\n\t\t\t- String\r\n\t\tClientName: String\r\n\t\tUserPoolId: String #required\r\n\t\tAllowedOAuthFlows:\r\n\t\t\t- String\r\n\t\tExplicitAuthFlows:\r\n\t\t\t- String\r\n\t\tLogoutURLs:\r\n\t\t\t- String\r\n\t\tAccessTokenValidity: Integer\r\n\t\tRefreshTokenValidity: Integer\r\n\t\tWriteAttributes:\r\n\t\t\t- String\r\n\t\tPreventUserExistenceErrors: String\r\n",
        "description": "Attributes:\r\n  ClientSecret\r\n  Name\r\n",
        "prefix": "cognito-userpoolclient"
    },
    "AWS::Cognito::UserPoolDomain": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Cognito::UserPoolDomain\"\r\n\tProperties:\r\n\t\tUserPoolId: String #required\r\n\t\tCustomDomainConfig:\r\n\t\t\tCustomDomainConfigType\r\n\t\tDomain: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "cognito-userpooldomain"
    },
    "AWS::Cognito::UserPoolGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Cognito::UserPoolGroup\"\r\n\tProperties:\r\n\t\tGroupName: String\r\n\t\tDescription: String\r\n\t\tUserPoolId: String #required\r\n\t\tPrecedence: Double\r\n\t\tRoleArn: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "cognito-userpoolgroup"
    },
    "AWS::Cognito::UserPoolIdentityProvider": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Cognito::UserPoolIdentityProvider\"\r\n\tProperties:\r\n\t\tProviderName: String #required\r\n\t\tUserPoolId: String #required\r\n\t\tAttributeMapping: Json\r\n\t\tProviderDetails: Json\r\n\t\tProviderType: String #required\r\n\t\tIdpIdentifiers:\r\n\t\t\t- String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "cognito-userpoolidentityprovider"
    },
    "AWS::Cognito::UserPoolResourceServer": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Cognito::UserPoolResourceServer\"\r\n\tProperties:\r\n\t\tUserPoolId: String #required\r\n\t\tIdentifier: String #required\r\n\t\tScopes:\r\n\t\t\t- ResourceServerScopeType\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "cognito-userpoolresourceserver"
    },
    "AWS::Cognito::UserPoolRiskConfigurationAttachment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Cognito::UserPoolRiskConfigurationAttachment\"\r\n\tProperties:\r\n\t\tCompromisedCredentialsRiskConfiguration:\r\n\t\t\tCompromisedCredentialsRiskConfigurationType\r\n\t\tUserPoolId: String #required\r\n\t\tClientId: String #required\r\n\t\tAccountTakeoverRiskConfiguration:\r\n\t\t\tAccountTakeoverRiskConfigurationType\r\n\t\tRiskExceptionConfiguration:\r\n\t\t\tRiskExceptionConfigurationType\r\n",
        "description": "No Attributes\r\n",
        "prefix": "cognito-userpoolriskconfigurationattachment"
    },
    "AWS::Cognito::UserPoolUICustomizationAttachment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Cognito::UserPoolUICustomizationAttachment\"\r\n\tProperties:\r\n\t\tCSS: String\r\n\t\tUserPoolId: String #required\r\n\t\tClientId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "cognito-userpooluicustomizationattachment"
    },
    "AWS::Cognito::UserPoolUser": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Cognito::UserPoolUser\"\r\n\tProperties:\r\n\t\tValidationData:\r\n\t\t\t- AttributeType\r\n\t\tUserPoolId: String #required\r\n\t\tUsername: String\r\n\t\tMessageAction: String\r\n\t\tClientMetadata: Json\r\n\t\tDesiredDeliveryMediums:\r\n\t\t\t- String\r\n\t\tForceAliasCreation: Boolean\r\n\t\tUserAttributes:\r\n\t\t\t- AttributeType\r\n",
        "description": "No Attributes\r\n",
        "prefix": "cognito-userpooluser"
    },
    "AWS::Cognito::UserPoolUserToGroupAttachment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Cognito::UserPoolUserToGroupAttachment\"\r\n\tProperties:\r\n\t\tGroupName: String #required\r\n\t\tUserPoolId: String #required\r\n\t\tUsername: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "cognito-userpoolusertogroupattachment"
    },
    "AWS::Config::AggregationAuthorization": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Config::AggregationAuthorization\"\r\n\tProperties:\r\n\t\tAuthorizedAccountId: String #required\r\n\t\tAuthorizedAwsRegion: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "config-aggregationauthorization"
    },
    "AWS::Config::ConfigRule": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Config::ConfigRule\"\r\n\tProperties:\r\n\t\tConfigRuleName: String\r\n\t\tDescription: String\r\n\t\tInputParameters: Json\r\n\t\tMaximumExecutionFrequency: String\r\n\t\tScope:\r\n\t\t\tScope\r\n\t\tSource: #required\r\n\t\t\tSource\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Compliance.Type\r\n  ConfigRuleId\r\n",
        "prefix": "config-configrule"
    },
    "AWS::Config::ConfigurationAggregator": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Config::ConfigurationAggregator\"\r\n\tProperties:\r\n\t\tAccountAggregationSources:\r\n\t\t\t- AccountAggregationSource\r\n\t\tConfigurationAggregatorName: String #required\r\n\t\tOrganizationAggregationSource:\r\n\t\t\tOrganizationAggregationSource\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "config-configurationaggregator"
    },
    "AWS::Config::ConfigurationRecorder": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Config::ConfigurationRecorder\"\r\n\tProperties:\r\n\t\tName: String\r\n\t\tRecordingGroup:\r\n\t\t\tRecordingGroup\r\n\t\tRoleARN: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "config-configurationrecorder"
    },
    "AWS::Config::ConformancePack": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Config::ConformancePack\"\r\n\tProperties:\r\n\t\tConformancePackName: String #required\r\n\t\tDeliveryS3Bucket: String\r\n\t\tDeliveryS3KeyPrefix: String\r\n\t\tTemplateBody: String\r\n\t\tTemplateS3Uri: String\r\n\t\tConformancePackInputParameters:\r\n\t\t\t- ConformancePackInputParameter\r\n",
        "description": "No Attributes\r\n",
        "prefix": "config-conformancepack"
    },
    "AWS::Config::DeliveryChannel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Config::DeliveryChannel\"\r\n\tProperties:\r\n\t\tConfigSnapshotDeliveryProperties:\r\n\t\t\tConfigSnapshotDeliveryProperties\r\n\t\tName: String\r\n\t\tS3BucketName: String #required\r\n\t\tS3KeyPrefix: String\r\n\t\tSnsTopicARN: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "config-deliverychannel"
    },
    "AWS::Config::OrganizationConfigRule": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Config::OrganizationConfigRule\"\r\n\tProperties:\r\n\t\tOrganizationManagedRuleMetadata:\r\n\t\t\tOrganizationManagedRuleMetadata\r\n\t\tOrganizationConfigRuleName: String #required\r\n\t\tOrganizationCustomRuleMetadata:\r\n\t\t\tOrganizationCustomRuleMetadata\r\n\t\tExcludedAccounts:\r\n\t\t\t- String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "config-organizationconfigrule"
    },
    "AWS::Config::OrganizationConformancePack": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Config::OrganizationConformancePack\"\r\n\tProperties:\r\n\t\tOrganizationConformancePackName: String #required\r\n\t\tTemplateS3Uri: String\r\n\t\tTemplateBody: String\r\n\t\tDeliveryS3Bucket: String\r\n\t\tDeliveryS3KeyPrefix: String\r\n\t\tConformancePackInputParameters:\r\n\t\t\t- ConformancePackInputParameter\r\n\t\tExcludedAccounts:\r\n\t\t\t- String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "config-organizationconformancepack"
    },
    "AWS::Config::RemediationConfiguration": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Config::RemediationConfiguration\"\r\n\tProperties:\r\n\t\tTargetVersion: String\r\n\t\tExecutionControls:\r\n\t\t\tExecutionControls\r\n\t\tParameters: Json\r\n\t\tTargetType: String #required\r\n\t\tConfigRuleName: String #required\r\n\t\tResourceType: String\r\n\t\tRetryAttemptSeconds: Integer\r\n\t\tMaximumAutomaticAttempts: Integer\r\n\t\tTargetId: String #required\r\n\t\tAutomatic: Boolean\r\n",
        "description": "No Attributes\r\n",
        "prefix": "config-remediationconfiguration"
    },
    "AWS::DAX::Cluster": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DAX::Cluster\"\r\n\tProperties:\r\n\t\tSSESpecification:\r\n\t\t\tSSESpecification\r\n\t\tDescription: String\r\n\t\tReplicationFactor: Integer #required\r\n\t\tParameterGroupName: String\r\n\t\tAvailabilityZones:\r\n\t\t\t- String\r\n\t\tIAMRoleARN: String #required\r\n\t\tSubnetGroupName: String\r\n\t\tPreferredMaintenanceWindow: String\r\n\t\tNotificationTopicARN: String\r\n\t\tSecurityGroupIds:\r\n\t\t\t- String\r\n\t\tNodeType: String #required\r\n\t\tClusterName: String\r\n\t\tTags: Json\r\n",
        "description": "Attributes:\r\n  ClusterDiscoveryEndpoint\r\n  Arn\r\n",
        "prefix": "dax-cluster"
    },
    "AWS::DAX::ParameterGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DAX::ParameterGroup\"\r\n\tProperties:\r\n\t\tParameterNameValues: Json\r\n\t\tDescription: String\r\n\t\tParameterGroupName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "dax-parametergroup"
    },
    "AWS::DAX::SubnetGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DAX::SubnetGroup\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tSubnetGroupName: String\r\n\t\tSubnetIds: #required\r\n\t\t\t- String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "dax-subnetgroup"
    },
    "AWS::DLM::LifecyclePolicy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DLM::LifecyclePolicy\"\r\n\tProperties:\r\n\t\tExecutionRoleArn: String\r\n\t\tDescription: String\r\n\t\tState: String\r\n\t\tPolicyDetails:\r\n\t\t\tPolicyDetails\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "dlm-lifecyclepolicy"
    },
    "AWS::DMS::Certificate": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DMS::Certificate\"\r\n\tProperties:\r\n\t\tCertificateIdentifier: String\r\n\t\tCertificatePem: String\r\n\t\tCertificateWallet: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "dms-certificate"
    },
    "AWS::DMS::Endpoint": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DMS::Endpoint\"\r\n\tProperties:\r\n\t\tKmsKeyId: String\r\n\t\tKafkaSettings:\r\n\t\t\tKafkaSettings\r\n\t\tPort: Integer\r\n\t\tDatabaseName: String\r\n\t\tNeptuneSettings:\r\n\t\t\tNeptuneSettings\r\n\t\tElasticsearchSettings:\r\n\t\t\tElasticsearchSettings\r\n\t\tS3Settings:\r\n\t\t\tS3Settings\r\n\t\tEngineName: String #required\r\n\t\tDynamoDbSettings:\r\n\t\t\tDynamoDbSettings\r\n\t\tKinesisSettings:\r\n\t\t\tKinesisSettings\r\n\t\tUsername: String\r\n\t\tSslMode: String\r\n\t\tServerName: String\r\n\t\tExtraConnectionAttributes: String\r\n\t\tEndpointType: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tEndpointIdentifier: String\r\n\t\tPassword: String\r\n\t\tCertificateArn: String\r\n\t\tMongoDbSettings:\r\n\t\t\tMongoDbSettings\r\n",
        "description": "Attributes:\r\n  ExternalId\r\n",
        "prefix": "dms-endpoint"
    },
    "AWS::DMS::EventSubscription": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DMS::EventSubscription\"\r\n\tProperties:\r\n\t\tSourceType: String\r\n\t\tEventCategories:\r\n\t\t\t- String\r\n\t\tEnabled: Boolean\r\n\t\tSubscriptionName: String\r\n\t\tSnsTopicArn: String #required\r\n\t\tSourceIds:\r\n\t\t\t- String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "dms-eventsubscription"
    },
    "AWS::DMS::ReplicationInstance": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DMS::ReplicationInstance\"\r\n\tProperties:\r\n\t\tReplicationInstanceIdentifier: String\r\n\t\tEngineVersion: String\r\n\t\tKmsKeyId: String\r\n\t\tAvailabilityZone: String\r\n\t\tPreferredMaintenanceWindow: String\r\n\t\tAutoMinorVersionUpgrade: Boolean\r\n\t\tReplicationSubnetGroupIdentifier: String\r\n\t\tAllocatedStorage: Integer\r\n\t\tVpcSecurityGroupIds:\r\n\t\t\t- String\r\n\t\tAllowMajorVersionUpgrade: Boolean\r\n\t\tReplicationInstanceClass: String #required\r\n\t\tPubliclyAccessible: Boolean\r\n\t\tMultiAZ: Boolean\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  ReplicationInstancePublicIpAddresses\r\n  ReplicationInstancePrivateIpAddresses\r\n",
        "prefix": "dms-replicationinstance"
    },
    "AWS::DMS::ReplicationSubnetGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DMS::ReplicationSubnetGroup\"\r\n\tProperties:\r\n\t\tReplicationSubnetGroupDescription: String #required\r\n\t\tReplicationSubnetGroupIdentifier: String\r\n\t\tSubnetIds: #required\r\n\t\t\t- String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "dms-replicationsubnetgroup"
    },
    "AWS::DMS::ReplicationTask": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DMS::ReplicationTask\"\r\n\tProperties:\r\n\t\tReplicationTaskSettings: String\r\n\t\tTableMappings: String #required\r\n\t\tCdcStartPosition: String\r\n\t\tReplicationTaskIdentifier: String\r\n\t\tCdcStopPosition: String\r\n\t\tSourceEndpointArn: String #required\r\n\t\tMigrationType: String #required\r\n\t\tTargetEndpointArn: String #required\r\n\t\tReplicationInstanceArn: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTaskData: String\r\n\t\tCdcStartTime: Double\r\n",
        "description": "No Attributes\r\n",
        "prefix": "dms-replicationtask"
    },
    "AWS::DataBrew::Dataset": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DataBrew::Dataset\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tFormatOptions: Json\r\n\t\tInput: Json #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "databrew-dataset"
    },
    "AWS::DataBrew::Job": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DataBrew::Job\"\r\n\tProperties:\r\n\t\tDatasetName: String\r\n\t\tEncryptionKeyArn: String\r\n\t\tEncryptionMode: String\r\n\t\tName: String #required\r\n\t\tType: String #required\r\n\t\tLogSubscription: String\r\n\t\tMaxCapacity: Integer\r\n\t\tMaxRetries: Integer\r\n\t\tOutputs:\r\n\t\t\t- Output\r\n\t\tOutputLocation: Json\r\n\t\tProjectName: String\r\n\t\tRecipe: Json\r\n\t\tRoleArn: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTimeout: Integer\r\n",
        "description": "No Attributes\r\n",
        "prefix": "databrew-job"
    },
    "AWS::DataBrew::Project": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DataBrew::Project\"\r\n\tProperties:\r\n\t\tDatasetName: String #required\r\n\t\tName: String #required\r\n\t\tRecipeName: String #required\r\n\t\tRoleArn: String #required\r\n\t\tSample: Json\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "databrew-project"
    },
    "AWS::DataBrew::Recipe": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DataBrew::Recipe\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tName: String #required\r\n\t\tSteps: #required\r\n\t\t\t- RecipeStep\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "databrew-recipe"
    },
    "AWS::DataBrew::Schedule": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DataBrew::Schedule\"\r\n\tProperties:\r\n\t\tJobNames:\r\n\t\t\t- String\r\n\t\tCronExpression: String #required\r\n\t\tName: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "databrew-schedule"
    },
    "AWS::DataPipeline::Pipeline": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DataPipeline::Pipeline\"\r\n\tProperties:\r\n\t\tActivate: Boolean\r\n\t\tDescription: String\r\n\t\tName: String #required\r\n\t\tParameterObjects: #required\r\n\t\t\t- ParameterObject\r\n\t\tParameterValues:\r\n\t\t\t- ParameterValue\r\n\t\tPipelineObjects:\r\n\t\t\t- PipelineObject\r\n\t\tPipelineTags:\r\n\t\t\t- PipelineTag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "datapipeline-pipeline"
    },
    "AWS::Detective::MemberInvitation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Detective::MemberInvitation\"\r\n\tProperties:\r\n\t\tGraphArn: String #required\r\n\t\tMemberId: String #required\r\n\t\tMemberEmailAddress: String #required\r\n\t\tMessage: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "detective-memberinvitation"
    },
    "AWS::DirectoryService::MicrosoftAD": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DirectoryService::MicrosoftAD\"\r\n\tProperties:\r\n\t\tCreateAlias: Boolean\r\n\t\tEdition: String\r\n\t\tEnableSso: Boolean\r\n\t\tName: String #required\r\n\t\tPassword: String #required\r\n\t\tShortName: String\r\n\t\tVpcSettings: #required\r\n\t\t\tVpcSettings\r\n",
        "description": "Attributes:\r\n  Alias\r\n  DnsIpAddresses\r\n",
        "prefix": "directoryservice-microsoftad"
    },
    "AWS::DirectoryService::SimpleAD": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DirectoryService::SimpleAD\"\r\n\tProperties:\r\n\t\tCreateAlias: Boolean\r\n\t\tDescription: String\r\n\t\tEnableSso: Boolean\r\n\t\tName: String #required\r\n\t\tPassword: String #required\r\n\t\tShortName: String\r\n\t\tSize: String #required\r\n\t\tVpcSettings: #required\r\n\t\t\tVpcSettings\r\n",
        "description": "Attributes:\r\n  Alias\r\n  DnsIpAddresses\r\n",
        "prefix": "directoryservice-simplead"
    },
    "AWS::DocDB::DBCluster": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DocDB::DBCluster\"\r\n\tProperties:\r\n\t\tStorageEncrypted: Boolean\r\n\t\tEngineVersion: String\r\n\t\tKmsKeyId: String\r\n\t\tAvailabilityZones:\r\n\t\t\t- String\r\n\t\tSnapshotIdentifier: String\r\n\t\tPort: Integer\r\n\t\tDBClusterIdentifier: String\r\n\t\tPreferredMaintenanceWindow: String\r\n\t\tDBSubnetGroupName: String\r\n\t\tDeletionProtection: Boolean\r\n\t\tPreferredBackupWindow: String\r\n\t\tMasterUserPassword: String #required\r\n\t\tVpcSecurityGroupIds:\r\n\t\t\t- String\r\n\t\tMasterUsername: String #required\r\n\t\tDBClusterParameterGroupName: String\r\n\t\tBackupRetentionPeriod: Integer\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tEnableCloudwatchLogsExports:\r\n\t\t\t- String\r\n",
        "description": "Attributes:\r\n  ClusterResourceId\r\n  Endpoint\r\n  Port\r\n  ReadEndpoint\r\n",
        "prefix": "docdb-dbcluster"
    },
    "AWS::DocDB::DBClusterParameterGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DocDB::DBClusterParameterGroup\"\r\n\tProperties:\r\n\t\tDescription: String #required\r\n\t\tParameters: Json #required\r\n\t\tFamily: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "docdb-dbclusterparametergroup"
    },
    "AWS::DocDB::DBInstance": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DocDB::DBInstance\"\r\n\tProperties:\r\n\t\tDBInstanceClass: String #required\r\n\t\tDBClusterIdentifier: String #required\r\n\t\tAvailabilityZone: String\r\n\t\tPreferredMaintenanceWindow: String\r\n\t\tAutoMinorVersionUpgrade: Boolean\r\n\t\tDBInstanceIdentifier: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Endpoint\r\n  Port\r\n",
        "prefix": "docdb-dbinstance"
    },
    "AWS::DocDB::DBSubnetGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DocDB::DBSubnetGroup\"\r\n\tProperties:\r\n\t\tDBSubnetGroupName: String\r\n\t\tDBSubnetGroupDescription: String #required\r\n\t\tSubnetIds: #required\r\n\t\t\t- String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "docdb-dbsubnetgroup"
    },
    "AWS::DynamoDB::Table": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::DynamoDB::Table\"\r\n\tProperties:\r\n\t\tAttributeDefinitions:\r\n\t\t\t- AttributeDefinition\r\n\t\tBillingMode: String\r\n\t\tGlobalSecondaryIndexes:\r\n\t\t\t- GlobalSecondaryIndex\r\n\t\tKeySchema: #required\r\n\t\t\t- KeySchema\r\n\t\tLocalSecondaryIndexes:\r\n\t\t\t- LocalSecondaryIndex\r\n\t\tPointInTimeRecoverySpecification:\r\n\t\t\tPointInTimeRecoverySpecification\r\n\t\tProvisionedThroughput:\r\n\t\t\tProvisionedThroughput\r\n\t\tSSESpecification:\r\n\t\t\tSSESpecification\r\n\t\tStreamSpecification:\r\n\t\t\tStreamSpecification\r\n\t\tTableName: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTimeToLiveSpecification:\r\n\t\t\tTimeToLiveSpecification\r\n",
        "description": "Attributes:\r\n  Arn\r\n  StreamArn\r\n",
        "prefix": "dynamodb-table"
    },
    "AWS::EC2::CapacityReservation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::CapacityReservation\"\r\n\tProperties:\r\n\t\tTenancy: String\r\n\t\tEndDateType: String\r\n\t\tInstanceCount: Integer #required\r\n\t\tTagSpecifications:\r\n\t\t\t- TagSpecification\r\n\t\tAvailabilityZone: String #required\r\n\t\tInstancePlatform: String #required\r\n\t\tInstanceType: String #required\r\n\t\tEphemeralStorage: Boolean\r\n\t\tInstanceMatchCriteria: String\r\n\t\tEndDate: String\r\n\t\tEbsOptimized: Boolean\r\n",
        "description": "Attributes:\r\n  Tenancy\r\n  AvailableInstanceCount\r\n  AvailabilityZone\r\n  TotalInstanceCount\r\n  InstanceType\r\n",
        "prefix": "ec2-capacityreservation"
    },
    "AWS::EC2::CarrierGateway": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::CarrierGateway\"\r\n\tProperties:\r\n\t\tVpcId: String #required\r\n\t\tTags:\r\n\t\t\tTags\r\n",
        "description": "Attributes:\r\n  CarrierGatewayId\r\n  State\r\n  OwnerId\r\n",
        "prefix": "ec2-carriergateway"
    },
    "AWS::EC2::ClientVpnAuthorizationRule": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::ClientVpnAuthorizationRule\"\r\n\tProperties:\r\n\t\tClientVpnEndpointId: String #required\r\n\t\tDescription: String\r\n\t\tAccessGroupId: String\r\n\t\tTargetNetworkCidr: String #required\r\n\t\tAuthorizeAllGroups: Boolean\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-clientvpnauthorizationrule"
    },
    "AWS::EC2::ClientVpnEndpoint": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::ClientVpnEndpoint\"\r\n\tProperties:\r\n\t\tClientCidrBlock: String #required\r\n\t\tClientConnectOptions:\r\n\t\t\tClientConnectOptions\r\n\t\tDescription: String\r\n\t\tTagSpecifications:\r\n\t\t\t- TagSpecification\r\n\t\tAuthenticationOptions: #required\r\n\t\t\t- ClientAuthenticationRequest\r\n\t\tServerCertificateArn: String #required\r\n\t\tDnsServers:\r\n\t\t\t- String\r\n\t\tSecurityGroupIds:\r\n\t\t\t- String\r\n\t\tConnectionLogOptions: #required\r\n\t\t\tConnectionLogOptions\r\n\t\tSplitTunnel: Boolean\r\n\t\tVpcId: String\r\n\t\tSelfServicePortal: String\r\n\t\tTransportProtocol: String\r\n\t\tVpnPort: Integer\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-clientvpnendpoint"
    },
    "AWS::EC2::ClientVpnRoute": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::ClientVpnRoute\"\r\n\tProperties:\r\n\t\tClientVpnEndpointId: String #required\r\n\t\tTargetVpcSubnetId: String #required\r\n\t\tDescription: String\r\n\t\tDestinationCidrBlock: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-clientvpnroute"
    },
    "AWS::EC2::ClientVpnTargetNetworkAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::ClientVpnTargetNetworkAssociation\"\r\n\tProperties:\r\n\t\tClientVpnEndpointId: String #required\r\n\t\tSubnetId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-clientvpntargetnetworkassociation"
    },
    "AWS::EC2::CustomerGateway": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::CustomerGateway\"\r\n\tProperties:\r\n\t\tBgpAsn: Integer #required\r\n\t\tIpAddress: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tType: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-customergateway"
    },
    "AWS::EC2::DHCPOptions": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::DHCPOptions\"\r\n\tProperties:\r\n\t\tDomainName: String\r\n\t\tDomainNameServers:\r\n\t\t\t- String\r\n\t\tNetbiosNameServers:\r\n\t\t\t- String\r\n\t\tNetbiosNodeType: Integer\r\n\t\tNtpServers:\r\n\t\t\t- String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-dhcpoptions"
    },
    "AWS::EC2::EC2Fleet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::EC2Fleet\"\r\n\tProperties:\r\n\t\tTargetCapacitySpecification: #required\r\n\t\t\tTargetCapacitySpecificationRequest\r\n\t\tOnDemandOptions:\r\n\t\t\tOnDemandOptionsRequest\r\n\t\tType: String\r\n\t\tExcessCapacityTerminationPolicy: String\r\n\t\tTagSpecifications:\r\n\t\t\t- TagSpecification\r\n\t\tSpotOptions:\r\n\t\t\tSpotOptionsRequest\r\n\t\tValidFrom: String\r\n\t\tReplaceUnhealthyInstances: Boolean\r\n\t\tLaunchTemplateConfigs: #required\r\n\t\t\t- FleetLaunchTemplateConfigRequest\r\n\t\tTerminateInstancesWithExpiration: Boolean\r\n\t\tValidUntil: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-ec2fleet"
    },
    "AWS::EC2::EIP": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::EIP\"\r\n\tProperties:\r\n\t\tDomain: String\r\n\t\tInstanceId: String\r\n\t\tPublicIpv4Pool: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  AllocationId\r\n",
        "prefix": "ec2-eip"
    },
    "AWS::EC2::EIPAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::EIPAssociation\"\r\n\tProperties:\r\n\t\tAllocationId: String\r\n\t\tEIP: String\r\n\t\tInstanceId: String\r\n\t\tNetworkInterfaceId: String\r\n\t\tPrivateIpAddress: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-eipassociation"
    },
    "AWS::EC2::EgressOnlyInternetGateway": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::EgressOnlyInternetGateway\"\r\n\tProperties:\r\n\t\tVpcId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-egressonlyinternetgateway"
    },
    "AWS::EC2::FlowLog": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::FlowLog\"\r\n\tProperties:\r\n\t\tDeliverLogsPermissionArn: String\r\n\t\tLogDestination: String\r\n\t\tLogDestinationType: String\r\n\t\tLogFormat: String\r\n\t\tLogGroupName: String\r\n\t\tMaxAggregationInterval: Integer\r\n\t\tResourceId: String #required\r\n\t\tResourceType: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTrafficType: String #required\r\n",
        "description": "Attributes:\r\n  Id\r\n",
        "prefix": "ec2-flowlog"
    },
    "AWS::EC2::GatewayRouteTableAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::GatewayRouteTableAssociation\"\r\n\tProperties:\r\n\t\tRouteTableId: String #required\r\n\t\tGatewayId: String #required\r\n",
        "description": "Attributes:\r\n  AssociationId\r\n",
        "prefix": "ec2-gatewayroutetableassociation"
    },
    "AWS::EC2::Host": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::Host\"\r\n\tProperties:\r\n\t\tAutoPlacement: String\r\n\t\tAvailabilityZone: String #required\r\n\t\tHostRecovery: String\r\n\t\tInstanceType: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-host"
    },
    "AWS::EC2::Instance": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::Instance\"\r\n\tProperties:\r\n\t\tAdditionalInfo: String\r\n\t\tAffinity: String\r\n\t\tAvailabilityZone: String\r\n\t\tBlockDeviceMappings:\r\n\t\t\t- BlockDeviceMapping\r\n\t\tCpuOptions:\r\n\t\t\tCpuOptions\r\n\t\tCreditSpecification:\r\n\t\t\tCreditSpecification\r\n\t\tDisableApiTermination: Boolean\r\n\t\tEbsOptimized: Boolean\r\n\t\tElasticGpuSpecifications:\r\n\t\t\t- ElasticGpuSpecification\r\n\t\tElasticInferenceAccelerators:\r\n\t\t\t- ElasticInferenceAccelerator\r\n\t\tHibernationOptions:\r\n\t\t\tHibernationOptions\r\n\t\tHostId: String\r\n\t\tHostResourceGroupArn: String\r\n\t\tIamInstanceProfile: String\r\n\t\tImageId: String\r\n\t\tInstanceInitiatedShutdownBehavior: String\r\n\t\tInstanceType: String\r\n\t\tIpv6AddressCount: Integer\r\n\t\tIpv6Addresses:\r\n\t\t\t- InstanceIpv6Address\r\n\t\tKernelId: String\r\n\t\tKeyName: String\r\n\t\tLaunchTemplate:\r\n\t\t\tLaunchTemplateSpecification\r\n\t\tLicenseSpecifications:\r\n\t\t\t- LicenseSpecification\r\n\t\tMonitoring: Boolean\r\n\t\tNetworkInterfaces:\r\n\t\t\t- NetworkInterface\r\n\t\tPlacementGroupName: String\r\n\t\tPrivateIpAddress: String\r\n\t\tRamdiskId: String\r\n\t\tSecurityGroupIds:\r\n\t\t\t- String\r\n\t\tSecurityGroups:\r\n\t\t\t- String\r\n\t\tSourceDestCheck: Boolean\r\n\t\tSsmAssociations:\r\n\t\t\t- SsmAssociation\r\n\t\tSubnetId: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTenancy: String\r\n\t\tUserData: String\r\n\t\tVolumes:\r\n\t\t\t- Volume\r\n",
        "description": "Attributes:\r\n  AvailabilityZone\r\n  PrivateDnsName\r\n  PrivateIp\r\n  PublicDnsName\r\n  PublicIp\r\n",
        "prefix": "ec2-instance"
    },
    "AWS::EC2::InternetGateway": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::InternetGateway\"\r\n\tProperties:\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-internetgateway"
    },
    "AWS::EC2::LaunchTemplate": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::LaunchTemplate\"\r\n\tProperties:\r\n\t\tLaunchTemplateName: String\r\n\t\tLaunchTemplateData:\r\n\t\t\tLaunchTemplateData\r\n",
        "description": "Attributes:\r\n  LatestVersionNumber\r\n  DefaultVersionNumber\r\n",
        "prefix": "ec2-launchtemplate"
    },
    "AWS::EC2::LocalGatewayRoute": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::LocalGatewayRoute\"\r\n\tProperties:\r\n\t\tDestinationCidrBlock: String #required\r\n\t\tLocalGatewayRouteTableId: String #required\r\n\t\tLocalGatewayVirtualInterfaceGroupId: String #required\r\n",
        "description": "Attributes:\r\n  State\r\n  Type\r\n",
        "prefix": "ec2-localgatewayroute"
    },
    "AWS::EC2::LocalGatewayRouteTableVPCAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::LocalGatewayRouteTableVPCAssociation\"\r\n\tProperties:\r\n\t\tLocalGatewayRouteTableId: String #required\r\n\t\tVpcId: String #required\r\n\t\tTags:\r\n\t\t\tTags\r\n",
        "description": "Attributes:\r\n  LocalGatewayId\r\n  LocalGatewayRouteTableVpcAssociationId\r\n  State\r\n",
        "prefix": "ec2-localgatewayroutetablevpcassociation"
    },
    "AWS::EC2::NatGateway": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::NatGateway\"\r\n\tProperties:\r\n\t\tAllocationId: String #required\r\n\t\tSubnetId: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-natgateway"
    },
    "AWS::EC2::NetworkAcl": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::NetworkAcl\"\r\n\tProperties:\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tVpcId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-networkacl"
    },
    "AWS::EC2::NetworkAclEntry": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::NetworkAclEntry\"\r\n\tProperties:\r\n\t\tCidrBlock: String\r\n\t\tEgress: Boolean\r\n\t\tIcmp:\r\n\t\t\tIcmp\r\n\t\tIpv6CidrBlock: String\r\n\t\tNetworkAclId: String #required\r\n\t\tPortRange:\r\n\t\t\tPortRange\r\n\t\tProtocol: Integer #required\r\n\t\tRuleAction: String #required\r\n\t\tRuleNumber: Integer #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-networkaclentry"
    },
    "AWS::EC2::NetworkInterface": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::NetworkInterface\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tGroupSet:\r\n\t\t\t- String\r\n\t\tInterfaceType: String\r\n\t\tIpv6AddressCount: Integer\r\n\t\tIpv6Addresses:\r\n\t\t\t- InstanceIpv6Address\r\n\t\tPrivateIpAddress: String\r\n\t\tPrivateIpAddresses:\r\n\t\t\t- PrivateIpAddressSpecification\r\n\t\tSecondaryPrivateIpAddressCount: Integer\r\n\t\tSourceDestCheck: Boolean\r\n\t\tSubnetId: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  PrimaryPrivateIpAddress\r\n  SecondaryPrivateIpAddresses\r\n",
        "prefix": "ec2-networkinterface"
    },
    "AWS::EC2::NetworkInterfaceAttachment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::NetworkInterfaceAttachment\"\r\n\tProperties:\r\n\t\tDeleteOnTermination: Boolean\r\n\t\tDeviceIndex: String #required\r\n\t\tInstanceId: String #required\r\n\t\tNetworkInterfaceId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-networkinterfaceattachment"
    },
    "AWS::EC2::NetworkInterfacePermission": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::NetworkInterfacePermission\"\r\n\tProperties:\r\n\t\tAwsAccountId: String #required\r\n\t\tNetworkInterfaceId: String #required\r\n\t\tPermission: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-networkinterfacepermission"
    },
    "AWS::EC2::PlacementGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::PlacementGroup\"\r\n\tProperties:\r\n\t\tStrategy: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-placementgroup"
    },
    "AWS::EC2::PrefixList": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::PrefixList\"\r\n\tProperties:\r\n\t\tPrefixListName: String #required\r\n\t\tAddressFamily: String #required\r\n\t\tMaxEntries: Integer #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tEntries:\r\n\t\t\t- Entry\r\n",
        "description": "Attributes:\r\n  PrefixListId\r\n  OwnerId\r\n  Version\r\n  Arn\r\n",
        "prefix": "ec2-prefixlist"
    },
    "AWS::EC2::Route": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::Route\"\r\n\tProperties:\r\n\t\tCarrierGatewayId: String\r\n\t\tDestinationCidrBlock: String\r\n\t\tDestinationIpv6CidrBlock: String\r\n\t\tEgressOnlyInternetGatewayId: String\r\n\t\tGatewayId: String\r\n\t\tInstanceId: String\r\n\t\tLocalGatewayId: String\r\n\t\tNatGatewayId: String\r\n\t\tNetworkInterfaceId: String\r\n\t\tRouteTableId: String #required\r\n\t\tTransitGatewayId: String\r\n\t\tVpcEndpointId: String\r\n\t\tVpcPeeringConnectionId: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-route"
    },
    "AWS::EC2::RouteTable": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::RouteTable\"\r\n\tProperties:\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tVpcId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-routetable"
    },
    "AWS::EC2::SecurityGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::SecurityGroup\"\r\n\tProperties:\r\n\t\tGroupDescription: String #required\r\n\t\tGroupName: String\r\n\t\tSecurityGroupEgress:\r\n\t\t\t- Egress\r\n\t\tSecurityGroupIngress:\r\n\t\t\t- Ingress\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tVpcId: String\r\n",
        "description": "Attributes:\r\n  GroupId\r\n  VpcId\r\n",
        "prefix": "ec2-securitygroup"
    },
    "AWS::EC2::SecurityGroupEgress": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::SecurityGroupEgress\"\r\n\tProperties:\r\n\t\tCidrIp: String\r\n\t\tCidrIpv6: String\r\n\t\tDescription: String\r\n\t\tDestinationPrefixListId: String\r\n\t\tDestinationSecurityGroupId: String\r\n\t\tFromPort: Integer\r\n\t\tGroupId: String #required\r\n\t\tIpProtocol: String #required\r\n\t\tToPort: Integer\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-securitygroupegress"
    },
    "AWS::EC2::SecurityGroupIngress": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::SecurityGroupIngress\"\r\n\tProperties:\r\n\t\tCidrIp: String\r\n\t\tCidrIpv6: String\r\n\t\tDescription: String\r\n\t\tFromPort: Integer\r\n\t\tGroupId: String\r\n\t\tGroupName: String\r\n\t\tIpProtocol: String #required\r\n\t\tSourcePrefixListId: String\r\n\t\tSourceSecurityGroupId: String\r\n\t\tSourceSecurityGroupName: String\r\n\t\tSourceSecurityGroupOwnerId: String\r\n\t\tToPort: Integer\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-securitygroupingress"
    },
    "AWS::EC2::SpotFleet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::SpotFleet\"\r\n\tProperties:\r\n\t\tSpotFleetRequestConfigData: #required\r\n\t\t\tSpotFleetRequestConfigData\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-spotfleet"
    },
    "AWS::EC2::Subnet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::Subnet\"\r\n\tProperties:\r\n\t\tAssignIpv6AddressOnCreation: Boolean\r\n\t\tAvailabilityZone: String\r\n\t\tCidrBlock: String #required\r\n\t\tIpv6CidrBlock: String\r\n\t\tMapPublicIpOnLaunch: Boolean\r\n\t\tOutpostArn: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tVpcId: String #required\r\n",
        "description": "Attributes:\r\n  AvailabilityZone\r\n  Ipv6CidrBlocks\r\n  NetworkAclAssociationId\r\n  OutpostArn\r\n  VpcId\r\n",
        "prefix": "ec2-subnet"
    },
    "AWS::EC2::SubnetCidrBlock": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::SubnetCidrBlock\"\r\n\tProperties:\r\n\t\tIpv6CidrBlock: String #required\r\n\t\tSubnetId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-subnetcidrblock"
    },
    "AWS::EC2::SubnetNetworkAclAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::SubnetNetworkAclAssociation\"\r\n\tProperties:\r\n\t\tNetworkAclId: String #required\r\n\t\tSubnetId: String #required\r\n",
        "description": "Attributes:\r\n  AssociationId\r\n",
        "prefix": "ec2-subnetnetworkaclassociation"
    },
    "AWS::EC2::SubnetRouteTableAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::SubnetRouteTableAssociation\"\r\n\tProperties:\r\n\t\tRouteTableId: String #required\r\n\t\tSubnetId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-subnetroutetableassociation"
    },
    "AWS::EC2::TrafficMirrorFilter": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::TrafficMirrorFilter\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tNetworkServices:\r\n\t\t\t- String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-trafficmirrorfilter"
    },
    "AWS::EC2::TrafficMirrorFilterRule": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::TrafficMirrorFilterRule\"\r\n\tProperties:\r\n\t\tDestinationPortRange:\r\n\t\t\tTrafficMirrorPortRange\r\n\t\tDescription: String\r\n\t\tSourcePortRange:\r\n\t\t\tTrafficMirrorPortRange\r\n\t\tRuleAction: String #required\r\n\t\tSourceCidrBlock: String #required\r\n\t\tRuleNumber: Integer #required\r\n\t\tDestinationCidrBlock: String #required\r\n\t\tTrafficMirrorFilterId: String #required\r\n\t\tTrafficDirection: String #required\r\n\t\tProtocol: Integer\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-trafficmirrorfilterrule"
    },
    "AWS::EC2::TrafficMirrorSession": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::TrafficMirrorSession\"\r\n\tProperties:\r\n\t\tTrafficMirrorTargetId: String #required\r\n\t\tDescription: String\r\n\t\tSessionNumber: Integer #required\r\n\t\tVirtualNetworkId: Integer\r\n\t\tPacketLength: Integer\r\n\t\tNetworkInterfaceId: String #required\r\n\t\tTrafficMirrorFilterId: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-trafficmirrorsession"
    },
    "AWS::EC2::TrafficMirrorTarget": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::TrafficMirrorTarget\"\r\n\tProperties:\r\n\t\tNetworkLoadBalancerArn: String\r\n\t\tDescription: String\r\n\t\tNetworkInterfaceId: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-trafficmirrortarget"
    },
    "AWS::EC2::TransitGateway": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::TransitGateway\"\r\n\tProperties:\r\n\t\tDefaultRouteTablePropagation: String\r\n\t\tDescription: String\r\n\t\tAutoAcceptSharedAttachments: String\r\n\t\tDefaultRouteTableAssociation: String\r\n\t\tVpnEcmpSupport: String\r\n\t\tDnsSupport: String\r\n\t\tMulticastSupport: String\r\n\t\tAmazonSideAsn: Integer\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-transitgateway"
    },
    "AWS::EC2::TransitGatewayAttachment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::TransitGatewayAttachment\"\r\n\tProperties:\r\n\t\tTransitGatewayId: String #required\r\n\t\tVpcId: String #required\r\n\t\tSubnetIds: #required\r\n\t\t\t- String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-transitgatewayattachment"
    },
    "AWS::EC2::TransitGatewayRoute": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::TransitGatewayRoute\"\r\n\tProperties:\r\n\t\tTransitGatewayRouteTableId: String #required\r\n\t\tDestinationCidrBlock: String\r\n\t\tBlackhole: Boolean\r\n\t\tTransitGatewayAttachmentId: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-transitgatewayroute"
    },
    "AWS::EC2::TransitGatewayRouteTable": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::TransitGatewayRouteTable\"\r\n\tProperties:\r\n\t\tTransitGatewayId: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-transitgatewayroutetable"
    },
    "AWS::EC2::TransitGatewayRouteTableAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::TransitGatewayRouteTableAssociation\"\r\n\tProperties:\r\n\t\tTransitGatewayRouteTableId: String #required\r\n\t\tTransitGatewayAttachmentId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-transitgatewayroutetableassociation"
    },
    "AWS::EC2::TransitGatewayRouteTablePropagation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::TransitGatewayRouteTablePropagation\"\r\n\tProperties:\r\n\t\tTransitGatewayRouteTableId: String #required\r\n\t\tTransitGatewayAttachmentId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-transitgatewayroutetablepropagation"
    },
    "AWS::EC2::VPC": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::VPC\"\r\n\tProperties:\r\n\t\tCidrBlock: String #required\r\n\t\tEnableDnsHostnames: Boolean\r\n\t\tEnableDnsSupport: Boolean\r\n\t\tInstanceTenancy: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  CidrBlock\r\n  CidrBlockAssociations\r\n  DefaultNetworkAcl\r\n  DefaultSecurityGroup\r\n  Ipv6CidrBlocks\r\n",
        "prefix": "ec2-vpc"
    },
    "AWS::EC2::VPCCidrBlock": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::VPCCidrBlock\"\r\n\tProperties:\r\n\t\tAmazonProvidedIpv6CidrBlock: Boolean\r\n\t\tCidrBlock: String\r\n\t\tVpcId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-vpccidrblock"
    },
    "AWS::EC2::VPCDHCPOptionsAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::VPCDHCPOptionsAssociation\"\r\n\tProperties:\r\n\t\tDhcpOptionsId: String #required\r\n\t\tVpcId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-vpcdhcpoptionsassociation"
    },
    "AWS::EC2::VPCEndpoint": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::VPCEndpoint\"\r\n\tProperties:\r\n\t\tPolicyDocument: Json\r\n\t\tPrivateDnsEnabled: Boolean\r\n\t\tRouteTableIds:\r\n\t\t\t- String\r\n\t\tSecurityGroupIds:\r\n\t\t\t- String\r\n\t\tServiceName: String #required\r\n\t\tSubnetIds:\r\n\t\t\t- String\r\n\t\tVpcEndpointType: String\r\n\t\tVpcId: String #required\r\n",
        "description": "Attributes:\r\n  CreationTimestamp\r\n  DnsEntries\r\n  NetworkInterfaceIds\r\n",
        "prefix": "ec2-vpcendpoint"
    },
    "AWS::EC2::VPCEndpointConnectionNotification": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::VPCEndpointConnectionNotification\"\r\n\tProperties:\r\n\t\tConnectionEvents: #required\r\n\t\t\t- String\r\n\t\tVPCEndpointId: String\r\n\t\tServiceId: String\r\n\t\tConnectionNotificationArn: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-vpcendpointconnectionnotification"
    },
    "AWS::EC2::VPCEndpointService": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::VPCEndpointService\"\r\n\tProperties:\r\n\t\tNetworkLoadBalancerArns:\r\n\t\t\t- String\r\n\t\tAcceptanceRequired: Boolean\r\n\t\tGatewayLoadBalancerArns:\r\n\t\t\t- String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-vpcendpointservice"
    },
    "AWS::EC2::VPCEndpointServicePermissions": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::VPCEndpointServicePermissions\"\r\n\tProperties:\r\n\t\tAllowedPrincipals:\r\n\t\t\t- String\r\n\t\tServiceId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-vpcendpointservicepermissions"
    },
    "AWS::EC2::VPCGatewayAttachment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::VPCGatewayAttachment\"\r\n\tProperties:\r\n\t\tInternetGatewayId: String\r\n\t\tVpcId: String #required\r\n\t\tVpnGatewayId: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-vpcgatewayattachment"
    },
    "AWS::EC2::VPCPeeringConnection": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::VPCPeeringConnection\"\r\n\tProperties:\r\n\t\tPeerOwnerId: String\r\n\t\tPeerRegion: String\r\n\t\tPeerRoleArn: String\r\n\t\tPeerVpcId: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tVpcId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-vpcpeeringconnection"
    },
    "AWS::EC2::VPNConnection": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::VPNConnection\"\r\n\tProperties:\r\n\t\tCustomerGatewayId: String #required\r\n\t\tStaticRoutesOnly: Boolean\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTransitGatewayId: String\r\n\t\tType: String #required\r\n\t\tVpnGatewayId: String\r\n\t\tVpnTunnelOptionsSpecifications:\r\n\t\t\t- VpnTunnelOptionsSpecification\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-vpnconnection"
    },
    "AWS::EC2::VPNConnectionRoute": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::VPNConnectionRoute\"\r\n\tProperties:\r\n\t\tDestinationCidrBlock: String #required\r\n\t\tVpnConnectionId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-vpnconnectionroute"
    },
    "AWS::EC2::VPNGateway": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::VPNGateway\"\r\n\tProperties:\r\n\t\tAmazonSideAsn: Long\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tType: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-vpngateway"
    },
    "AWS::EC2::VPNGatewayRoutePropagation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::VPNGatewayRoutePropagation\"\r\n\tProperties:\r\n\t\tRouteTableIds: #required\r\n\t\t\t- String\r\n\t\tVpnGatewayId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-vpngatewayroutepropagation"
    },
    "AWS::EC2::Volume": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::Volume\"\r\n\tProperties:\r\n\t\tAutoEnableIO: Boolean\r\n\t\tAvailabilityZone: String #required\r\n\t\tEncrypted: Boolean\r\n\t\tIops: Integer\r\n\t\tKmsKeyId: String\r\n\t\tMultiAttachEnabled: Boolean\r\n\t\tOutpostArn: String\r\n\t\tSize: Integer\r\n\t\tSnapshotId: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tVolumeType: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-volume"
    },
    "AWS::EC2::VolumeAttachment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EC2::VolumeAttachment\"\r\n\tProperties:\r\n\t\tDevice: String #required\r\n\t\tInstanceId: String #required\r\n\t\tVolumeId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ec2-volumeattachment"
    },
    "AWS::ECR::Repository": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ECR::Repository\"\r\n\tProperties:\r\n\t\tLifecyclePolicy:\r\n\t\t\tLifecyclePolicy\r\n\t\tRepositoryName: String\r\n\t\tRepositoryPolicyText: \r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tImageTagMutability: String\r\n\t\tImageScanningConfiguration: Json\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "ecr-repository"
    },
    "AWS::ECS::CapacityProvider": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ECS::CapacityProvider\"\r\n\tProperties:\r\n\t\tAutoScalingGroupProvider: #required\r\n\t\t\tAutoScalingGroupProvider\r\n\t\tName: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ecs-capacityprovider"
    },
    "AWS::ECS::Cluster": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ECS::Cluster\"\r\n\tProperties:\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tClusterName: String\r\n\t\tClusterSettings:\r\n\t\t\t- ClusterSettings\r\n\t\tCapacityProviders:\r\n\t\t\t- String\r\n\t\tDefaultCapacityProviderStrategy:\r\n\t\t\t- CapacityProviderStrategyItem\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "ecs-cluster"
    },
    "AWS::ECS::PrimaryTaskSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ECS::PrimaryTaskSet\"\r\n\tProperties:\r\n\t\tCluster: String #required\r\n\t\tTaskSetId: String #required\r\n\t\tService: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ecs-primarytaskset"
    },
    "AWS::ECS::Service": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ECS::Service\"\r\n\tProperties:\r\n\t\tServiceArn: String\r\n\t\tCapacityProviderStrategy:\r\n\t\t\t- CapacityProviderStrategyItem\r\n\t\tCluster: String\r\n\t\tDeploymentConfiguration:\r\n\t\t\tDeploymentConfiguration\r\n\t\tDeploymentController:\r\n\t\t\tDeploymentController\r\n\t\tDesiredCount: Integer\r\n\t\tEnableECSManagedTags: Boolean\r\n\t\tHealthCheckGracePeriodSeconds: Integer\r\n\t\tLaunchType: String\r\n\t\tLoadBalancers:\r\n\t\t\t- LoadBalancer\r\n\t\tNetworkConfiguration:\r\n\t\t\tNetworkConfiguration\r\n\t\tPlacementConstraints:\r\n\t\t\t- PlacementConstraint\r\n\t\tPlacementStrategies:\r\n\t\t\t- PlacementStrategy\r\n\t\tPlatformVersion: String\r\n\t\tPropagateTags: String\r\n\t\tRole: String\r\n\t\tSchedulingStrategy: String\r\n\t\tServiceName: String\r\n\t\tServiceRegistries:\r\n\t\t\t- ServiceRegistry\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTaskDefinition: String\r\n",
        "description": "Attributes:\r\n  Name\r\n",
        "prefix": "ecs-service"
    },
    "AWS::ECS::TaskDefinition": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ECS::TaskDefinition\"\r\n\tProperties:\r\n\t\tFamily: String\r\n\t\tContainerDefinitions:\r\n\t\t\t- ContainerDefinition\r\n\t\tCpu: String\r\n\t\tExecutionRoleArn: String\r\n\t\tInferenceAccelerators:\r\n\t\t\t- InferenceAccelerator\r\n\t\tMemory: String\r\n\t\tNetworkMode: String\r\n\t\tPlacementConstraints:\r\n\t\t\t- TaskDefinitionPlacementConstraint\r\n\t\tProxyConfiguration:\r\n\t\t\tProxyConfiguration\r\n\t\tRequiresCompatibilities:\r\n\t\t\t- String\r\n\t\tTaskRoleArn: String\r\n\t\tVolumes:\r\n\t\t\t- Volume\r\n\t\tPidMode: String\r\n\t\tIpcMode: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  TaskDefinitionArn\r\n",
        "prefix": "ecs-taskdefinition"
    },
    "AWS::ECS::TaskSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ECS::TaskSet\"\r\n\tProperties:\r\n\t\tCluster: String #required\r\n\t\tExternalId: String\r\n\t\tLaunchType: String\r\n\t\tLoadBalancers:\r\n\t\t\t- LoadBalancer\r\n\t\tNetworkConfiguration:\r\n\t\t\tNetworkConfiguration\r\n\t\tPlatformVersion: String\r\n\t\tScale:\r\n\t\t\tScale\r\n\t\tService: String #required\r\n\t\tServiceRegistries:\r\n\t\t\t- ServiceRegistry\r\n\t\tTaskDefinition: String #required\r\n",
        "description": "Attributes:\r\n  Id\r\n",
        "prefix": "ecs-taskset"
    },
    "AWS::EFS::AccessPoint": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EFS::AccessPoint\"\r\n\tProperties:\r\n\t\tClientToken: String\r\n\t\tAccessPointTags:\r\n\t\t\t- AccessPointTag\r\n\t\tFileSystemId: String #required\r\n\t\tPosixUser:\r\n\t\t\tPosixUser\r\n\t\tRootDirectory:\r\n\t\t\tRootDirectory\r\n",
        "description": "Attributes:\r\n  AccessPointId\r\n  Arn\r\n",
        "prefix": "efs-accesspoint"
    },
    "AWS::EFS::FileSystem": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EFS::FileSystem\"\r\n\tProperties:\r\n\t\tEncrypted: Boolean\r\n\t\tFileSystemTags:\r\n\t\t\t- ElasticFileSystemTag\r\n\t\tKmsKeyId: String\r\n\t\tLifecyclePolicies:\r\n\t\t\t- LifecyclePolicy\r\n\t\tPerformanceMode: String\r\n\t\tProvisionedThroughputInMibps: Double\r\n\t\tThroughputMode: String\r\n\t\tFileSystemPolicy: Json\r\n\t\tBackupPolicy:\r\n\t\t\tBackupPolicy\r\n",
        "description": "Attributes:\r\n  FileSystemId\r\n  Arn\r\n",
        "prefix": "efs-filesystem"
    },
    "AWS::EFS::MountTarget": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EFS::MountTarget\"\r\n\tProperties:\r\n\t\tFileSystemId: String #required\r\n\t\tIpAddress: String\r\n\t\tSecurityGroups: #required\r\n\t\t\t- String\r\n\t\tSubnetId: String #required\r\n",
        "description": "Attributes:\r\n  IpAddress\r\n",
        "prefix": "efs-mounttarget"
    },
    "AWS::EKS::Cluster": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EKS::Cluster\"\r\n\tProperties:\r\n\t\tVersion: String\r\n\t\tEncryptionConfig:\r\n\t\t\t- EncryptionConfig\r\n\t\tRoleArn: String #required\r\n\t\tResourcesVpcConfig: #required\r\n\t\t\tResourcesVpcConfig\r\n\t\tKubernetesNetworkConfig:\r\n\t\t\tKubernetesNetworkConfig\r\n\t\tName: String\r\n",
        "description": "Attributes:\r\n  Endpoint\r\n  ClusterSecurityGroupId\r\n  EncryptionConfigKeyArn\r\n  Arn\r\n  CertificateAuthorityData\r\n",
        "prefix": "eks-cluster"
    },
    "AWS::EKS::FargateProfile": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EKS::FargateProfile\"\r\n\tProperties:\r\n\t\tClusterName: String #required\r\n\t\tFargateProfileName: String\r\n\t\tPodExecutionRoleArn: String #required\r\n\t\tSubnets:\r\n\t\t\t- String\r\n\t\tSelectors: #required\r\n\t\t\t- Selector\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "eks-fargateprofile"
    },
    "AWS::EKS::Nodegroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EKS::Nodegroup\"\r\n\tProperties:\r\n\t\tScalingConfig:\r\n\t\t\tScalingConfig\r\n\t\tLabels: Json\r\n\t\tReleaseVersion: String\r\n\t\tNodegroupName: String\r\n\t\tSubnets: #required\r\n\t\t\t- String\r\n\t\tNodeRole: String #required\r\n\t\tAmiType: String\r\n\t\tForceUpdateEnabled: Boolean\r\n\t\tVersion: String\r\n\t\tLaunchTemplate:\r\n\t\t\tLaunchTemplateSpecification\r\n\t\tRemoteAccess:\r\n\t\t\tRemoteAccess\r\n\t\tDiskSize: Double\r\n\t\tClusterName: String #required\r\n\t\tInstanceTypes:\r\n\t\t\t- String\r\n\t\tTags: Json\r\n",
        "description": "Attributes:\r\n  NodegroupName\r\n  ClusterName\r\n  Arn\r\n",
        "prefix": "eks-nodegroup"
    },
    "AWS::EMR::Cluster": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EMR::Cluster\"\r\n\tProperties:\r\n\t\tAdditionalInfo: Json\r\n\t\tApplications:\r\n\t\t\t- Application\r\n\t\tAutoScalingRole: String\r\n\t\tBootstrapActions:\r\n\t\t\t- BootstrapActionConfig\r\n\t\tConfigurations:\r\n\t\t\t- Configuration\r\n\t\tCustomAmiId: String\r\n\t\tEbsRootVolumeSize: Integer\r\n\t\tInstances: #required\r\n\t\t\tJobFlowInstancesConfig\r\n\t\tJobFlowRole: String #required\r\n\t\tKerberosAttributes:\r\n\t\t\tKerberosAttributes\r\n\t\tLogEncryptionKmsKeyId: String\r\n\t\tLogUri: String\r\n\t\tManagedScalingPolicy:\r\n\t\t\tManagedScalingPolicy\r\n\t\tName: String #required\r\n\t\tReleaseLabel: String\r\n\t\tScaleDownBehavior: String\r\n\t\tSecurityConfiguration: String\r\n\t\tServiceRole: String #required\r\n\t\tStepConcurrencyLevel: Integer\r\n\t\tSteps:\r\n\t\t\t- StepConfig\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tVisibleToAllUsers: Boolean\r\n",
        "description": "Attributes:\r\n  MasterPublicDNS\r\n",
        "prefix": "emr-cluster"
    },
    "AWS::EMR::InstanceFleetConfig": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EMR::InstanceFleetConfig\"\r\n\tProperties:\r\n\t\tClusterId: String #required\r\n\t\tInstanceFleetType: String #required\r\n\t\tInstanceTypeConfigs:\r\n\t\t\t- InstanceTypeConfig\r\n\t\tLaunchSpecifications:\r\n\t\t\tInstanceFleetProvisioningSpecifications\r\n\t\tName: String\r\n\t\tTargetOnDemandCapacity: Integer\r\n\t\tTargetSpotCapacity: Integer\r\n",
        "description": "No Attributes\r\n",
        "prefix": "emr-instancefleetconfig"
    },
    "AWS::EMR::InstanceGroupConfig": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EMR::InstanceGroupConfig\"\r\n\tProperties:\r\n\t\tAutoScalingPolicy:\r\n\t\t\tAutoScalingPolicy\r\n\t\tBidPrice: String\r\n\t\tConfigurations:\r\n\t\t\t- Configuration\r\n\t\tEbsConfiguration:\r\n\t\t\tEbsConfiguration\r\n\t\tInstanceCount: Integer #required\r\n\t\tInstanceRole: String #required\r\n\t\tInstanceType: String #required\r\n\t\tJobFlowId: String #required\r\n\t\tMarket: String\r\n\t\tName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "emr-instancegroupconfig"
    },
    "AWS::EMR::SecurityConfiguration": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EMR::SecurityConfiguration\"\r\n\tProperties:\r\n\t\tName: String\r\n\t\tSecurityConfiguration: Json #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "emr-securityconfiguration"
    },
    "AWS::EMR::Step": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EMR::Step\"\r\n\tProperties:\r\n\t\tActionOnFailure: String #required\r\n\t\tHadoopJarStep: #required\r\n\t\t\tHadoopJarStepConfig\r\n\t\tJobFlowId: String #required\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "emr-step"
    },
    "AWS::ElastiCache::CacheCluster": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ElastiCache::CacheCluster\"\r\n\tProperties:\r\n\t\tAZMode: String\r\n\t\tAutoMinorVersionUpgrade: Boolean\r\n\t\tCacheNodeType: String #required\r\n\t\tCacheParameterGroupName: String\r\n\t\tCacheSecurityGroupNames:\r\n\t\t\t- String\r\n\t\tCacheSubnetGroupName: String\r\n\t\tClusterName: String\r\n\t\tEngine: String #required\r\n\t\tEngineVersion: String\r\n\t\tNotificationTopicArn: String\r\n\t\tNumCacheNodes: Integer #required\r\n\t\tPort: Integer\r\n\t\tPreferredAvailabilityZone: String\r\n\t\tPreferredAvailabilityZones:\r\n\t\t\t- String\r\n\t\tPreferredMaintenanceWindow: String\r\n\t\tSnapshotArns:\r\n\t\t\t- String\r\n\t\tSnapshotName: String\r\n\t\tSnapshotRetentionLimit: Integer\r\n\t\tSnapshotWindow: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tVpcSecurityGroupIds:\r\n\t\t\t- String\r\n",
        "description": "Attributes:\r\n  ConfigurationEndpoint.Address\r\n  ConfigurationEndpoint.Port\r\n  RedisEndpoint.Address\r\n  RedisEndpoint.Port\r\n",
        "prefix": "elasticache-cachecluster"
    },
    "AWS::ElastiCache::ParameterGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ElastiCache::ParameterGroup\"\r\n\tProperties:\r\n\t\tCacheParameterGroupFamily: String #required\r\n\t\tDescription: String #required\r\n\t\tProperties:\r\n\t\t\tMap\r\n",
        "description": "No Attributes\r\n",
        "prefix": "elasticache-parametergroup"
    },
    "AWS::ElastiCache::ReplicationGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ElastiCache::ReplicationGroup\"\r\n\tProperties:\r\n\t\tAtRestEncryptionEnabled: Boolean\r\n\t\tAuthToken: String\r\n\t\tAutoMinorVersionUpgrade: Boolean\r\n\t\tAutomaticFailoverEnabled: Boolean\r\n\t\tCacheNodeType: String\r\n\t\tCacheParameterGroupName: String\r\n\t\tCacheSecurityGroupNames:\r\n\t\t\t- String\r\n\t\tCacheSubnetGroupName: String\r\n\t\tEngine: String\r\n\t\tEngineVersion: String\r\n\t\tGlobalReplicationGroupId: String\r\n\t\tKmsKeyId: String\r\n\t\tMultiAZEnabled: Boolean\r\n\t\tNodeGroupConfiguration:\r\n\t\t\t- NodeGroupConfiguration\r\n\t\tNotificationTopicArn: String\r\n\t\tNumCacheClusters: Integer\r\n\t\tNumNodeGroups: Integer\r\n\t\tPort: Integer\r\n\t\tPreferredCacheClusterAZs:\r\n\t\t\t- String\r\n\t\tPreferredMaintenanceWindow: String\r\n\t\tPrimaryClusterId: String\r\n\t\tReplicasPerNodeGroup: Integer\r\n\t\tReplicationGroupDescription: String #required\r\n\t\tReplicationGroupId: String\r\n\t\tSecurityGroupIds:\r\n\t\t\t- String\r\n\t\tSnapshotArns:\r\n\t\t\t- String\r\n\t\tSnapshotName: String\r\n\t\tSnapshotRetentionLimit: Integer\r\n\t\tSnapshotWindow: String\r\n\t\tSnapshottingClusterId: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTransitEncryptionEnabled: Boolean\r\n",
        "description": "Attributes:\r\n  ConfigurationEndPoint.Address\r\n  ConfigurationEndPoint.Port\r\n  PrimaryEndPoint.Address\r\n  PrimaryEndPoint.Port\r\n  ReadEndPoint.Addresses\r\n  ReadEndPoint.Addresses.List\r\n  ReadEndPoint.Ports\r\n  ReadEndPoint.Ports.List\r\n  ReaderEndPoint.Address\r\n  ReaderEndPoint.Port\r\n",
        "prefix": "elasticache-replicationgroup"
    },
    "AWS::ElastiCache::SecurityGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ElastiCache::SecurityGroup\"\r\n\tProperties:\r\n\t\tDescription: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "elasticache-securitygroup"
    },
    "AWS::ElastiCache::SecurityGroupIngress": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ElastiCache::SecurityGroupIngress\"\r\n\tProperties:\r\n\t\tCacheSecurityGroupName: String #required\r\n\t\tEC2SecurityGroupName: String #required\r\n\t\tEC2SecurityGroupOwnerId: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "elasticache-securitygroupingress"
    },
    "AWS::ElastiCache::SubnetGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ElastiCache::SubnetGroup\"\r\n\tProperties:\r\n\t\tCacheSubnetGroupName: String\r\n\t\tDescription: String #required\r\n\t\tSubnetIds: #required\r\n\t\t\t- String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "elasticache-subnetgroup"
    },
    "AWS::ElasticBeanstalk::Application": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ElasticBeanstalk::Application\"\r\n\tProperties:\r\n\t\tApplicationName: String\r\n\t\tDescription: String\r\n\t\tResourceLifecycleConfig:\r\n\t\t\tApplicationResourceLifecycleConfig\r\n",
        "description": "No Attributes\r\n",
        "prefix": "elasticbeanstalk-application"
    },
    "AWS::ElasticBeanstalk::ApplicationVersion": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ElasticBeanstalk::ApplicationVersion\"\r\n\tProperties:\r\n\t\tApplicationName: String #required\r\n\t\tDescription: String\r\n\t\tSourceBundle: #required\r\n\t\t\tSourceBundle\r\n",
        "description": "No Attributes\r\n",
        "prefix": "elasticbeanstalk-applicationversion"
    },
    "AWS::ElasticBeanstalk::ConfigurationTemplate": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ElasticBeanstalk::ConfigurationTemplate\"\r\n\tProperties:\r\n\t\tApplicationName: String #required\r\n\t\tDescription: String\r\n\t\tEnvironmentId: String\r\n\t\tOptionSettings:\r\n\t\t\t- ConfigurationOptionSetting\r\n\t\tPlatformArn: String\r\n\t\tSolutionStackName: String\r\n\t\tSourceConfiguration:\r\n\t\t\tSourceConfiguration\r\n",
        "description": "No Attributes\r\n",
        "prefix": "elasticbeanstalk-configurationtemplate"
    },
    "AWS::ElasticBeanstalk::Environment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ElasticBeanstalk::Environment\"\r\n\tProperties:\r\n\t\tApplicationName: String #required\r\n\t\tCNAMEPrefix: String\r\n\t\tDescription: String\r\n\t\tEnvironmentName: String\r\n\t\tOptionSettings:\r\n\t\t\t- OptionSetting\r\n\t\tPlatformArn: String\r\n\t\tSolutionStackName: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTemplateName: String\r\n\t\tTier:\r\n\t\t\tTier\r\n\t\tVersionLabel: String\r\n",
        "description": "Attributes:\r\n  EndpointURL\r\n",
        "prefix": "elasticbeanstalk-environment"
    },
    "AWS::ElasticLoadBalancing::LoadBalancer": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ElasticLoadBalancing::LoadBalancer\"\r\n\tProperties:\r\n\t\tAccessLoggingPolicy:\r\n\t\t\tAccessLoggingPolicy\r\n\t\tAppCookieStickinessPolicy:\r\n\t\t\t- AppCookieStickinessPolicy\r\n\t\tAvailabilityZones:\r\n\t\t\t- String\r\n\t\tConnectionDrainingPolicy:\r\n\t\t\tConnectionDrainingPolicy\r\n\t\tConnectionSettings:\r\n\t\t\tConnectionSettings\r\n\t\tCrossZone: Boolean\r\n\t\tHealthCheck:\r\n\t\t\tHealthCheck\r\n\t\tInstances:\r\n\t\t\t- String\r\n\t\tLBCookieStickinessPolicy:\r\n\t\t\t- LBCookieStickinessPolicy\r\n\t\tListeners: #required\r\n\t\t\t- Listeners\r\n\t\tLoadBalancerName: String\r\n\t\tPolicies:\r\n\t\t\t- Policies\r\n\t\tScheme: String\r\n\t\tSecurityGroups:\r\n\t\t\t- String\r\n\t\tSubnets:\r\n\t\t\t- String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  CanonicalHostedZoneName\r\n  CanonicalHostedZoneNameID\r\n  DNSName\r\n  SourceSecurityGroup.GroupName\r\n  SourceSecurityGroup.OwnerAlias\r\n",
        "prefix": "elasticloadbalancing-loadbalancer"
    },
    "AWS::ElasticLoadBalancingV2::Listener": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ElasticLoadBalancingV2::Listener\"\r\n\tProperties:\r\n\t\tSslPolicy: String\r\n\t\tLoadBalancerArn: String #required\r\n\t\tDefaultActions: #required\r\n\t\t\t- Action\r\n\t\tPort: Integer\r\n\t\tCertificates:\r\n\t\t\t- Certificate\r\n\t\tProtocol: String\r\n\t\tAlpnPolicy:\r\n\t\t\t- String\r\n",
        "description": "Attributes:\r\n  ListenerArn\r\n",
        "prefix": "elasticloadbalancingv2-listener"
    },
    "AWS::ElasticLoadBalancingV2::ListenerCertificate": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ElasticLoadBalancingV2::ListenerCertificate\"\r\n\tProperties:\r\n\t\tCertificates: #required\r\n\t\t\t- Certificate\r\n\t\tListenerArn: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "elasticloadbalancingv2-listenercertificate"
    },
    "AWS::ElasticLoadBalancingV2::ListenerRule": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ElasticLoadBalancingV2::ListenerRule\"\r\n\tProperties:\r\n\t\tActions: #required\r\n\t\t\t- Action\r\n\t\tConditions: #required\r\n\t\t\t- RuleCondition\r\n\t\tListenerArn: String #required\r\n\t\tPriority: Integer #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "elasticloadbalancingv2-listenerrule"
    },
    "AWS::ElasticLoadBalancingV2::LoadBalancer": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ElasticLoadBalancingV2::LoadBalancer\"\r\n\tProperties:\r\n\t\tIpAddressType: String\r\n\t\tLoadBalancerAttributes:\r\n\t\t\t- LoadBalancerAttribute\r\n\t\tName: String\r\n\t\tScheme: String\r\n\t\tSecurityGroups:\r\n\t\t\t- String\r\n\t\tSubnetMappings:\r\n\t\t\t- SubnetMapping\r\n\t\tSubnets:\r\n\t\t\t- String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tType: String\r\n",
        "description": "Attributes:\r\n  CanonicalHostedZoneID\r\n  DNSName\r\n  LoadBalancerFullName\r\n  LoadBalancerName\r\n  SecurityGroups\r\n",
        "prefix": "elasticloadbalancingv2-loadbalancer"
    },
    "AWS::ElasticLoadBalancingV2::TargetGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ElasticLoadBalancingV2::TargetGroup\"\r\n\tProperties:\r\n\t\tHealthCheckEnabled: Boolean\r\n\t\tHealthCheckIntervalSeconds: Integer\r\n\t\tHealthCheckPath: String\r\n\t\tHealthCheckPort: String\r\n\t\tHealthCheckProtocol: String\r\n\t\tHealthCheckTimeoutSeconds: Integer\r\n\t\tHealthyThresholdCount: Integer\r\n\t\tMatcher:\r\n\t\t\tMatcher\r\n\t\tName: String\r\n\t\tPort: Integer\r\n\t\tProtocol: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTargetGroupAttributes:\r\n\t\t\t- TargetGroupAttribute\r\n\t\tTargetType: String\r\n\t\tTargets:\r\n\t\t\t- TargetDescription\r\n\t\tUnhealthyThresholdCount: Integer\r\n\t\tVpcId: String\r\n",
        "description": "Attributes:\r\n  LoadBalancerArns\r\n  TargetGroupFullName\r\n  TargetGroupName\r\n",
        "prefix": "elasticloadbalancingv2-targetgroup"
    },
    "AWS::Elasticsearch::Domain": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Elasticsearch::Domain\"\r\n\tProperties:\r\n\t\tAccessPolicies: Json\r\n\t\tAdvancedOptions:\r\n\t\t\tMap\r\n\t\tAdvancedSecurityOptions:\r\n\t\t\tAdvancedSecurityOptionsInput\r\n\t\tCognitoOptions:\r\n\t\t\tCognitoOptions\r\n\t\tDomainEndpointOptions:\r\n\t\t\tDomainEndpointOptions\r\n\t\tDomainName: String\r\n\t\tEBSOptions:\r\n\t\t\tEBSOptions\r\n\t\tElasticsearchClusterConfig:\r\n\t\t\tElasticsearchClusterConfig\r\n\t\tElasticsearchVersion: String\r\n\t\tEncryptionAtRestOptions:\r\n\t\t\tEncryptionAtRestOptions\r\n\t\tLogPublishingOptions:\r\n\t\t\tMap\r\n\t\tNodeToNodeEncryptionOptions:\r\n\t\t\tNodeToNodeEncryptionOptions\r\n\t\tSnapshotOptions:\r\n\t\t\tSnapshotOptions\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tVPCOptions:\r\n\t\t\tVPCOptions\r\n",
        "description": "Attributes:\r\n  Arn\r\n  DomainArn\r\n  DomainEndpoint\r\n",
        "prefix": "elasticsearch-domain"
    },
    "AWS::EventSchemas::Discoverer": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EventSchemas::Discoverer\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tSourceArn: String #required\r\n\t\tTags:\r\n\t\t\t- TagsEntry\r\n",
        "description": "Attributes:\r\n  DiscovererArn\r\n  DiscovererId\r\n",
        "prefix": "eventschemas-discoverer"
    },
    "AWS::EventSchemas::Registry": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EventSchemas::Registry\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tRegistryName: String\r\n\t\tTags:\r\n\t\t\t- TagsEntry\r\n",
        "description": "Attributes:\r\n  RegistryName\r\n  RegistryArn\r\n",
        "prefix": "eventschemas-registry"
    },
    "AWS::EventSchemas::RegistryPolicy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EventSchemas::RegistryPolicy\"\r\n\tProperties:\r\n\t\tPolicy: Json #required\r\n\t\tRegistryName: String #required\r\n\t\tRevisionId: String\r\n",
        "description": "Attributes:\r\n  Id\r\n",
        "prefix": "eventschemas-registrypolicy"
    },
    "AWS::EventSchemas::Schema": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::EventSchemas::Schema\"\r\n\tProperties:\r\n\t\tType: String #required\r\n\t\tDescription: String\r\n\t\tContent: String #required\r\n\t\tRegistryName: String #required\r\n\t\tSchemaName: String\r\n\t\tTags:\r\n\t\t\t- TagsEntry\r\n",
        "description": "Attributes:\r\n  SchemaVersion\r\n  SchemaArn\r\n  SchemaName\r\n",
        "prefix": "eventschemas-schema"
    },
    "AWS::Events::Archive": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Events::Archive\"\r\n\tProperties:\r\n\t\tSourceArn: String #required\r\n\t\tDescription: String\r\n\t\tEventPattern: Json\r\n\t\tRetentionDays: Integer\r\n",
        "description": "Attributes:\r\n  ArchiveName\r\n  Arn\r\n",
        "prefix": "events-archive"
    },
    "AWS::Events::EventBus": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Events::EventBus\"\r\n\tProperties:\r\n\t\tEventSourceName: String\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  Policy\r\n  Arn\r\n  Name\r\n",
        "prefix": "events-eventbus"
    },
    "AWS::Events::EventBusPolicy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Events::EventBusPolicy\"\r\n\tProperties:\r\n\t\tEventBusName: String\r\n\t\tCondition:\r\n\t\t\tCondition\r\n\t\tAction: String\r\n\t\tStatementId: String #required\r\n\t\tStatement: Json\r\n\t\tPrincipal: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "events-eventbuspolicy"
    },
    "AWS::Events::Rule": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Events::Rule\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tEventBusName: String\r\n\t\tEventPattern: Json\r\n\t\tName: String\r\n\t\tRoleArn: String\r\n\t\tScheduleExpression: String\r\n\t\tState: String\r\n\t\tTargets:\r\n\t\t\t- Target\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "events-rule"
    },
    "AWS::FMS::NotificationChannel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::FMS::NotificationChannel\"\r\n\tProperties:\r\n\t\tSnsRoleName: String #required\r\n\t\tSnsTopicArn: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "fms-notificationchannel"
    },
    "AWS::FMS::Policy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::FMS::Policy\"\r\n\tProperties:\r\n\t\tExcludeMap:\r\n\t\t\tIEMap\r\n\t\tExcludeResourceTags: Boolean #required\r\n\t\tIncludeMap:\r\n\t\t\tIEMap\r\n\t\tPolicyName: String #required\r\n\t\tRemediationEnabled: Boolean #required\r\n\t\tResourceTags:\r\n\t\t\t- ResourceTag\r\n\t\tResourceType: String #required\r\n\t\tResourceTypeList:\r\n\t\t\t- String\r\n\t\tSecurityServicePolicyData: Json #required\r\n\t\tDeleteAllPolicyResources: Boolean\r\n\t\tTags:\r\n\t\t\t- PolicyTag\r\n",
        "description": "Attributes:\r\n  Id\r\n  Arn\r\n",
        "prefix": "fms-policy"
    },
    "AWS::FSx::FileSystem": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::FSx::FileSystem\"\r\n\tProperties:\r\n\t\tStorageType: String\r\n\t\tKmsKeyId: String\r\n\t\tStorageCapacity: Integer\r\n\t\tFileSystemType: String #required\r\n\t\tLustreConfiguration:\r\n\t\t\tLustreConfiguration\r\n\t\tBackupId: String\r\n\t\tSubnetIds: #required\r\n\t\t\t- String\r\n\t\tSecurityGroupIds:\r\n\t\t\t- String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tWindowsConfiguration:\r\n\t\t\tWindowsConfiguration\r\n",
        "description": "Attributes:\r\n  LustreMountName\r\n",
        "prefix": "fsx-filesystem"
    },
    "AWS::GameLift::Alias": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::GameLift::Alias\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tName: String #required\r\n\t\tRoutingStrategy: #required\r\n\t\t\tRoutingStrategy\r\n",
        "description": "Attributes:\r\n  AliasId\r\n",
        "prefix": "gamelift-alias"
    },
    "AWS::GameLift::Build": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::GameLift::Build\"\r\n\tProperties:\r\n\t\tName: String\r\n\t\tOperatingSystem: String\r\n\t\tStorageLocation:\r\n\t\t\tS3Location\r\n\t\tVersion: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "gamelift-build"
    },
    "AWS::GameLift::Fleet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::GameLift::Fleet\"\r\n\tProperties:\r\n\t\tBuildId: String\r\n\t\tCertificateConfiguration:\r\n\t\t\tCertificateConfiguration\r\n\t\tDescription: String\r\n\t\tDesiredEC2Instances: Integer\r\n\t\tEC2InboundPermissions:\r\n\t\t\t- IpPermission\r\n\t\tEC2InstanceType: String #required\r\n\t\tFleetType: String\r\n\t\tInstanceRoleARN: String\r\n\t\tLogPaths:\r\n\t\t\t- String\r\n\t\tMaxSize: Integer\r\n\t\tMetricGroups:\r\n\t\t\t- String\r\n\t\tMinSize: Integer\r\n\t\tName: String #required\r\n\t\tNewGameSessionProtectionPolicy: String\r\n\t\tPeerVpcAwsAccountId: String\r\n\t\tPeerVpcId: String\r\n\t\tResourceCreationLimitPolicy:\r\n\t\t\tResourceCreationLimitPolicy\r\n\t\tRuntimeConfiguration:\r\n\t\t\tRuntimeConfiguration\r\n\t\tScriptId: String\r\n\t\tServerLaunchParameters: String\r\n\t\tServerLaunchPath: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "gamelift-fleet"
    },
    "AWS::GameLift::GameServerGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::GameLift::GameServerGroup\"\r\n\tProperties:\r\n\t\tAutoScalingPolicy:\r\n\t\t\tAutoScalingPolicy\r\n\t\tBalancingStrategy: String\r\n\t\tDeleteOption: String\r\n\t\tGameServerGroupName: String #required\r\n\t\tGameServerProtectionPolicy: String\r\n\t\tInstanceDefinitions: #required\r\n\t\t\tInstanceDefinitions\r\n\t\tLaunchTemplate: #required\r\n\t\t\tLaunchTemplate\r\n\t\tMaxSize: Double\r\n\t\tMinSize: Double\r\n\t\tRoleArn: String #required\r\n\t\tTags:\r\n\t\t\tTags\r\n\t\tVpcSubnets:\r\n\t\t\tVpcSubnets\r\n",
        "description": "Attributes:\r\n  AutoScalingGroupArn\r\n  GameServerGroupArn\r\n",
        "prefix": "gamelift-gameservergroup"
    },
    "AWS::GameLift::GameSessionQueue": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::GameLift::GameSessionQueue\"\r\n\tProperties:\r\n\t\tTimeoutInSeconds: Integer\r\n\t\tPlayerLatencyPolicies:\r\n\t\t\t- PlayerLatencyPolicy\r\n\t\tDestinations:\r\n\t\t\t- Destination\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Name\r\n",
        "prefix": "gamelift-gamesessionqueue"
    },
    "AWS::GameLift::MatchmakingConfiguration": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::GameLift::MatchmakingConfiguration\"\r\n\tProperties:\r\n\t\tGameProperties:\r\n\t\t\t- GameProperty\r\n\t\tGameSessionData: String\r\n\t\tDescription: String\r\n\t\tAcceptanceTimeoutSeconds: Integer\r\n\t\tNotificationTarget: String\r\n\t\tCustomEventData: String\r\n\t\tName: String #required\r\n\t\tAdditionalPlayerCount: Integer\r\n\t\tBackfillMode: String\r\n\t\tRequestTimeoutSeconds: Integer #required\r\n\t\tAcceptanceRequired: Boolean #required\r\n\t\tFlexMatchMode: String\r\n\t\tRuleSetName: String #required\r\n\t\tGameSessionQueueArns:\r\n\t\t\t- String\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Name\r\n",
        "prefix": "gamelift-matchmakingconfiguration"
    },
    "AWS::GameLift::MatchmakingRuleSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::GameLift::MatchmakingRuleSet\"\r\n\tProperties:\r\n\t\tRuleSetBody: String #required\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Name\r\n",
        "prefix": "gamelift-matchmakingruleset"
    },
    "AWS::GameLift::Script": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::GameLift::Script\"\r\n\tProperties:\r\n\t\tVersion: String\r\n\t\tStorageLocation: #required\r\n\t\t\tS3Location\r\n\t\tName: String\r\n",
        "description": "Attributes:\r\n  Id\r\n  Arn\r\n",
        "prefix": "gamelift-script"
    },
    "AWS::GlobalAccelerator::Accelerator": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::GlobalAccelerator::Accelerator\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tIpAddressType: String\r\n\t\tIpAddresses:\r\n\t\t\t- String\r\n\t\tEnabled: Boolean\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  DnsName\r\n  AcceleratorArn\r\n",
        "prefix": "globalaccelerator-accelerator"
    },
    "AWS::GlobalAccelerator::EndpointGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::GlobalAccelerator::EndpointGroup\"\r\n\tProperties:\r\n\t\tListenerArn: String #required\r\n\t\tEndpointGroupRegion: String #required\r\n\t\tEndpointConfigurations:\r\n\t\t\t- EndpointConfiguration\r\n\t\tTrafficDialPercentage: Double\r\n\t\tHealthCheckPort: Integer\r\n\t\tHealthCheckProtocol: String\r\n\t\tHealthCheckPath: String\r\n\t\tHealthCheckIntervalSeconds: Integer\r\n\t\tThresholdCount: Integer\r\n\t\tPortOverrides:\r\n\t\t\t- PortOverride\r\n",
        "description": "Attributes:\r\n  EndpointGroupArn\r\n",
        "prefix": "globalaccelerator-endpointgroup"
    },
    "AWS::GlobalAccelerator::Listener": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::GlobalAccelerator::Listener\"\r\n\tProperties:\r\n\t\tAcceleratorArn: String #required\r\n\t\tPortRanges: #required\r\n\t\t\t- PortRange\r\n\t\tProtocol: String #required\r\n\t\tClientAffinity: String\r\n",
        "description": "Attributes:\r\n  ListenerArn\r\n",
        "prefix": "globalaccelerator-listener"
    },
    "AWS::Glue::Classifier": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Glue::Classifier\"\r\n\tProperties:\r\n\t\tXMLClassifier:\r\n\t\t\tXMLClassifier\r\n\t\tJsonClassifier:\r\n\t\t\tJsonClassifier\r\n\t\tCsvClassifier:\r\n\t\t\tCsvClassifier\r\n\t\tGrokClassifier:\r\n\t\t\tGrokClassifier\r\n",
        "description": "No Attributes\r\n",
        "prefix": "glue-classifier"
    },
    "AWS::Glue::Connection": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Glue::Connection\"\r\n\tProperties:\r\n\t\tConnectionInput: #required\r\n\t\t\tConnectionInput\r\n\t\tCatalogId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "glue-connection"
    },
    "AWS::Glue::Crawler": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Glue::Crawler\"\r\n\tProperties:\r\n\t\tRole: String #required\r\n\t\tClassifiers:\r\n\t\t\t- String\r\n\t\tDescription: String\r\n\t\tSchemaChangePolicy:\r\n\t\t\tSchemaChangePolicy\r\n\t\tConfiguration: String\r\n\t\tSchedule:\r\n\t\t\tSchedule\r\n\t\tDatabaseName: String\r\n\t\tTargets: #required\r\n\t\t\tTargets\r\n\t\tCrawlerSecurityConfiguration: String\r\n\t\tTablePrefix: String\r\n\t\tTags: Json\r\n\t\tName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "glue-crawler"
    },
    "AWS::Glue::DataCatalogEncryptionSettings": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Glue::DataCatalogEncryptionSettings\"\r\n\tProperties:\r\n\t\tDataCatalogEncryptionSettings: #required\r\n\t\t\tDataCatalogEncryptionSettings\r\n\t\tCatalogId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "glue-datacatalogencryptionsettings"
    },
    "AWS::Glue::Database": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Glue::Database\"\r\n\tProperties:\r\n\t\tDatabaseInput: #required\r\n\t\t\tDatabaseInput\r\n\t\tCatalogId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "glue-database"
    },
    "AWS::Glue::DevEndpoint": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Glue::DevEndpoint\"\r\n\tProperties:\r\n\t\tExtraJarsS3Path: String\r\n\t\tPublicKey: String\r\n\t\tNumberOfNodes: Integer\r\n\t\tArguments: Json\r\n\t\tSubnetId: String\r\n\t\tPublicKeys:\r\n\t\t\t- String\r\n\t\tSecurityGroupIds:\r\n\t\t\t- String\r\n\t\tRoleArn: String #required\r\n\t\tWorkerType: String\r\n\t\tEndpointName: String\r\n\t\tGlueVersion: String\r\n\t\tExtraPythonLibsS3Path: String\r\n\t\tSecurityConfiguration: String\r\n\t\tNumberOfWorkers: Integer\r\n\t\tTags: Json\r\n",
        "description": "No Attributes\r\n",
        "prefix": "glue-devendpoint"
    },
    "AWS::Glue::Job": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Glue::Job\"\r\n\tProperties:\r\n\t\tConnections:\r\n\t\t\tConnectionsList\r\n\t\tMaxRetries: Double\r\n\t\tDescription: String\r\n\t\tTimeout: Integer\r\n\t\tAllocatedCapacity: Double\r\n\t\tName: String\r\n\t\tRole: String #required\r\n\t\tDefaultArguments: Json\r\n\t\tNotificationProperty:\r\n\t\t\tNotificationProperty\r\n\t\tWorkerType: String\r\n\t\tLogUri: String\r\n\t\tCommand: #required\r\n\t\t\tJobCommand\r\n\t\tGlueVersion: String\r\n\t\tExecutionProperty:\r\n\t\t\tExecutionProperty\r\n\t\tSecurityConfiguration: String\r\n\t\tNumberOfWorkers: Integer\r\n\t\tTags: Json\r\n\t\tMaxCapacity: Double\r\n",
        "description": "No Attributes\r\n",
        "prefix": "glue-job"
    },
    "AWS::Glue::MLTransform": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Glue::MLTransform\"\r\n\tProperties:\r\n\t\tMaxRetries: Integer\r\n\t\tDescription: String\r\n\t\tTransformEncryption:\r\n\t\t\tTransformEncryption\r\n\t\tTimeout: Integer\r\n\t\tName: String\r\n\t\tRole: String #required\r\n\t\tWorkerType: String\r\n\t\tGlueVersion: String\r\n\t\tTransformParameters: #required\r\n\t\t\tTransformParameters\r\n\t\tInputRecordTables: #required\r\n\t\t\tInputRecordTables\r\n\t\tNumberOfWorkers: Integer\r\n\t\tTags: Json\r\n\t\tMaxCapacity: Double\r\n",
        "description": "No Attributes\r\n",
        "prefix": "glue-mltransform"
    },
    "AWS::Glue::Partition": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Glue::Partition\"\r\n\tProperties:\r\n\t\tTableName: String #required\r\n\t\tDatabaseName: String #required\r\n\t\tCatalogId: String #required\r\n\t\tPartitionInput: #required\r\n\t\t\tPartitionInput\r\n",
        "description": "No Attributes\r\n",
        "prefix": "glue-partition"
    },
    "AWS::Glue::Registry": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Glue::Registry\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tDescription: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "glue-registry"
    },
    "AWS::Glue::Schema": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Glue::Schema\"\r\n\tProperties:\r\n\t\tRegistry:\r\n\t\t\tRegistry\r\n\t\tName: String #required\r\n\t\tDescription: String\r\n\t\tDataFormat: String #required\r\n\t\tCompatibility: String #required\r\n\t\tSchemaDefinition: String #required\r\n\t\tCheckpointVersion:\r\n\t\t\tSchemaVersion\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n  InitialSchemaVersionId\r\n",
        "prefix": "glue-schema"
    },
    "AWS::Glue::SchemaVersion": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Glue::SchemaVersion\"\r\n\tProperties:\r\n\t\tSchema: #required\r\n\t\t\tSchema\r\n\t\tSchemaDefinition: String #required\r\n",
        "description": "Attributes:\r\n  VersionId\r\n",
        "prefix": "glue-schemaversion"
    },
    "AWS::Glue::SchemaVersionMetadata": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Glue::SchemaVersionMetadata\"\r\n\tProperties:\r\n\t\tSchemaVersionId: String #required\r\n\t\tKey: String #required\r\n\t\tValue: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "glue-schemaversionmetadata"
    },
    "AWS::Glue::SecurityConfiguration": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Glue::SecurityConfiguration\"\r\n\tProperties:\r\n\t\tEncryptionConfiguration: #required\r\n\t\t\tEncryptionConfiguration\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "glue-securityconfiguration"
    },
    "AWS::Glue::Table": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Glue::Table\"\r\n\tProperties:\r\n\t\tTableInput: #required\r\n\t\t\tTableInput\r\n\t\tDatabaseName: String #required\r\n\t\tCatalogId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "glue-table"
    },
    "AWS::Glue::Trigger": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Glue::Trigger\"\r\n\tProperties:\r\n\t\tType: String #required\r\n\t\tStartOnCreation: Boolean\r\n\t\tDescription: String\r\n\t\tActions: #required\r\n\t\t\t- Action\r\n\t\tWorkflowName: String\r\n\t\tSchedule: String\r\n\t\tTags: Json\r\n\t\tName: String\r\n\t\tPredicate:\r\n\t\t\tPredicate\r\n",
        "description": "No Attributes\r\n",
        "prefix": "glue-trigger"
    },
    "AWS::Glue::Workflow": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Glue::Workflow\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tDefaultRunProperties: Json\r\n\t\tTags: Json\r\n\t\tName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "glue-workflow"
    },
    "AWS::Greengrass::ConnectorDefinition": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Greengrass::ConnectorDefinition\"\r\n\tProperties:\r\n\t\tInitialVersion:\r\n\t\t\tConnectorDefinitionVersion\r\n\t\tTags: Json\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  LatestVersionArn\r\n  Id\r\n  Arn\r\n  Name\r\n",
        "prefix": "greengrass-connectordefinition"
    },
    "AWS::Greengrass::ConnectorDefinitionVersion": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Greengrass::ConnectorDefinitionVersion\"\r\n\tProperties:\r\n\t\tConnectors: #required\r\n\t\t\t- Connector\r\n\t\tConnectorDefinitionId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "greengrass-connectordefinitionversion"
    },
    "AWS::Greengrass::CoreDefinition": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Greengrass::CoreDefinition\"\r\n\tProperties:\r\n\t\tInitialVersion:\r\n\t\t\tCoreDefinitionVersion\r\n\t\tTags: Json\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  LatestVersionArn\r\n  Id\r\n  Arn\r\n  Name\r\n",
        "prefix": "greengrass-coredefinition"
    },
    "AWS::Greengrass::CoreDefinitionVersion": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Greengrass::CoreDefinitionVersion\"\r\n\tProperties:\r\n\t\tCores: #required\r\n\t\t\t- Core\r\n\t\tCoreDefinitionId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "greengrass-coredefinitionversion"
    },
    "AWS::Greengrass::DeviceDefinition": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Greengrass::DeviceDefinition\"\r\n\tProperties:\r\n\t\tInitialVersion:\r\n\t\t\tDeviceDefinitionVersion\r\n\t\tTags: Json\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  LatestVersionArn\r\n  Id\r\n  Arn\r\n  Name\r\n",
        "prefix": "greengrass-devicedefinition"
    },
    "AWS::Greengrass::DeviceDefinitionVersion": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Greengrass::DeviceDefinitionVersion\"\r\n\tProperties:\r\n\t\tDeviceDefinitionId: String #required\r\n\t\tDevices: #required\r\n\t\t\t- Device\r\n",
        "description": "No Attributes\r\n",
        "prefix": "greengrass-devicedefinitionversion"
    },
    "AWS::Greengrass::FunctionDefinition": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Greengrass::FunctionDefinition\"\r\n\tProperties:\r\n\t\tInitialVersion:\r\n\t\t\tFunctionDefinitionVersion\r\n\t\tTags: Json\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  LatestVersionArn\r\n  Id\r\n  Arn\r\n  Name\r\n",
        "prefix": "greengrass-functiondefinition"
    },
    "AWS::Greengrass::FunctionDefinitionVersion": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Greengrass::FunctionDefinitionVersion\"\r\n\tProperties:\r\n\t\tDefaultConfig:\r\n\t\t\tDefaultConfig\r\n\t\tFunctions: #required\r\n\t\t\t- Function\r\n\t\tFunctionDefinitionId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "greengrass-functiondefinitionversion"
    },
    "AWS::Greengrass::Group": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Greengrass::Group\"\r\n\tProperties:\r\n\t\tInitialVersion:\r\n\t\t\tGroupVersion\r\n\t\tRoleArn: String\r\n\t\tTags: Json\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  RoleAttachedAt\r\n  LatestVersionArn\r\n  Id\r\n  Arn\r\n  RoleArn\r\n  Name\r\n",
        "prefix": "greengrass-group"
    },
    "AWS::Greengrass::GroupVersion": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Greengrass::GroupVersion\"\r\n\tProperties:\r\n\t\tLoggerDefinitionVersionArn: String\r\n\t\tDeviceDefinitionVersionArn: String\r\n\t\tFunctionDefinitionVersionArn: String\r\n\t\tCoreDefinitionVersionArn: String\r\n\t\tResourceDefinitionVersionArn: String\r\n\t\tConnectorDefinitionVersionArn: String\r\n\t\tSubscriptionDefinitionVersionArn: String\r\n\t\tGroupId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "greengrass-groupversion"
    },
    "AWS::Greengrass::LoggerDefinition": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Greengrass::LoggerDefinition\"\r\n\tProperties:\r\n\t\tInitialVersion:\r\n\t\t\tLoggerDefinitionVersion\r\n\t\tTags: Json\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  LatestVersionArn\r\n  Id\r\n  Arn\r\n  Name\r\n",
        "prefix": "greengrass-loggerdefinition"
    },
    "AWS::Greengrass::LoggerDefinitionVersion": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Greengrass::LoggerDefinitionVersion\"\r\n\tProperties:\r\n\t\tLoggerDefinitionId: String #required\r\n\t\tLoggers: #required\r\n\t\t\t- Logger\r\n",
        "description": "No Attributes\r\n",
        "prefix": "greengrass-loggerdefinitionversion"
    },
    "AWS::Greengrass::ResourceDefinition": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Greengrass::ResourceDefinition\"\r\n\tProperties:\r\n\t\tInitialVersion:\r\n\t\t\tResourceDefinitionVersion\r\n\t\tTags: Json\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  LatestVersionArn\r\n  Id\r\n  Arn\r\n  Name\r\n",
        "prefix": "greengrass-resourcedefinition"
    },
    "AWS::Greengrass::ResourceDefinitionVersion": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Greengrass::ResourceDefinitionVersion\"\r\n\tProperties:\r\n\t\tResources: #required\r\n\t\t\t- ResourceInstance\r\n\t\tResourceDefinitionId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "greengrass-resourcedefinitionversion"
    },
    "AWS::Greengrass::SubscriptionDefinition": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Greengrass::SubscriptionDefinition\"\r\n\tProperties:\r\n\t\tInitialVersion:\r\n\t\t\tSubscriptionDefinitionVersion\r\n\t\tTags: Json\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  LatestVersionArn\r\n  Id\r\n  Arn\r\n  Name\r\n",
        "prefix": "greengrass-subscriptiondefinition"
    },
    "AWS::Greengrass::SubscriptionDefinitionVersion": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Greengrass::SubscriptionDefinitionVersion\"\r\n\tProperties:\r\n\t\tSubscriptionDefinitionId: String #required\r\n\t\tSubscriptions: #required\r\n\t\t\t- Subscription\r\n",
        "description": "No Attributes\r\n",
        "prefix": "greengrass-subscriptiondefinitionversion"
    },
    "AWS::GuardDuty::Detector": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::GuardDuty::Detector\"\r\n\tProperties:\r\n\t\tFindingPublishingFrequency: String\r\n\t\tDataSources:\r\n\t\t\tCFNDataSourceConfigurations\r\n\t\tEnable: Boolean #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "guardduty-detector"
    },
    "AWS::GuardDuty::Filter": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::GuardDuty::Filter\"\r\n\tProperties:\r\n\t\tAction: String #required\r\n\t\tDescription: String #required\r\n\t\tDetectorId: String #required\r\n\t\tFindingCriteria: #required\r\n\t\t\tFindingCriteria\r\n\t\tRank: Integer #required\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "guardduty-filter"
    },
    "AWS::GuardDuty::IPSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::GuardDuty::IPSet\"\r\n\tProperties:\r\n\t\tFormat: String #required\r\n\t\tActivate: Boolean #required\r\n\t\tDetectorId: String #required\r\n\t\tName: String\r\n\t\tLocation: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "guardduty-ipset"
    },
    "AWS::GuardDuty::Master": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::GuardDuty::Master\"\r\n\tProperties:\r\n\t\tDetectorId: String #required\r\n\t\tMasterId: String #required\r\n\t\tInvitationId: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "guardduty-master"
    },
    "AWS::GuardDuty::Member": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::GuardDuty::Member\"\r\n\tProperties:\r\n\t\tStatus: String\r\n\t\tMemberId: String #required\r\n\t\tEmail: String #required\r\n\t\tMessage: String\r\n\t\tDisableEmailNotification: Boolean\r\n\t\tDetectorId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "guardduty-member"
    },
    "AWS::GuardDuty::ThreatIntelSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::GuardDuty::ThreatIntelSet\"\r\n\tProperties:\r\n\t\tFormat: String #required\r\n\t\tActivate: Boolean #required\r\n\t\tDetectorId: String #required\r\n\t\tName: String\r\n\t\tLocation: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "guardduty-threatintelset"
    },
    "AWS::IAM::AccessKey": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IAM::AccessKey\"\r\n\tProperties:\r\n\t\tSerial: Integer\r\n\t\tStatus: String\r\n\t\tUserName: String #required\r\n",
        "description": "Attributes:\r\n  SecretAccessKey\r\n",
        "prefix": "iam-accesskey"
    },
    "AWS::IAM::Group": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IAM::Group\"\r\n\tProperties:\r\n\t\tGroupName: String\r\n\t\tManagedPolicyArns:\r\n\t\t\t- String\r\n\t\tPath: String\r\n\t\tPolicies:\r\n\t\t\t- Policy\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "iam-group"
    },
    "AWS::IAM::InstanceProfile": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IAM::InstanceProfile\"\r\n\tProperties:\r\n\t\tInstanceProfileName: String\r\n\t\tPath: String\r\n\t\tRoles: #required\r\n\t\t\t- String\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "iam-instanceprofile"
    },
    "AWS::IAM::ManagedPolicy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IAM::ManagedPolicy\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tGroups:\r\n\t\t\t- String\r\n\t\tManagedPolicyName: String\r\n\t\tPath: String\r\n\t\tPolicyDocument: Json #required\r\n\t\tRoles:\r\n\t\t\t- String\r\n\t\tUsers:\r\n\t\t\t- String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "iam-managedpolicy"
    },
    "AWS::IAM::Policy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IAM::Policy\"\r\n\tProperties:\r\n\t\tGroups:\r\n\t\t\t- String\r\n\t\tPolicyDocument: Json #required\r\n\t\tPolicyName: String #required\r\n\t\tRoles:\r\n\t\t\t- String\r\n\t\tUsers:\r\n\t\t\t- String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "iam-policy"
    },
    "AWS::IAM::Role": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IAM::Role\"\r\n\tProperties:\r\n\t\tAssumeRolePolicyDocument: Json #required\r\n\t\tDescription: String\r\n\t\tManagedPolicyArns:\r\n\t\t\t- String\r\n\t\tMaxSessionDuration: Integer\r\n\t\tPath: String\r\n\t\tPermissionsBoundary: String\r\n\t\tPolicies:\r\n\t\t\t- Policy\r\n\t\tRoleName: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n  RoleId\r\n",
        "prefix": "iam-role"
    },
    "AWS::IAM::ServiceLinkedRole": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IAM::ServiceLinkedRole\"\r\n\tProperties:\r\n\t\tCustomSuffix: String\r\n\t\tDescription: String\r\n\t\tAWSServiceName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "iam-servicelinkedrole"
    },
    "AWS::IAM::User": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IAM::User\"\r\n\tProperties:\r\n\t\tGroups:\r\n\t\t\t- String\r\n\t\tLoginProfile:\r\n\t\t\tLoginProfile\r\n\t\tManagedPolicyArns:\r\n\t\t\t- String\r\n\t\tPath: String\r\n\t\tPermissionsBoundary: String\r\n\t\tPolicies:\r\n\t\t\t- Policy\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tUserName: String\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "iam-user"
    },
    "AWS::IAM::UserToGroupAddition": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IAM::UserToGroupAddition\"\r\n\tProperties:\r\n\t\tGroupName: String #required\r\n\t\tUsers: #required\r\n\t\t\t- String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "iam-usertogroupaddition"
    },
    "AWS::IVS::Channel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IVS::Channel\"\r\n\tProperties:\r\n\t\tName: String\r\n\t\tAuthorized: Boolean\r\n\t\tLatencyMode: String\r\n\t\tType: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n  PlaybackUrl\r\n  IngestEndpoint\r\n",
        "prefix": "ivs-channel"
    },
    "AWS::IVS::PlaybackKeyPair": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IVS::PlaybackKeyPair\"\r\n\tProperties:\r\n\t\tName: String\r\n\t\tPublicKeyMaterial: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Fingerprint\r\n  Arn\r\n",
        "prefix": "ivs-playbackkeypair"
    },
    "AWS::IVS::StreamKey": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IVS::StreamKey\"\r\n\tProperties:\r\n\t\tChannelArn: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Value\r\n",
        "prefix": "ivs-streamkey"
    },
    "AWS::ImageBuilder::Component": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ImageBuilder::Component\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tVersion: String #required\r\n\t\tDescription: String\r\n\t\tChangeDescription: String\r\n\t\tPlatform: String #required\r\n\t\tData: String\r\n\t\tKmsKeyId: String\r\n\t\tTags:\r\n\t\t\tMap\r\n\t\tUri: String\r\n\t\tSupportedOsVersions:\r\n\t\t\t- String\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Type\r\n  Encrypted\r\n",
        "prefix": "imagebuilder-component"
    },
    "AWS::ImageBuilder::DistributionConfiguration": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ImageBuilder::DistributionConfiguration\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tDescription: String\r\n\t\tDistributions: #required\r\n\t\t\t- Distribution\r\n\t\tTags:\r\n\t\t\tMap\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "imagebuilder-distributionconfiguration"
    },
    "AWS::ImageBuilder::Image": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ImageBuilder::Image\"\r\n\tProperties:\r\n\t\tImageTestsConfiguration:\r\n\t\t\tImageTestsConfiguration\r\n\t\tImageRecipeArn: String #required\r\n\t\tDistributionConfigurationArn: String\r\n\t\tInfrastructureConfigurationArn: String #required\r\n\t\tEnhancedImageMetadataEnabled: Boolean\r\n\t\tTags:\r\n\t\t\tMap\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Name\r\n  ImageId\r\n",
        "prefix": "imagebuilder-image"
    },
    "AWS::ImageBuilder::ImagePipeline": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ImageBuilder::ImagePipeline\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tDescription: String\r\n\t\tImageTestsConfiguration:\r\n\t\t\tImageTestsConfiguration\r\n\t\tStatus: String\r\n\t\tSchedule:\r\n\t\t\tSchedule\r\n\t\tImageRecipeArn: String #required\r\n\t\tDistributionConfigurationArn: String\r\n\t\tInfrastructureConfigurationArn: String #required\r\n\t\tEnhancedImageMetadataEnabled: Boolean\r\n\t\tTags:\r\n\t\t\tMap\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "imagebuilder-imagepipeline"
    },
    "AWS::ImageBuilder::ImageRecipe": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ImageBuilder::ImageRecipe\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tDescription: String\r\n\t\tVersion: String #required\r\n\t\tComponents: #required\r\n\t\t\t- ComponentConfiguration\r\n\t\tBlockDeviceMappings:\r\n\t\t\t- InstanceBlockDeviceMapping\r\n\t\tParentImage: String #required\r\n\t\tWorkingDirectory: String\r\n\t\tTags:\r\n\t\t\tMap\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "imagebuilder-imagerecipe"
    },
    "AWS::ImageBuilder::InfrastructureConfiguration": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ImageBuilder::InfrastructureConfiguration\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tDescription: String\r\n\t\tInstanceTypes:\r\n\t\t\t- String\r\n\t\tSecurityGroupIds:\r\n\t\t\t- String\r\n\t\tLogging:\r\n\t\t\tLogging\r\n\t\tSubnetId: String\r\n\t\tKeyPair: String\r\n\t\tTerminateInstanceOnFailure: Boolean\r\n\t\tInstanceProfileName: String #required\r\n\t\tSnsTopicArn: String\r\n\t\tResourceTags:\r\n\t\t\tMap\r\n\t\tTags:\r\n\t\t\tMap\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "imagebuilder-infrastructureconfiguration"
    },
    "AWS::Inspector::AssessmentTarget": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Inspector::AssessmentTarget\"\r\n\tProperties:\r\n\t\tAssessmentTargetName: String\r\n\t\tResourceGroupArn: String\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "inspector-assessmenttarget"
    },
    "AWS::Inspector::AssessmentTemplate": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Inspector::AssessmentTemplate\"\r\n\tProperties:\r\n\t\tAssessmentTargetArn: String #required\r\n\t\tDurationInSeconds: Integer #required\r\n\t\tAssessmentTemplateName: String\r\n\t\tRulesPackageArns: #required\r\n\t\t\t- String\r\n\t\tUserAttributesForFindings:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "inspector-assessmenttemplate"
    },
    "AWS::Inspector::ResourceGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Inspector::ResourceGroup\"\r\n\tProperties:\r\n\t\tResourceGroupTags: #required\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "inspector-resourcegroup"
    },
    "AWS::IoT1Click::Device": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoT1Click::Device\"\r\n\tProperties:\r\n\t\tDeviceId: String #required\r\n\t\tEnabled: Boolean #required\r\n",
        "description": "Attributes:\r\n  DeviceId\r\n  Enabled\r\n  Arn\r\n",
        "prefix": "iot1click-device"
    },
    "AWS::IoT1Click::Placement": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoT1Click::Placement\"\r\n\tProperties:\r\n\t\tPlacementName: String\r\n\t\tProjectName: String #required\r\n\t\tAssociatedDevices: Json\r\n\t\tAttributes: Json\r\n",
        "description": "Attributes:\r\n  PlacementName\r\n  ProjectName\r\n",
        "prefix": "iot1click-placement"
    },
    "AWS::IoT1Click::Project": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoT1Click::Project\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tPlacementTemplate: #required\r\n\t\t\tPlacementTemplate\r\n\t\tProjectName: String\r\n",
        "description": "Attributes:\r\n  ProjectName\r\n  Arn\r\n",
        "prefix": "iot1click-project"
    },
    "AWS::IoT::Authorizer": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoT::Authorizer\"\r\n\tProperties:\r\n\t\tAuthorizerFunctionArn: String #required\r\n\t\tAuthorizerName: String\r\n\t\tSigningDisabled: Boolean\r\n\t\tStatus: String\r\n\t\tTokenKeyName: String\r\n\t\tTokenSigningPublicKeys:\r\n\t\t\tTokenSigningPublicKeys\r\n\t\tTags:\r\n\t\t\tTags\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "iot-authorizer"
    },
    "AWS::IoT::Certificate": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoT::Certificate\"\r\n\tProperties:\r\n\t\tCACertificatePem: String\r\n\t\tCertificatePem: String\r\n\t\tCertificateSigningRequest: String\r\n\t\tCertificateMode: String\r\n\t\tStatus: String #required\r\n",
        "description": "Attributes:\r\n  Id\r\n  Arn\r\n",
        "prefix": "iot-certificate"
    },
    "AWS::IoT::DomainConfiguration": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoT::DomainConfiguration\"\r\n\tProperties:\r\n\t\tDomainConfigurationName: String\r\n\t\tAuthorizerConfig:\r\n\t\t\tAuthorizerConfig\r\n\t\tDomainName: String\r\n\t\tServerCertificateArns:\r\n\t\t\t- String\r\n\t\tServiceType: String\r\n\t\tValidationCertificateArn: String\r\n\t\tDomainConfigurationStatus: String\r\n\t\tTags:\r\n\t\t\tTags\r\n",
        "description": "Attributes:\r\n  Arn\r\n  DomainType\r\n  ServerCertificates\r\n",
        "prefix": "iot-domainconfiguration"
    },
    "AWS::IoT::Policy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoT::Policy\"\r\n\tProperties:\r\n\t\tPolicyDocument: Json #required\r\n\t\tPolicyName: String\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "iot-policy"
    },
    "AWS::IoT::PolicyPrincipalAttachment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoT::PolicyPrincipalAttachment\"\r\n\tProperties:\r\n\t\tPolicyName: String #required\r\n\t\tPrincipal: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "iot-policyprincipalattachment"
    },
    "AWS::IoT::ProvisioningTemplate": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoT::ProvisioningTemplate\"\r\n\tProperties:\r\n\t\tTemplateName: String\r\n\t\tDescription: String\r\n\t\tEnabled: Boolean\r\n\t\tProvisioningRoleArn: String #required\r\n\t\tTemplateBody: String #required\r\n\t\tPreProvisioningHook:\r\n\t\t\tProvisioningHook\r\n\t\tTags:\r\n\t\t\tTags\r\n",
        "description": "Attributes:\r\n  TemplateArn\r\n",
        "prefix": "iot-provisioningtemplate"
    },
    "AWS::IoT::Thing": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoT::Thing\"\r\n\tProperties:\r\n\t\tAttributePayload:\r\n\t\t\tAttributePayload\r\n\t\tThingName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "iot-thing"
    },
    "AWS::IoT::ThingPrincipalAttachment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoT::ThingPrincipalAttachment\"\r\n\tProperties:\r\n\t\tPrincipal: String #required\r\n\t\tThingName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "iot-thingprincipalattachment"
    },
    "AWS::IoT::TopicRule": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoT::TopicRule\"\r\n\tProperties:\r\n\t\tRuleName: String\r\n\t\tTopicRulePayload: #required\r\n\t\t\tTopicRulePayload\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "iot-topicrule"
    },
    "AWS::IoT::TopicRuleDestination": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoT::TopicRuleDestination\"\r\n\tProperties:\r\n\t\tStatus: String\r\n\t\tHttpUrlProperties:\r\n\t\t\tHttpUrlDestinationSummary\r\n",
        "description": "Attributes:\r\n  Arn\r\n  StatusReason\r\n",
        "prefix": "iot-topicruledestination"
    },
    "AWS::IoTAnalytics::Channel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoTAnalytics::Channel\"\r\n\tProperties:\r\n\t\tChannelName: String\r\n\t\tChannelStorage:\r\n\t\t\tChannelStorage\r\n\t\tRetentionPeriod:\r\n\t\t\tRetentionPeriod\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "iotanalytics-channel"
    },
    "AWS::IoTAnalytics::Dataset": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoTAnalytics::Dataset\"\r\n\tProperties:\r\n\t\tActions: #required\r\n\t\t\t- Action\r\n\t\tDatasetName: String\r\n\t\tContentDeliveryRules:\r\n\t\t\t- DatasetContentDeliveryRule\r\n\t\tTriggers:\r\n\t\t\t- Trigger\r\n\t\tVersioningConfiguration:\r\n\t\t\tVersioningConfiguration\r\n\t\tRetentionPeriod:\r\n\t\t\tRetentionPeriod\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "iotanalytics-dataset"
    },
    "AWS::IoTAnalytics::Datastore": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoTAnalytics::Datastore\"\r\n\tProperties:\r\n\t\tDatastoreStorage:\r\n\t\t\tDatastoreStorage\r\n\t\tDatastoreName: String\r\n\t\tRetentionPeriod:\r\n\t\t\tRetentionPeriod\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "iotanalytics-datastore"
    },
    "AWS::IoTAnalytics::Pipeline": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoTAnalytics::Pipeline\"\r\n\tProperties:\r\n\t\tPipelineName: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tPipelineActivities: #required\r\n\t\t\t- Activity\r\n",
        "description": "No Attributes\r\n",
        "prefix": "iotanalytics-pipeline"
    },
    "AWS::IoTEvents::DetectorModel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoTEvents::DetectorModel\"\r\n\tProperties:\r\n\t\tDetectorModelDefinition:\r\n\t\t\tDetectorModelDefinition\r\n\t\tEvaluationMethod: String\r\n\t\tDetectorModelName: String\r\n\t\tDetectorModelDescription: String\r\n\t\tKey: String\r\n\t\tRoleArn: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "iotevents-detectormodel"
    },
    "AWS::IoTEvents::Input": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoTEvents::Input\"\r\n\tProperties:\r\n\t\tInputDefinition:\r\n\t\t\tInputDefinition\r\n\t\tInputName: String\r\n\t\tInputDescription: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "iotevents-input"
    },
    "AWS::IoTSiteWise::Asset": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoTSiteWise::Asset\"\r\n\tProperties:\r\n\t\tAssetModelId: String #required\r\n\t\tAssetName: String #required\r\n\t\tAssetProperties:\r\n\t\t\t- AssetProperty\r\n\t\tAssetHierarchies:\r\n\t\t\t- AssetHierarchy\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  AssetId\r\n  AssetArn\r\n",
        "prefix": "iotsitewise-asset"
    },
    "AWS::IoTSiteWise::AssetModel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoTSiteWise::AssetModel\"\r\n\tProperties:\r\n\t\tAssetModelName: String #required\r\n\t\tAssetModelDescription: String\r\n\t\tAssetModelProperties:\r\n\t\t\t- AssetModelProperty\r\n\t\tAssetModelHierarchies:\r\n\t\t\t- AssetModelHierarchy\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  AssetModelId\r\n  AssetModelArn\r\n",
        "prefix": "iotsitewise-assetmodel"
    },
    "AWS::IoTSiteWise::Gateway": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoTSiteWise::Gateway\"\r\n\tProperties:\r\n\t\tGatewayName: String #required\r\n\t\tGatewayPlatform: #required\r\n\t\t\tGatewayPlatform\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tGatewayCapabilitySummaries:\r\n\t\t\t- GatewayCapabilitySummary\r\n",
        "description": "Attributes:\r\n  GatewayId\r\n",
        "prefix": "iotsitewise-gateway"
    },
    "AWS::IoTThingsGraph::FlowTemplate": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::IoTThingsGraph::FlowTemplate\"\r\n\tProperties:\r\n\t\tCompatibleNamespaceVersion: Double\r\n\t\tDefinition: #required\r\n\t\t\tDefinitionDocument\r\n",
        "description": "No Attributes\r\n",
        "prefix": "iotthingsgraph-flowtemplate"
    },
    "AWS::KMS::Alias": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::KMS::Alias\"\r\n\tProperties:\r\n\t\tAliasName: String #required\r\n\t\tTargetKeyId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "kms-alias"
    },
    "AWS::KMS::Key": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::KMS::Key\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tEnabled: Boolean\r\n\t\tEnableKeyRotation: Boolean\r\n\t\tKeyPolicy:  #required\r\n\t\tKeyUsage: String\r\n\t\tKeySpec: String\r\n\t\tPendingWindowInDays: Integer\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n  KeyId\r\n",
        "prefix": "kms-key"
    },
    "AWS::Kendra::DataSource": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Kendra::DataSource\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tIndexId: String #required\r\n\t\tType: String #required\r\n\t\tDataSourceConfiguration:\r\n\t\t\tDataSourceConfiguration\r\n\t\tDescription: String\r\n\t\tSchedule: String\r\n\t\tRoleArn: String\r\n\t\tTags:\r\n\t\t\tTagList\r\n",
        "description": "Attributes:\r\n  Id\r\n  Arn\r\n",
        "prefix": "kendra-datasource"
    },
    "AWS::Kendra::Faq": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Kendra::Faq\"\r\n\tProperties:\r\n\t\tIndexId: String #required\r\n\t\tName: String #required\r\n\t\tDescription: String\r\n\t\tFileFormat: String\r\n\t\tS3Path: #required\r\n\t\t\tS3Path\r\n\t\tRoleArn: String #required\r\n\t\tTags:\r\n\t\t\tTagList\r\n",
        "description": "Attributes:\r\n  Id\r\n  Arn\r\n",
        "prefix": "kendra-faq"
    },
    "AWS::Kendra::Index": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Kendra::Index\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tServerSideEncryptionConfiguration:\r\n\t\t\tServerSideEncryptionConfiguration\r\n\t\tTags:\r\n\t\t\tTagList\r\n\t\tName: String #required\r\n\t\tRoleArn: String #required\r\n\t\tEdition: String #required\r\n\t\tDocumentMetadataConfigurations:\r\n\t\t\tDocumentMetadataConfigurationList\r\n\t\tCapacityUnits:\r\n\t\t\tCapacityUnitsConfiguration\r\n",
        "description": "Attributes:\r\n  Id\r\n  Arn\r\n",
        "prefix": "kendra-index"
    },
    "AWS::Kinesis::Stream": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Kinesis::Stream\"\r\n\tProperties:\r\n\t\tName: String\r\n\t\tRetentionPeriodHours: Integer\r\n\t\tShardCount: Integer #required\r\n\t\tStreamEncryption:\r\n\t\t\tStreamEncryption\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "kinesis-stream"
    },
    "AWS::Kinesis::StreamConsumer": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Kinesis::StreamConsumer\"\r\n\tProperties:\r\n\t\tConsumerName: String #required\r\n\t\tStreamARN: String #required\r\n",
        "description": "Attributes:\r\n  ConsumerCreationTimestamp\r\n  ConsumerName\r\n  ConsumerARN\r\n  ConsumerStatus\r\n  StreamARN\r\n",
        "prefix": "kinesis-streamconsumer"
    },
    "AWS::KinesisAnalytics::Application": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::KinesisAnalytics::Application\"\r\n\tProperties:\r\n\t\tApplicationName: String\r\n\t\tInputs: #required\r\n\t\t\t- Input\r\n\t\tApplicationDescription: String\r\n\t\tApplicationCode: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "kinesisanalytics-application"
    },
    "AWS::KinesisAnalytics::ApplicationOutput": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::KinesisAnalytics::ApplicationOutput\"\r\n\tProperties:\r\n\t\tApplicationName: String #required\r\n\t\tOutput: #required\r\n\t\t\tOutput\r\n",
        "description": "No Attributes\r\n",
        "prefix": "kinesisanalytics-applicationoutput"
    },
    "AWS::KinesisAnalytics::ApplicationReferenceDataSource": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::KinesisAnalytics::ApplicationReferenceDataSource\"\r\n\tProperties:\r\n\t\tApplicationName: String #required\r\n\t\tReferenceDataSource: #required\r\n\t\t\tReferenceDataSource\r\n",
        "description": "No Attributes\r\n",
        "prefix": "kinesisanalytics-applicationreferencedatasource"
    },
    "AWS::KinesisAnalyticsV2::Application": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::KinesisAnalyticsV2::Application\"\r\n\tProperties:\r\n\t\tApplicationName: String\r\n\t\tRuntimeEnvironment: String #required\r\n\t\tApplicationConfiguration:\r\n\t\t\tApplicationConfiguration\r\n\t\tApplicationDescription: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tServiceExecutionRole: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "kinesisanalyticsv2-application"
    },
    "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption\"\r\n\tProperties:\r\n\t\tApplicationName: String #required\r\n\t\tCloudWatchLoggingOption: #required\r\n\t\t\tCloudWatchLoggingOption\r\n",
        "description": "No Attributes\r\n",
        "prefix": "kinesisanalyticsv2-applicationcloudwatchloggingoption"
    },
    "AWS::KinesisAnalyticsV2::ApplicationOutput": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::KinesisAnalyticsV2::ApplicationOutput\"\r\n\tProperties:\r\n\t\tApplicationName: String #required\r\n\t\tOutput: #required\r\n\t\t\tOutput\r\n",
        "description": "No Attributes\r\n",
        "prefix": "kinesisanalyticsv2-applicationoutput"
    },
    "AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::KinesisAnalyticsV2::ApplicationReferenceDataSource\"\r\n\tProperties:\r\n\t\tApplicationName: String #required\r\n\t\tReferenceDataSource: #required\r\n\t\t\tReferenceDataSource\r\n",
        "description": "No Attributes\r\n",
        "prefix": "kinesisanalyticsv2-applicationreferencedatasource"
    },
    "AWS::KinesisFirehose::DeliveryStream": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::KinesisFirehose::DeliveryStream\"\r\n\tProperties:\r\n\t\tDeliveryStreamEncryptionConfigurationInput:\r\n\t\t\tDeliveryStreamEncryptionConfigurationInput\r\n\t\tDeliveryStreamName: String\r\n\t\tDeliveryStreamType: String\r\n\t\tElasticsearchDestinationConfiguration:\r\n\t\t\tElasticsearchDestinationConfiguration\r\n\t\tExtendedS3DestinationConfiguration:\r\n\t\t\tExtendedS3DestinationConfiguration\r\n\t\tKinesisStreamSourceConfiguration:\r\n\t\t\tKinesisStreamSourceConfiguration\r\n\t\tRedshiftDestinationConfiguration:\r\n\t\t\tRedshiftDestinationConfiguration\r\n\t\tS3DestinationConfiguration:\r\n\t\t\tS3DestinationConfiguration\r\n\t\tSplunkDestinationConfiguration:\r\n\t\t\tSplunkDestinationConfiguration\r\n\t\tHttpEndpointDestinationConfiguration:\r\n\t\t\tHttpEndpointDestinationConfiguration\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "kinesisfirehose-deliverystream"
    },
    "AWS::LakeFormation::DataLakeSettings": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::LakeFormation::DataLakeSettings\"\r\n\tProperties:\r\n\t\tAdmins:\r\n\t\t\tAdmins\r\n\t\tTrustedResourceOwners:\r\n\t\t\t- String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "lakeformation-datalakesettings"
    },
    "AWS::LakeFormation::Permissions": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::LakeFormation::Permissions\"\r\n\tProperties:\r\n\t\tDataLakePrincipal: #required\r\n\t\t\tDataLakePrincipal\r\n\t\tResource: #required\r\n\t\t\tResource\r\n\t\tPermissions:\r\n\t\t\t- String\r\n\t\tPermissionsWithGrantOption:\r\n\t\t\t- String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "lakeformation-permissions"
    },
    "AWS::LakeFormation::Resource": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::LakeFormation::Resource\"\r\n\tProperties:\r\n\t\tResourceArn: String #required\r\n\t\tUseServiceLinkedRole: Boolean #required\r\n\t\tRoleArn: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "lakeformation-resource"
    },
    "AWS::Lambda::Alias": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Lambda::Alias\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tFunctionName: String #required\r\n\t\tFunctionVersion: String #required\r\n\t\tName: String #required\r\n\t\tProvisionedConcurrencyConfig:\r\n\t\t\tProvisionedConcurrencyConfiguration\r\n\t\tRoutingConfig:\r\n\t\t\tAliasRoutingConfiguration\r\n",
        "description": "No Attributes\r\n",
        "prefix": "lambda-alias"
    },
    "AWS::Lambda::CodeSigningConfig": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Lambda::CodeSigningConfig\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tAllowedPublishers: #required\r\n\t\t\tAllowedPublishers\r\n\t\tCodeSigningPolicies:\r\n\t\t\tCodeSigningPolicies\r\n",
        "description": "Attributes:\r\n  CodeSigningConfigId\r\n  CodeSigningConfigArn\r\n",
        "prefix": "lambda-codesigningconfig"
    },
    "AWS::Lambda::EventInvokeConfig": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Lambda::EventInvokeConfig\"\r\n\tProperties:\r\n\t\tFunctionName: String #required\r\n\t\tMaximumRetryAttempts: Integer\r\n\t\tDestinationConfig:\r\n\t\t\tDestinationConfig\r\n\t\tQualifier: String #required\r\n\t\tMaximumEventAgeInSeconds: Integer\r\n",
        "description": "No Attributes\r\n",
        "prefix": "lambda-eventinvokeconfig"
    },
    "AWS::Lambda::EventSourceMapping": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Lambda::EventSourceMapping\"\r\n\tProperties:\r\n\t\tBatchSize: Integer\r\n\t\tBisectBatchOnFunctionError: Boolean\r\n\t\tDestinationConfig:\r\n\t\t\tDestinationConfig\r\n\t\tEnabled: Boolean\r\n\t\tEventSourceArn: String #required\r\n\t\tFunctionName: String #required\r\n\t\tMaximumBatchingWindowInSeconds: Integer\r\n\t\tMaximumRecordAgeInSeconds: Integer\r\n\t\tMaximumRetryAttempts: Integer\r\n\t\tParallelizationFactor: Integer\r\n\t\tStartingPosition: String\r\n\t\tTopics:\r\n\t\t\t- String\r\n\t\tQueues:\r\n\t\t\t- String\r\n\t\tSourceAccessConfigurations:\r\n\t\t\t- SourceAccessConfiguration\r\n\t\tPartialBatchResponse: Boolean\r\n\t\tTumblingWindowInSeconds: Integer\r\n",
        "description": "Attributes:\r\n  Id\r\n",
        "prefix": "lambda-eventsourcemapping"
    },
    "AWS::Lambda::Function": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Lambda::Function\"\r\n\tProperties:\r\n\t\tCode: #required\r\n\t\t\tCode\r\n\t\tCodeSigningConfigArn: String\r\n\t\tDeadLetterConfig:\r\n\t\t\tDeadLetterConfig\r\n\t\tDescription: String\r\n\t\tEnvironment:\r\n\t\t\tEnvironment\r\n\t\tFileSystemConfigs:\r\n\t\t\t- FileSystemConfig\r\n\t\tFunctionName: String\r\n\t\tHandler: String #required\r\n\t\tKmsKeyArn: String\r\n\t\tLayers:\r\n\t\t\t- String\r\n\t\tMemorySize: Integer\r\n\t\tReservedConcurrentExecutions: Integer\r\n\t\tRole: String #required\r\n\t\tRuntime: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTimeout: Integer\r\n\t\tTracingConfig:\r\n\t\t\tTracingConfig\r\n\t\tVpcConfig:\r\n\t\t\tVpcConfig\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "lambda-function"
    },
    "AWS::Lambda::LayerVersion": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Lambda::LayerVersion\"\r\n\tProperties:\r\n\t\tCompatibleRuntimes:\r\n\t\t\t- String\r\n\t\tLicenseInfo: String\r\n\t\tDescription: String\r\n\t\tLayerName: String\r\n\t\tContent: #required\r\n\t\t\tContent\r\n",
        "description": "No Attributes\r\n",
        "prefix": "lambda-layerversion"
    },
    "AWS::Lambda::LayerVersionPermission": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Lambda::LayerVersionPermission\"\r\n\tProperties:\r\n\t\tAction: String #required\r\n\t\tLayerVersionArn: String #required\r\n\t\tOrganizationId: String\r\n\t\tPrincipal: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "lambda-layerversionpermission"
    },
    "AWS::Lambda::Permission": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Lambda::Permission\"\r\n\tProperties:\r\n\t\tAction: String #required\r\n\t\tEventSourceToken: String\r\n\t\tFunctionName: String #required\r\n\t\tPrincipal: String #required\r\n\t\tSourceAccount: String\r\n\t\tSourceArn: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "lambda-permission"
    },
    "AWS::Lambda::Version": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Lambda::Version\"\r\n\tProperties:\r\n\t\tCodeSha256: String\r\n\t\tDescription: String\r\n\t\tFunctionName: String #required\r\n\t\tProvisionedConcurrencyConfig:\r\n\t\t\tProvisionedConcurrencyConfiguration\r\n",
        "description": "Attributes:\r\n  Version\r\n",
        "prefix": "lambda-version"
    },
    "AWS::Logs::Destination": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Logs::Destination\"\r\n\tProperties:\r\n\t\tDestinationName: String #required\r\n\t\tDestinationPolicy: String #required\r\n\t\tRoleArn: String #required\r\n\t\tTargetArn: String #required\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "logs-destination"
    },
    "AWS::Logs::LogGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Logs::LogGroup\"\r\n\tProperties:\r\n\t\tLogGroupName: String\r\n\t\tKmsKeyId: String\r\n\t\tRetentionInDays: Integer\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "logs-loggroup"
    },
    "AWS::Logs::LogStream": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Logs::LogStream\"\r\n\tProperties:\r\n\t\tLogGroupName: String #required\r\n\t\tLogStreamName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "logs-logstream"
    },
    "AWS::Logs::MetricFilter": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Logs::MetricFilter\"\r\n\tProperties:\r\n\t\tFilterPattern: String #required\r\n\t\tLogGroupName: String #required\r\n\t\tMetricTransformations: #required\r\n\t\t\t- MetricTransformation\r\n",
        "description": "No Attributes\r\n",
        "prefix": "logs-metricfilter"
    },
    "AWS::Logs::SubscriptionFilter": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Logs::SubscriptionFilter\"\r\n\tProperties:\r\n\t\tDestinationArn: String #required\r\n\t\tFilterPattern: String #required\r\n\t\tLogGroupName: String #required\r\n\t\tRoleArn: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "logs-subscriptionfilter"
    },
    "AWS::MSK::Cluster": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::MSK::Cluster\"\r\n\tProperties:\r\n\t\tBrokerNodeGroupInfo: #required\r\n\t\t\tBrokerNodeGroupInfo\r\n\t\tEnhancedMonitoring: String\r\n\t\tKafkaVersion: String #required\r\n\t\tNumberOfBrokerNodes: Integer #required\r\n\t\tEncryptionInfo:\r\n\t\t\tEncryptionInfo\r\n\t\tOpenMonitoring:\r\n\t\t\tOpenMonitoring\r\n\t\tClusterName: String #required\r\n\t\tClientAuthentication:\r\n\t\t\tClientAuthentication\r\n\t\tLoggingInfo:\r\n\t\t\tLoggingInfo\r\n\t\tTags: Json\r\n\t\tConfigurationInfo:\r\n\t\t\tConfigurationInfo\r\n",
        "description": "No Attributes\r\n",
        "prefix": "msk-cluster"
    },
    "AWS::Macie::CustomDataIdentifier": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Macie::CustomDataIdentifier\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tDescription: String\r\n\t\tRegex: String #required\r\n\t\tMaximumMatchDistance: Integer\r\n\t\tKeywords:\r\n\t\t\t- String\r\n\t\tIgnoreWords:\r\n\t\t\t- String\r\n",
        "description": "Attributes:\r\n  Id\r\n  Arn\r\n  CreatedAt\r\n  Deleted\r\n",
        "prefix": "macie-customdataidentifier"
    },
    "AWS::Macie::FindingsFilter": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Macie::FindingsFilter\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tDescription: String\r\n\t\tFindingCriteria: #required\r\n\t\t\tFindingCriteria\r\n\t\tAction: String\r\n\t\tPosition: Integer\r\n",
        "description": "Attributes:\r\n  Id\r\n  Arn\r\n  FindingsFilterListItems\r\n",
        "prefix": "macie-findingsfilter"
    },
    "AWS::Macie::Session": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Macie::Session\"\r\n\tProperties:\r\n\t\tStatus: String\r\n\t\tFindingPublishingFrequency: String\r\n",
        "description": "Attributes:\r\n  AwsAccountId\r\n  ServiceRole\r\n",
        "prefix": "macie-session"
    },
    "AWS::ManagedBlockchain::Member": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ManagedBlockchain::Member\"\r\n\tProperties:\r\n\t\tMemberConfiguration: #required\r\n\t\t\tMemberConfiguration\r\n\t\tNetworkConfiguration:\r\n\t\t\tNetworkConfiguration\r\n\t\tNetworkId: String\r\n\t\tInvitationId: String\r\n",
        "description": "Attributes:\r\n  MemberId\r\n  NetworkId\r\n",
        "prefix": "managedblockchain-member"
    },
    "AWS::ManagedBlockchain::Node": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ManagedBlockchain::Node\"\r\n\tProperties:\r\n\t\tMemberId: String #required\r\n\t\tNetworkId: String #required\r\n\t\tNodeConfiguration: #required\r\n\t\t\tNodeConfiguration\r\n",
        "description": "Attributes:\r\n  MemberId\r\n  NodeId\r\n  Arn\r\n  NetworkId\r\n",
        "prefix": "managedblockchain-node"
    },
    "AWS::MediaConvert::JobTemplate": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::MediaConvert::JobTemplate\"\r\n\tProperties:\r\n\t\tCategory: String\r\n\t\tDescription: String\r\n\t\tAccelerationSettings:\r\n\t\t\tAccelerationSettings\r\n\t\tPriority: Integer\r\n\t\tStatusUpdateInterval: String\r\n\t\tSettingsJson: Json #required\r\n\t\tQueue: String\r\n\t\tHopDestinations:\r\n\t\t\t- HopDestination\r\n\t\tTags: Json\r\n\t\tName: String\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Name\r\n",
        "prefix": "mediaconvert-jobtemplate"
    },
    "AWS::MediaConvert::Preset": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::MediaConvert::Preset\"\r\n\tProperties:\r\n\t\tCategory: String\r\n\t\tDescription: String\r\n\t\tSettingsJson: Json #required\r\n\t\tTags: Json\r\n\t\tName: String\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Name\r\n",
        "prefix": "mediaconvert-preset"
    },
    "AWS::MediaConvert::Queue": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::MediaConvert::Queue\"\r\n\tProperties:\r\n\t\tStatus: String\r\n\t\tDescription: String\r\n\t\tPricingPlan: String\r\n\t\tTags: Json\r\n\t\tName: String\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Name\r\n",
        "prefix": "mediaconvert-queue"
    },
    "AWS::MediaLive::Channel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::MediaLive::Channel\"\r\n\tProperties:\r\n\t\tInputAttachments:\r\n\t\t\t- InputAttachment\r\n\t\tInputSpecification:\r\n\t\t\tInputSpecification\r\n\t\tChannelClass: String\r\n\t\tEncoderSettings:\r\n\t\t\tEncoderSettings\r\n\t\tDestinations:\r\n\t\t\t- OutputDestination\r\n\t\tLogLevel: String\r\n\t\tRoleArn: String\r\n\t\tTags: Json\r\n\t\tName: String\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Inputs\r\n",
        "prefix": "medialive-channel"
    },
    "AWS::MediaLive::Input": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::MediaLive::Input\"\r\n\tProperties:\r\n\t\tType: String\r\n\t\tDestinations:\r\n\t\t\t- InputDestinationRequest\r\n\t\tVpc:\r\n\t\t\tInputVpcRequest\r\n\t\tMediaConnectFlows:\r\n\t\t\t- MediaConnectFlowRequest\r\n\t\tInputSecurityGroups:\r\n\t\t\t- String\r\n\t\tInputDevices:\r\n\t\t\t- InputDeviceSettings\r\n\t\tSources:\r\n\t\t\t- InputSourceRequest\r\n\t\tRoleArn: String\r\n\t\tTags: Json\r\n\t\tName: String\r\n",
        "description": "Attributes:\r\n  Destinations\r\n  Arn\r\n  Sources\r\n",
        "prefix": "medialive-input"
    },
    "AWS::MediaLive::InputSecurityGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::MediaLive::InputSecurityGroup\"\r\n\tProperties:\r\n\t\tWhitelistRules:\r\n\t\t\t- InputWhitelistRuleCidr\r\n\t\tTags: Json\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "medialive-inputsecuritygroup"
    },
    "AWS::MediaPackage::Asset": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::MediaPackage::Asset\"\r\n\tProperties:\r\n\t\tEgressEndpoints:\r\n\t\t\t- EgressEndpoint\r\n\t\tId: String #required\r\n\t\tPackagingGroupId: String #required\r\n\t\tResourceId: String\r\n\t\tSourceArn: String #required\r\n\t\tSourceRoleArn: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n  CreatedAt\r\n",
        "prefix": "mediapackage-asset"
    },
    "AWS::MediaPackage::Channel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::MediaPackage::Channel\"\r\n\tProperties:\r\n\t\tId: String #required\r\n\t\tDescription: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n  HlsIngest\r\n",
        "prefix": "mediapackage-channel"
    },
    "AWS::MediaPackage::OriginEndpoint": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::MediaPackage::OriginEndpoint\"\r\n\tProperties:\r\n\t\tId: String #required\r\n\t\tChannelId: String #required\r\n\t\tDescription: String\r\n\t\tWhitelist:\r\n\t\t\t- String\r\n\t\tStartoverWindowSeconds: Integer\r\n\t\tTimeDelaySeconds: Integer\r\n\t\tManifestName: String\r\n\t\tOrigination: String\r\n\t\tAuthorization:\r\n\t\t\tAuthorization\r\n\t\tHlsPackage:\r\n\t\t\tHlsPackage\r\n\t\tDashPackage:\r\n\t\t\tDashPackage\r\n\t\tMssPackage:\r\n\t\t\tMssPackage\r\n\t\tCmafPackage:\r\n\t\t\tCmafPackage\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Url\r\n",
        "prefix": "mediapackage-originendpoint"
    },
    "AWS::MediaPackage::PackagingConfiguration": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::MediaPackage::PackagingConfiguration\"\r\n\tProperties:\r\n\t\tId: String #required\r\n\t\tPackagingGroupId: String #required\r\n\t\tCmafPackage:\r\n\t\t\tCmafPackage\r\n\t\tDashPackage:\r\n\t\t\tDashPackage\r\n\t\tHlsPackage:\r\n\t\t\tHlsPackage\r\n\t\tMssPackage:\r\n\t\t\tMssPackage\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "mediapackage-packagingconfiguration"
    },
    "AWS::MediaPackage::PackagingGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::MediaPackage::PackagingGroup\"\r\n\tProperties:\r\n\t\tId: String #required\r\n\t\tAuthorization:\r\n\t\t\tAuthorization\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n  DomainName\r\n",
        "prefix": "mediapackage-packaginggroup"
    },
    "AWS::MediaStore::Container": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::MediaStore::Container\"\r\n\tProperties:\r\n\t\tPolicy: String\r\n\t\tMetricPolicy:\r\n\t\t\tMetricPolicy\r\n\t\tContainerName: String #required\r\n\t\tCorsPolicy:\r\n\t\t\t- CorsRule\r\n\t\tLifecyclePolicy: String\r\n\t\tAccessLoggingEnabled: Boolean\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Endpoint\r\n",
        "prefix": "mediastore-container"
    },
    "AWS::Neptune::DBCluster": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Neptune::DBCluster\"\r\n\tProperties:\r\n\t\tStorageEncrypted: Boolean\r\n\t\tRestoreToTime: String\r\n\t\tEngineVersion: String\r\n\t\tKmsKeyId: String\r\n\t\tAssociatedRoles:\r\n\t\t\t- DBClusterRole\r\n\t\tAvailabilityZones:\r\n\t\t\t- String\r\n\t\tSnapshotIdentifier: String\r\n\t\tPort: Integer\r\n\t\tDBClusterIdentifier: String\r\n\t\tPreferredMaintenanceWindow: String\r\n\t\tIamAuthEnabled: Boolean\r\n\t\tDBSubnetGroupName: String\r\n\t\tDeletionProtection: Boolean\r\n\t\tPreferredBackupWindow: String\r\n\t\tUseLatestRestorableTime: Boolean\r\n\t\tVpcSecurityGroupIds:\r\n\t\t\t- String\r\n\t\tSourceDBClusterIdentifier: String\r\n\t\tDBClusterParameterGroupName: String\r\n\t\tBackupRetentionPeriod: Integer\r\n\t\tRestoreType: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tEnableCloudwatchLogsExports:\r\n\t\t\t- String\r\n",
        "description": "Attributes:\r\n  ClusterResourceId\r\n  Endpoint\r\n  Port\r\n  ReadEndpoint\r\n",
        "prefix": "neptune-dbcluster"
    },
    "AWS::Neptune::DBClusterParameterGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Neptune::DBClusterParameterGroup\"\r\n\tProperties:\r\n\t\tDescription: String #required\r\n\t\tParameters: Json #required\r\n\t\tFamily: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "neptune-dbclusterparametergroup"
    },
    "AWS::Neptune::DBInstance": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Neptune::DBInstance\"\r\n\tProperties:\r\n\t\tDBParameterGroupName: String\r\n\t\tDBInstanceClass: String #required\r\n\t\tAllowMajorVersionUpgrade: Boolean\r\n\t\tDBClusterIdentifier: String\r\n\t\tAvailabilityZone: String\r\n\t\tPreferredMaintenanceWindow: String\r\n\t\tAutoMinorVersionUpgrade: Boolean\r\n\t\tDBSubnetGroupName: String\r\n\t\tDBInstanceIdentifier: String\r\n\t\tDBSnapshotIdentifier: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Endpoint\r\n  Port\r\n",
        "prefix": "neptune-dbinstance"
    },
    "AWS::Neptune::DBParameterGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Neptune::DBParameterGroup\"\r\n\tProperties:\r\n\t\tDescription: String #required\r\n\t\tParameters: Json #required\r\n\t\tFamily: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "neptune-dbparametergroup"
    },
    "AWS::Neptune::DBSubnetGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Neptune::DBSubnetGroup\"\r\n\tProperties:\r\n\t\tDBSubnetGroupName: String\r\n\t\tDBSubnetGroupDescription: String #required\r\n\t\tSubnetIds: #required\r\n\t\t\t- String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "neptune-dbsubnetgroup"
    },
    "AWS::NetworkFirewall::Firewall": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::NetworkFirewall::Firewall\"\r\n\tProperties:\r\n\t\tFirewallName: String #required\r\n\t\tFirewallPolicyArn: String #required\r\n\t\tVpcId: String #required\r\n\t\tSubnetMappings: #required\r\n\t\t\t- SubnetMapping\r\n\t\tDeleteProtection: Boolean\r\n\t\tSubnetChangeProtection: Boolean\r\n\t\tFirewallPolicyChangeProtection: Boolean\r\n\t\tDescription: String\r\n\t\tTags:\r\n\t\t\tTags\r\n",
        "description": "Attributes:\r\n  FirewallArn\r\n  FirewallId\r\n  EndpointIds\r\n",
        "prefix": "networkfirewall-firewall"
    },
    "AWS::NetworkFirewall::FirewallPolicy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::NetworkFirewall::FirewallPolicy\"\r\n\tProperties:\r\n\t\tFirewallPolicyName: String #required\r\n\t\tFirewallPolicy: #required\r\n\t\t\tFirewallPolicy\r\n\t\tDescription: String\r\n\t\tTags:\r\n\t\t\tTags\r\n",
        "description": "Attributes:\r\n  FirewallPolicyArn\r\n  FirewallPolicyId\r\n",
        "prefix": "networkfirewall-firewallpolicy"
    },
    "AWS::NetworkFirewall::LoggingConfiguration": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::NetworkFirewall::LoggingConfiguration\"\r\n\tProperties:\r\n\t\tLoggingConfiguration: #required\r\n\t\t\tLoggingConfiguration\r\n",
        "description": "Attributes:\r\n  FirewallName\r\n  FirewallArn\r\n",
        "prefix": "networkfirewall-loggingconfiguration"
    },
    "AWS::NetworkFirewall::RuleGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::NetworkFirewall::RuleGroup\"\r\n\tProperties:\r\n\t\tRuleGroupName: String #required\r\n\t\tRuleGroupId: String\r\n\t\tRuleGroup:\r\n\t\t\tRuleGroup\r\n\t\tType: String #required\r\n\t\tCapacity: Integer #required\r\n\t\tDescription: String\r\n\t\tTags:\r\n\t\t\tTags\r\n",
        "description": "Attributes:\r\n  RuleGroupArn\r\n",
        "prefix": "networkfirewall-rulegroup"
    },
    "AWS::NetworkManager::CustomerGatewayAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::NetworkManager::CustomerGatewayAssociation\"\r\n\tProperties:\r\n\t\tGlobalNetworkId: String #required\r\n\t\tCustomerGatewayArn: String #required\r\n\t\tDeviceId: String #required\r\n\t\tLinkId: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "networkmanager-customergatewayassociation"
    },
    "AWS::NetworkManager::Device": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::NetworkManager::Device\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tGlobalNetworkId: String #required\r\n\t\tLocation:\r\n\t\t\tLocation\r\n\t\tModel: String\r\n\t\tSerialNumber: String\r\n\t\tSiteId: String\r\n\t\tType: String\r\n\t\tVendor: String\r\n",
        "description": "Attributes:\r\n  DeviceArn\r\n  DeviceId\r\n",
        "prefix": "networkmanager-device"
    },
    "AWS::NetworkManager::GlobalNetwork": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::NetworkManager::GlobalNetwork\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Id\r\n",
        "prefix": "networkmanager-globalnetwork"
    },
    "AWS::NetworkManager::Link": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::NetworkManager::Link\"\r\n\tProperties:\r\n\t\tGlobalNetworkId: String #required\r\n\t\tSiteId: String #required\r\n\t\tBandwidth: #required\r\n\t\t\tBandwidth\r\n\t\tProvider: String\r\n\t\tDescription: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tType: String\r\n",
        "description": "Attributes:\r\n  LinkArn\r\n  LinkId\r\n",
        "prefix": "networkmanager-link"
    },
    "AWS::NetworkManager::LinkAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::NetworkManager::LinkAssociation\"\r\n\tProperties:\r\n\t\tGlobalNetworkId: String #required\r\n\t\tDeviceId: String #required\r\n\t\tLinkId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "networkmanager-linkassociation"
    },
    "AWS::NetworkManager::Site": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::NetworkManager::Site\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tGlobalNetworkId: String #required\r\n\t\tLocation:\r\n\t\t\tLocation\r\n",
        "description": "Attributes:\r\n  SiteArn\r\n  SiteId\r\n",
        "prefix": "networkmanager-site"
    },
    "AWS::NetworkManager::TransitGatewayRegistration": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::NetworkManager::TransitGatewayRegistration\"\r\n\tProperties:\r\n\t\tGlobalNetworkId: String #required\r\n\t\tTransitGatewayArn: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "networkmanager-transitgatewayregistration"
    },
    "AWS::OpsWorks::App": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::OpsWorks::App\"\r\n\tProperties:\r\n\t\tAppSource:\r\n\t\t\tSource\r\n\t\tAttributes:\r\n\t\t\tMap\r\n\t\tDataSources:\r\n\t\t\t- DataSource\r\n\t\tDescription: String\r\n\t\tDomains:\r\n\t\t\t- String\r\n\t\tEnableSsl: Boolean\r\n\t\tEnvironment:\r\n\t\t\t- EnvironmentVariable\r\n\t\tName: String #required\r\n\t\tShortname: String\r\n\t\tSslConfiguration:\r\n\t\t\tSslConfiguration\r\n\t\tStackId: String #required\r\n\t\tType: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "opsworks-app"
    },
    "AWS::OpsWorks::ElasticLoadBalancerAttachment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::OpsWorks::ElasticLoadBalancerAttachment\"\r\n\tProperties:\r\n\t\tElasticLoadBalancerName: String #required\r\n\t\tLayerId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "opsworks-elasticloadbalancerattachment"
    },
    "AWS::OpsWorks::Instance": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::OpsWorks::Instance\"\r\n\tProperties:\r\n\t\tAgentVersion: String\r\n\t\tAmiId: String\r\n\t\tArchitecture: String\r\n\t\tAutoScalingType: String\r\n\t\tAvailabilityZone: String\r\n\t\tBlockDeviceMappings:\r\n\t\t\t- BlockDeviceMapping\r\n\t\tEbsOptimized: Boolean\r\n\t\tElasticIps:\r\n\t\t\t- String\r\n\t\tHostname: String\r\n\t\tInstallUpdatesOnBoot: Boolean\r\n\t\tInstanceType: String #required\r\n\t\tLayerIds: #required\r\n\t\t\t- String\r\n\t\tOs: String\r\n\t\tRootDeviceType: String\r\n\t\tSshKeyName: String\r\n\t\tStackId: String #required\r\n\t\tSubnetId: String\r\n\t\tTenancy: String\r\n\t\tTimeBasedAutoScaling:\r\n\t\t\tTimeBasedAutoScaling\r\n\t\tVirtualizationType: String\r\n\t\tVolumes:\r\n\t\t\t- String\r\n",
        "description": "Attributes:\r\n  AvailabilityZone\r\n  PrivateDnsName\r\n  PrivateIp\r\n  PublicDnsName\r\n  PublicIp\r\n",
        "prefix": "opsworks-instance"
    },
    "AWS::OpsWorks::Layer": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::OpsWorks::Layer\"\r\n\tProperties:\r\n\t\tAttributes:\r\n\t\t\tMap\r\n\t\tAutoAssignElasticIps: Boolean #required\r\n\t\tAutoAssignPublicIps: Boolean #required\r\n\t\tCustomInstanceProfileArn: String\r\n\t\tCustomJson: Json\r\n\t\tCustomRecipes:\r\n\t\t\tRecipes\r\n\t\tCustomSecurityGroupIds:\r\n\t\t\t- String\r\n\t\tEnableAutoHealing: Boolean #required\r\n\t\tInstallUpdatesOnBoot: Boolean\r\n\t\tLifecycleEventConfiguration:\r\n\t\t\tLifecycleEventConfiguration\r\n\t\tLoadBasedAutoScaling:\r\n\t\t\tLoadBasedAutoScaling\r\n\t\tName: String #required\r\n\t\tPackages:\r\n\t\t\t- String\r\n\t\tShortname: String #required\r\n\t\tStackId: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tType: String #required\r\n\t\tUseEbsOptimizedInstances: Boolean\r\n\t\tVolumeConfigurations:\r\n\t\t\t- VolumeConfiguration\r\n",
        "description": "No Attributes\r\n",
        "prefix": "opsworks-layer"
    },
    "AWS::OpsWorks::Stack": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::OpsWorks::Stack\"\r\n\tProperties:\r\n\t\tAgentVersion: String\r\n\t\tAttributes:\r\n\t\t\tMap\r\n\t\tChefConfiguration:\r\n\t\t\tChefConfiguration\r\n\t\tCloneAppIds:\r\n\t\t\t- String\r\n\t\tClonePermissions: Boolean\r\n\t\tConfigurationManager:\r\n\t\t\tStackConfigurationManager\r\n\t\tCustomCookbooksSource:\r\n\t\t\tSource\r\n\t\tCustomJson: Json\r\n\t\tDefaultAvailabilityZone: String\r\n\t\tDefaultInstanceProfileArn: String #required\r\n\t\tDefaultOs: String\r\n\t\tDefaultRootDeviceType: String\r\n\t\tDefaultSshKeyName: String\r\n\t\tDefaultSubnetId: String\r\n\t\tEcsClusterArn: String\r\n\t\tElasticIps:\r\n\t\t\t- ElasticIp\r\n\t\tHostnameTheme: String\r\n\t\tName: String #required\r\n\t\tRdsDbInstances:\r\n\t\t\t- RdsDbInstance\r\n\t\tServiceRoleArn: String #required\r\n\t\tSourceStackId: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tUseCustomCookbooks: Boolean\r\n\t\tUseOpsworksSecurityGroups: Boolean\r\n\t\tVpcId: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "opsworks-stack"
    },
    "AWS::OpsWorks::UserProfile": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::OpsWorks::UserProfile\"\r\n\tProperties:\r\n\t\tAllowSelfManagement: Boolean\r\n\t\tIamUserArn: String #required\r\n\t\tSshPublicKey: String\r\n\t\tSshUsername: String\r\n",
        "description": "Attributes:\r\n  SshUsername\r\n",
        "prefix": "opsworks-userprofile"
    },
    "AWS::OpsWorks::Volume": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::OpsWorks::Volume\"\r\n\tProperties:\r\n\t\tEc2VolumeId: String #required\r\n\t\tMountPoint: String\r\n\t\tName: String\r\n\t\tStackId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "opsworks-volume"
    },
    "AWS::OpsWorksCM::Server": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::OpsWorksCM::Server\"\r\n\tProperties:\r\n\t\tKeyPair: String\r\n\t\tEngineVersion: String\r\n\t\tServiceRoleArn: String #required\r\n\t\tDisableAutomatedBackup: Boolean\r\n\t\tBackupId: String\r\n\t\tEngineModel: String\r\n\t\tPreferredMaintenanceWindow: String\r\n\t\tAssociatePublicIpAddress: Boolean\r\n\t\tInstanceProfileArn: String #required\r\n\t\tCustomCertificate: String\r\n\t\tPreferredBackupWindow: String\r\n\t\tSecurityGroupIds:\r\n\t\t\t- String\r\n\t\tSubnetIds:\r\n\t\t\t- String\r\n\t\tCustomDomain: String\r\n\t\tCustomPrivateKey: String\r\n\t\tServerName: String\r\n\t\tEngineAttributes:\r\n\t\t\t- EngineAttribute\r\n\t\tBackupRetentionCount: Integer\r\n\t\tInstanceType: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tEngine: String\r\n",
        "description": "Attributes:\r\n  Endpoint\r\n  Id\r\n  Arn\r\n",
        "prefix": "opsworkscm-server"
    },
    "AWS::Pinpoint::ADMChannel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::ADMChannel\"\r\n\tProperties:\r\n\t\tClientSecret: String #required\r\n\t\tEnabled: Boolean\r\n\t\tClientId: String #required\r\n\t\tApplicationId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "pinpoint-admchannel"
    },
    "AWS::Pinpoint::APNSChannel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::APNSChannel\"\r\n\tProperties:\r\n\t\tBundleId: String\r\n\t\tPrivateKey: String\r\n\t\tEnabled: Boolean\r\n\t\tDefaultAuthenticationMethod: String\r\n\t\tTokenKey: String\r\n\t\tApplicationId: String #required\r\n\t\tTeamId: String\r\n\t\tCertificate: String\r\n\t\tTokenKeyId: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "pinpoint-apnschannel"
    },
    "AWS::Pinpoint::APNSSandboxChannel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::APNSSandboxChannel\"\r\n\tProperties:\r\n\t\tBundleId: String\r\n\t\tPrivateKey: String\r\n\t\tEnabled: Boolean\r\n\t\tDefaultAuthenticationMethod: String\r\n\t\tTokenKey: String\r\n\t\tApplicationId: String #required\r\n\t\tTeamId: String\r\n\t\tCertificate: String\r\n\t\tTokenKeyId: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "pinpoint-apnssandboxchannel"
    },
    "AWS::Pinpoint::APNSVoipChannel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::APNSVoipChannel\"\r\n\tProperties:\r\n\t\tBundleId: String\r\n\t\tPrivateKey: String\r\n\t\tEnabled: Boolean\r\n\t\tDefaultAuthenticationMethod: String\r\n\t\tTokenKey: String\r\n\t\tApplicationId: String #required\r\n\t\tTeamId: String\r\n\t\tCertificate: String\r\n\t\tTokenKeyId: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "pinpoint-apnsvoipchannel"
    },
    "AWS::Pinpoint::APNSVoipSandboxChannel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::APNSVoipSandboxChannel\"\r\n\tProperties:\r\n\t\tBundleId: String\r\n\t\tPrivateKey: String\r\n\t\tEnabled: Boolean\r\n\t\tDefaultAuthenticationMethod: String\r\n\t\tTokenKey: String\r\n\t\tApplicationId: String #required\r\n\t\tTeamId: String\r\n\t\tCertificate: String\r\n\t\tTokenKeyId: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "pinpoint-apnsvoipsandboxchannel"
    },
    "AWS::Pinpoint::App": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::App\"\r\n\tProperties:\r\n\t\tTags: Json\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "pinpoint-app"
    },
    "AWS::Pinpoint::ApplicationSettings": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::ApplicationSettings\"\r\n\tProperties:\r\n\t\tQuietTime:\r\n\t\t\tQuietTime\r\n\t\tLimits:\r\n\t\t\tLimits\r\n\t\tApplicationId: String #required\r\n\t\tCampaignHook:\r\n\t\t\tCampaignHook\r\n\t\tCloudWatchMetricsEnabled: Boolean\r\n",
        "description": "No Attributes\r\n",
        "prefix": "pinpoint-applicationsettings"
    },
    "AWS::Pinpoint::BaiduChannel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::BaiduChannel\"\r\n\tProperties:\r\n\t\tSecretKey: String #required\r\n\t\tApiKey: String #required\r\n\t\tEnabled: Boolean\r\n\t\tApplicationId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "pinpoint-baiduchannel"
    },
    "AWS::Pinpoint::Campaign": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::Campaign\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tSegmentId: String #required\r\n\t\tIsPaused: Boolean\r\n\t\tAdditionalTreatments:\r\n\t\t\t- WriteTreatmentResource\r\n\t\tName: String #required\r\n\t\tSegmentVersion: Integer\r\n\t\tTreatmentDescription: String\r\n\t\tMessageConfiguration: #required\r\n\t\t\tMessageConfiguration\r\n\t\tLimits:\r\n\t\t\tLimits\r\n\t\tHoldoutPercent: Integer\r\n\t\tSchedule: #required\r\n\t\t\tSchedule\r\n\t\tApplicationId: String #required\r\n\t\tCampaignHook:\r\n\t\t\tCampaignHook\r\n\t\tTags: Json\r\n\t\tTreatmentName: String\r\n",
        "description": "Attributes:\r\n  CampaignId\r\n  Arn\r\n",
        "prefix": "pinpoint-campaign"
    },
    "AWS::Pinpoint::EmailChannel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::EmailChannel\"\r\n\tProperties:\r\n\t\tConfigurationSet: String\r\n\t\tFromAddress: String #required\r\n\t\tEnabled: Boolean\r\n\t\tApplicationId: String #required\r\n\t\tIdentity: String #required\r\n\t\tRoleArn: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "pinpoint-emailchannel"
    },
    "AWS::Pinpoint::EmailTemplate": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::EmailTemplate\"\r\n\tProperties:\r\n\t\tHtmlPart: String\r\n\t\tTextPart: String\r\n\t\tTemplateName: String #required\r\n\t\tTemplateDescription: String\r\n\t\tDefaultSubstitutions: String\r\n\t\tSubject: String #required\r\n\t\tTags: Json\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "pinpoint-emailtemplate"
    },
    "AWS::Pinpoint::EventStream": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::EventStream\"\r\n\tProperties:\r\n\t\tApplicationId: String #required\r\n\t\tDestinationStreamArn: String #required\r\n\t\tRoleArn: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "pinpoint-eventstream"
    },
    "AWS::Pinpoint::GCMChannel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::GCMChannel\"\r\n\tProperties:\r\n\t\tApiKey: String #required\r\n\t\tEnabled: Boolean\r\n\t\tApplicationId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "pinpoint-gcmchannel"
    },
    "AWS::Pinpoint::PushTemplate": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::PushTemplate\"\r\n\tProperties:\r\n\t\tGCM:\r\n\t\t\tAndroidPushNotificationTemplate\r\n\t\tBaidu:\r\n\t\t\tAndroidPushNotificationTemplate\r\n\t\tTemplateName: String #required\r\n\t\tADM:\r\n\t\t\tAndroidPushNotificationTemplate\r\n\t\tAPNS:\r\n\t\t\tAPNSPushNotificationTemplate\r\n\t\tTemplateDescription: String\r\n\t\tDefaultSubstitutions: String\r\n\t\tDefault:\r\n\t\t\tDefaultPushNotificationTemplate\r\n\t\tTags: Json\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "pinpoint-pushtemplate"
    },
    "AWS::Pinpoint::SMSChannel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::SMSChannel\"\r\n\tProperties:\r\n\t\tShortCode: String\r\n\t\tEnabled: Boolean\r\n\t\tApplicationId: String #required\r\n\t\tSenderId: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "pinpoint-smschannel"
    },
    "AWS::Pinpoint::Segment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::Segment\"\r\n\tProperties:\r\n\t\tSegmentGroups:\r\n\t\t\tSegmentGroups\r\n\t\tDimensions:\r\n\t\t\tSegmentDimensions\r\n\t\tApplicationId: String #required\r\n\t\tTags: Json\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  SegmentId\r\n  Arn\r\n",
        "prefix": "pinpoint-segment"
    },
    "AWS::Pinpoint::SmsTemplate": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::SmsTemplate\"\r\n\tProperties:\r\n\t\tTemplateName: String #required\r\n\t\tTemplateDescription: String\r\n\t\tDefaultSubstitutions: String\r\n\t\tBody: String #required\r\n\t\tTags: Json\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "pinpoint-smstemplate"
    },
    "AWS::Pinpoint::VoiceChannel": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Pinpoint::VoiceChannel\"\r\n\tProperties:\r\n\t\tEnabled: Boolean\r\n\t\tApplicationId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "pinpoint-voicechannel"
    },
    "AWS::PinpointEmail::ConfigurationSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::PinpointEmail::ConfigurationSet\"\r\n\tProperties:\r\n\t\tSendingOptions:\r\n\t\t\tSendingOptions\r\n\t\tTrackingOptions:\r\n\t\t\tTrackingOptions\r\n\t\tReputationOptions:\r\n\t\t\tReputationOptions\r\n\t\tDeliveryOptions:\r\n\t\t\tDeliveryOptions\r\n\t\tTags:\r\n\t\t\t- Tags\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "pinpointemail-configurationset"
    },
    "AWS::PinpointEmail::ConfigurationSetEventDestination": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::PinpointEmail::ConfigurationSetEventDestination\"\r\n\tProperties:\r\n\t\tEventDestinationName: String #required\r\n\t\tConfigurationSetName: String #required\r\n\t\tEventDestination:\r\n\t\t\tEventDestination\r\n",
        "description": "No Attributes\r\n",
        "prefix": "pinpointemail-configurationseteventdestination"
    },
    "AWS::PinpointEmail::DedicatedIpPool": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::PinpointEmail::DedicatedIpPool\"\r\n\tProperties:\r\n\t\tPoolName: String\r\n\t\tTags:\r\n\t\t\t- Tags\r\n",
        "description": "No Attributes\r\n",
        "prefix": "pinpointemail-dedicatedippool"
    },
    "AWS::PinpointEmail::Identity": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::PinpointEmail::Identity\"\r\n\tProperties:\r\n\t\tFeedbackForwardingEnabled: Boolean\r\n\t\tDkimSigningEnabled: Boolean\r\n\t\tTags:\r\n\t\t\t- Tags\r\n\t\tName: String #required\r\n\t\tMailFromAttributes:\r\n\t\t\tMailFromAttributes\r\n",
        "description": "Attributes:\r\n  IdentityDNSRecordName3\r\n  IdentityDNSRecordName1\r\n  IdentityDNSRecordName2\r\n  IdentityDNSRecordValue3\r\n  IdentityDNSRecordValue2\r\n  IdentityDNSRecordValue1\r\n",
        "prefix": "pinpointemail-identity"
    },
    "AWS::QLDB::Ledger": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::QLDB::Ledger\"\r\n\tProperties:\r\n\t\tPermissionsMode: String #required\r\n\t\tDeletionProtection: Boolean\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "qldb-ledger"
    },
    "AWS::QLDB::Stream": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::QLDB::Stream\"\r\n\tProperties:\r\n\t\tLedgerName: String #required\r\n\t\tStreamName: String #required\r\n\t\tRoleArn: String #required\r\n\t\tInclusiveStartTime: String #required\r\n\t\tExclusiveEndTime: String\r\n\t\tKinesisConfiguration: #required\r\n\t\t\tKinesisConfiguration\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Id\r\n",
        "prefix": "qldb-stream"
    },
    "AWS::RAM::ResourceShare": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RAM::ResourceShare\"\r\n\tProperties:\r\n\t\tPrincipals:\r\n\t\t\t- String\r\n\t\tAllowExternalPrincipals: Boolean\r\n\t\tResourceArns:\r\n\t\t\t- String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "ram-resourceshare"
    },
    "AWS::RDS::DBCluster": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RDS::DBCluster\"\r\n\tProperties:\r\n\t\tAssociatedRoles:\r\n\t\t\t- DBClusterRole\r\n\t\tAvailabilityZones:\r\n\t\t\t- String\r\n\t\tBacktrackWindow: Long\r\n\t\tBackupRetentionPeriod: Integer\r\n\t\tDBClusterIdentifier: String\r\n\t\tDBClusterParameterGroupName: String\r\n\t\tDBSubnetGroupName: String\r\n\t\tDatabaseName: String\r\n\t\tDeletionProtection: Boolean\r\n\t\tEnableCloudwatchLogsExports:\r\n\t\t\t- String\r\n\t\tEnableHttpEndpoint: Boolean\r\n\t\tEnableIAMDatabaseAuthentication: Boolean\r\n\t\tEngine: String #required\r\n\t\tEngineMode: String\r\n\t\tEngineVersion: String\r\n\t\tGlobalClusterIdentifier: String\r\n\t\tKmsKeyId: String\r\n\t\tMasterUserPassword: String\r\n\t\tMasterUsername: String\r\n\t\tPort: Integer\r\n\t\tPreferredBackupWindow: String\r\n\t\tPreferredMaintenanceWindow: String\r\n\t\tReplicationSourceIdentifier: String\r\n\t\tRestoreType: String\r\n\t\tScalingConfiguration:\r\n\t\t\tScalingConfiguration\r\n\t\tSnapshotIdentifier: String\r\n\t\tSourceDBClusterIdentifier: String\r\n\t\tSourceRegion: String\r\n\t\tStorageEncrypted: Boolean\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tUseLatestRestorableTime: Boolean\r\n\t\tVpcSecurityGroupIds:\r\n\t\t\t- String\r\n",
        "description": "Attributes:\r\n  Endpoint.Address\r\n  Endpoint.Port\r\n  ReadEndpoint.Address\r\n",
        "prefix": "rds-dbcluster"
    },
    "AWS::RDS::DBClusterParameterGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RDS::DBClusterParameterGroup\"\r\n\tProperties:\r\n\t\tDescription: String #required\r\n\t\tFamily: String #required\r\n\t\tParameters: Json #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "rds-dbclusterparametergroup"
    },
    "AWS::RDS::DBInstance": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RDS::DBInstance\"\r\n\tProperties:\r\n\t\tAllocatedStorage: String\r\n\t\tAllowMajorVersionUpgrade: Boolean\r\n\t\tAssociatedRoles:\r\n\t\t\t- DBInstanceRole\r\n\t\tAutoMinorVersionUpgrade: Boolean\r\n\t\tAvailabilityZone: String\r\n\t\tBackupRetentionPeriod: Integer\r\n\t\tCACertificateIdentifier: String\r\n\t\tCharacterSetName: String\r\n\t\tCopyTagsToSnapshot: Boolean\r\n\t\tDBClusterIdentifier: String\r\n\t\tDBInstanceClass: String #required\r\n\t\tDBInstanceIdentifier: String\r\n\t\tDBName: String\r\n\t\tDBParameterGroupName: String\r\n\t\tDBSecurityGroups:\r\n\t\t\t- String\r\n\t\tDBSnapshotIdentifier: String\r\n\t\tDBSubnetGroupName: String\r\n\t\tDeleteAutomatedBackups: Boolean\r\n\t\tDeletionProtection: Boolean\r\n\t\tDomain: String\r\n\t\tDomainIAMRoleName: String\r\n\t\tEnableCloudwatchLogsExports:\r\n\t\t\t- String\r\n\t\tEnableIAMDatabaseAuthentication: Boolean\r\n\t\tEnablePerformanceInsights: Boolean\r\n\t\tEngine: String\r\n\t\tEngineVersion: String\r\n\t\tIops: Integer\r\n\t\tKmsKeyId: String\r\n\t\tLicenseModel: String\r\n\t\tMasterUserPassword: String\r\n\t\tMasterUsername: String\r\n\t\tMaxAllocatedStorage: Integer\r\n\t\tMonitoringInterval: Integer\r\n\t\tMonitoringRoleArn: String\r\n\t\tMultiAZ: Boolean\r\n\t\tOptionGroupName: String\r\n\t\tPerformanceInsightsKMSKeyId: String\r\n\t\tPerformanceInsightsRetentionPeriod: Integer\r\n\t\tPort: String\r\n\t\tPreferredBackupWindow: String\r\n\t\tPreferredMaintenanceWindow: String\r\n\t\tProcessorFeatures:\r\n\t\t\t- ProcessorFeature\r\n\t\tPromotionTier: Integer\r\n\t\tPubliclyAccessible: Boolean\r\n\t\tSourceDBInstanceIdentifier: String\r\n\t\tSourceRegion: String\r\n\t\tStorageEncrypted: Boolean\r\n\t\tStorageType: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTimezone: String\r\n\t\tUseDefaultProcessorFeatures: Boolean\r\n\t\tVPCSecurityGroups:\r\n\t\t\t- String\r\n",
        "description": "Attributes:\r\n  Endpoint.Address\r\n  Endpoint.Port\r\n",
        "prefix": "rds-dbinstance"
    },
    "AWS::RDS::DBParameterGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RDS::DBParameterGroup\"\r\n\tProperties:\r\n\t\tDescription: String #required\r\n\t\tFamily: String #required\r\n\t\tParameters:\r\n\t\t\tMap\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "rds-dbparametergroup"
    },
    "AWS::RDS::DBProxy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RDS::DBProxy\"\r\n\tProperties:\r\n\t\tAuth: #required\r\n\t\t\t- AuthFormat\r\n\t\tDBProxyName: String #required\r\n\t\tDebugLogging: Boolean\r\n\t\tEngineFamily: String #required\r\n\t\tIdleClientTimeout: Integer\r\n\t\tRequireTLS: Boolean\r\n\t\tRoleArn: String #required\r\n\t\tTags:\r\n\t\t\t- TagFormat\r\n\t\tVpcSecurityGroupIds:\r\n\t\t\t- String\r\n\t\tVpcSubnetIds: #required\r\n\t\t\t- String\r\n",
        "description": "Attributes:\r\n  DBProxyArn\r\n  Endpoint\r\n",
        "prefix": "rds-dbproxy"
    },
    "AWS::RDS::DBProxyTargetGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RDS::DBProxyTargetGroup\"\r\n\tProperties:\r\n\t\tDBProxyName: String #required\r\n\t\tTargetGroupName: String #required\r\n\t\tConnectionPoolConfigurationInfo:\r\n\t\t\tConnectionPoolConfigurationInfoFormat\r\n\t\tDBInstanceIdentifiers:\r\n\t\t\t- String\r\n\t\tDBClusterIdentifiers:\r\n\t\t\t- String\r\n",
        "description": "Attributes:\r\n  TargetGroupArn\r\n",
        "prefix": "rds-dbproxytargetgroup"
    },
    "AWS::RDS::DBSecurityGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RDS::DBSecurityGroup\"\r\n\tProperties:\r\n\t\tDBSecurityGroupIngress: #required\r\n\t\t\t- Ingress\r\n\t\tEC2VpcId: String\r\n\t\tGroupDescription: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "rds-dbsecuritygroup"
    },
    "AWS::RDS::DBSecurityGroupIngress": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RDS::DBSecurityGroupIngress\"\r\n\tProperties:\r\n\t\tCIDRIP: String\r\n\t\tDBSecurityGroupName: String #required\r\n\t\tEC2SecurityGroupId: String\r\n\t\tEC2SecurityGroupName: String\r\n\t\tEC2SecurityGroupOwnerId: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "rds-dbsecuritygroupingress"
    },
    "AWS::RDS::DBSubnetGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RDS::DBSubnetGroup\"\r\n\tProperties:\r\n\t\tDBSubnetGroupDescription: String #required\r\n\t\tDBSubnetGroupName: String\r\n\t\tSubnetIds: #required\r\n\t\t\t- String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "rds-dbsubnetgroup"
    },
    "AWS::RDS::EventSubscription": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RDS::EventSubscription\"\r\n\tProperties:\r\n\t\tEnabled: Boolean\r\n\t\tEventCategories:\r\n\t\t\t- String\r\n\t\tSnsTopicArn: String #required\r\n\t\tSourceIds:\r\n\t\t\t- String\r\n\t\tSourceType: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "rds-eventsubscription"
    },
    "AWS::RDS::GlobalCluster": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RDS::GlobalCluster\"\r\n\tProperties:\r\n\t\tEngine: String\r\n\t\tEngineVersion: String\r\n\t\tDeletionProtection: Boolean\r\n\t\tGlobalClusterIdentifier: String\r\n\t\tSourceDBClusterIdentifier: String\r\n\t\tStorageEncrypted: Boolean\r\n",
        "description": "No Attributes\r\n",
        "prefix": "rds-globalcluster"
    },
    "AWS::RDS::OptionGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RDS::OptionGroup\"\r\n\tProperties:\r\n\t\tEngineName: String #required\r\n\t\tMajorEngineVersion: String #required\r\n\t\tOptionConfigurations: #required\r\n\t\t\t- OptionConfiguration\r\n\t\tOptionGroupDescription: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "rds-optiongroup"
    },
    "AWS::Redshift::Cluster": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Redshift::Cluster\"\r\n\tProperties:\r\n\t\tAllowVersionUpgrade: Boolean\r\n\t\tAutomatedSnapshotRetentionPeriod: Integer\r\n\t\tAvailabilityZone: String\r\n\t\tClusterIdentifier: String\r\n\t\tClusterParameterGroupName: String\r\n\t\tClusterSecurityGroups:\r\n\t\t\t- String\r\n\t\tClusterSubnetGroupName: String\r\n\t\tClusterType: String #required\r\n\t\tClusterVersion: String\r\n\t\tDBName: String #required\r\n\t\tElasticIp: String\r\n\t\tEncrypted: Boolean\r\n\t\tHsmClientCertificateIdentifier: String\r\n\t\tHsmConfigurationIdentifier: String\r\n\t\tIamRoles:\r\n\t\t\t- String\r\n\t\tKmsKeyId: String\r\n\t\tLoggingProperties:\r\n\t\t\tLoggingProperties\r\n\t\tMasterUserPassword: String #required\r\n\t\tMasterUsername: String #required\r\n\t\tNodeType: String #required\r\n\t\tNumberOfNodes: Integer\r\n\t\tOwnerAccount: String\r\n\t\tPort: Integer\r\n\t\tPreferredMaintenanceWindow: String\r\n\t\tPubliclyAccessible: Boolean\r\n\t\tSnapshotClusterIdentifier: String\r\n\t\tSnapshotIdentifier: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tVpcSecurityGroupIds:\r\n\t\t\t- String\r\n",
        "description": "Attributes:\r\n  Endpoint.Address\r\n  Endpoint.Port\r\n",
        "prefix": "redshift-cluster"
    },
    "AWS::Redshift::ClusterParameterGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Redshift::ClusterParameterGroup\"\r\n\tProperties:\r\n\t\tDescription: String #required\r\n\t\tParameterGroupFamily: String #required\r\n\t\tParameters:\r\n\t\t\t- Parameter\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "redshift-clusterparametergroup"
    },
    "AWS::Redshift::ClusterSecurityGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Redshift::ClusterSecurityGroup\"\r\n\tProperties:\r\n\t\tDescription: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "redshift-clustersecuritygroup"
    },
    "AWS::Redshift::ClusterSecurityGroupIngress": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Redshift::ClusterSecurityGroupIngress\"\r\n\tProperties:\r\n\t\tCIDRIP: String\r\n\t\tClusterSecurityGroupName: String #required\r\n\t\tEC2SecurityGroupName: String\r\n\t\tEC2SecurityGroupOwnerId: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "redshift-clustersecuritygroupingress"
    },
    "AWS::Redshift::ClusterSubnetGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Redshift::ClusterSubnetGroup\"\r\n\tProperties:\r\n\t\tDescription: String #required\r\n\t\tSubnetIds: #required\r\n\t\t\t- String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "redshift-clustersubnetgroup"
    },
    "AWS::ResourceGroups::Group": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ResourceGroups::Group\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tDescription: String\r\n\t\tResourceQuery:\r\n\t\t\tResourceQuery\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "resourcegroups-group"
    },
    "AWS::RoboMaker::Fleet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RoboMaker::Fleet\"\r\n\tProperties:\r\n\t\tTags: Json\r\n\t\tName: String\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "robomaker-fleet"
    },
    "AWS::RoboMaker::Robot": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RoboMaker::Robot\"\r\n\tProperties:\r\n\t\tFleet: String\r\n\t\tArchitecture: String #required\r\n\t\tGreengrassGroupId: String #required\r\n\t\tTags: Json\r\n\t\tName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "robomaker-robot"
    },
    "AWS::RoboMaker::RobotApplication": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RoboMaker::RobotApplication\"\r\n\tProperties:\r\n\t\tCurrentRevisionId: String\r\n\t\tRobotSoftwareSuite: #required\r\n\t\t\tRobotSoftwareSuite\r\n\t\tSources: #required\r\n\t\t\t- SourceConfig\r\n\t\tTags: Json\r\n\t\tName: String\r\n",
        "description": "Attributes:\r\n  CurrentRevisionId\r\n  Arn\r\n",
        "prefix": "robomaker-robotapplication"
    },
    "AWS::RoboMaker::RobotApplicationVersion": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RoboMaker::RobotApplicationVersion\"\r\n\tProperties:\r\n\t\tCurrentRevisionId: String\r\n\t\tApplication: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "robomaker-robotapplicationversion"
    },
    "AWS::RoboMaker::SimulationApplication": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RoboMaker::SimulationApplication\"\r\n\tProperties:\r\n\t\tRenderingEngine: #required\r\n\t\t\tRenderingEngine\r\n\t\tSimulationSoftwareSuite: #required\r\n\t\t\tSimulationSoftwareSuite\r\n\t\tCurrentRevisionId: String\r\n\t\tRobotSoftwareSuite: #required\r\n\t\t\tRobotSoftwareSuite\r\n\t\tSources: #required\r\n\t\t\t- SourceConfig\r\n\t\tTags: Json\r\n\t\tName: String\r\n",
        "description": "Attributes:\r\n  CurrentRevisionId\r\n  Arn\r\n",
        "prefix": "robomaker-simulationapplication"
    },
    "AWS::RoboMaker::SimulationApplicationVersion": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::RoboMaker::SimulationApplicationVersion\"\r\n\tProperties:\r\n\t\tCurrentRevisionId: String\r\n\t\tApplication: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "robomaker-simulationapplicationversion"
    },
    "AWS::Route53::HealthCheck": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Route53::HealthCheck\"\r\n\tProperties:\r\n\t\tHealthCheckConfig: Json #required\r\n\t\tHealthCheckTags:\r\n\t\t\t- HealthCheckTag\r\n",
        "description": "Attributes:\r\n  HealthCheckId\r\n",
        "prefix": "route53-healthcheck"
    },
    "AWS::Route53::HostedZone": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Route53::HostedZone\"\r\n\tProperties:\r\n\t\tHostedZoneConfig:\r\n\t\t\tHostedZoneConfig\r\n\t\tHostedZoneTags:\r\n\t\t\t- HostedZoneTag\r\n\t\tName: String #required\r\n\t\tQueryLoggingConfig:\r\n\t\t\tQueryLoggingConfig\r\n\t\tVPCs:\r\n\t\t\t- VPC\r\n",
        "description": "Attributes:\r\n  Id\r\n  NameServers\r\n",
        "prefix": "route53-hostedzone"
    },
    "AWS::Route53::RecordSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Route53::RecordSet\"\r\n\tProperties:\r\n\t\tAliasTarget:\r\n\t\t\tAliasTarget\r\n\t\tComment: String\r\n\t\tFailover: String\r\n\t\tGeoLocation:\r\n\t\t\tGeoLocation\r\n\t\tHealthCheckId: String\r\n\t\tHostedZoneId: String\r\n\t\tHostedZoneName: String\r\n\t\tMultiValueAnswer: Boolean\r\n\t\tName: String #required\r\n\t\tRegion: String\r\n\t\tResourceRecords:\r\n\t\t\t- String\r\n\t\tSetIdentifier: String\r\n\t\tTTL: String\r\n\t\tType: String #required\r\n\t\tWeight: Integer\r\n",
        "description": "No Attributes\r\n",
        "prefix": "route53-recordset"
    },
    "AWS::Route53::RecordSetGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Route53::RecordSetGroup\"\r\n\tProperties:\r\n\t\tComment: String\r\n\t\tHostedZoneId: String\r\n\t\tHostedZoneName: String\r\n\t\tRecordSets:\r\n\t\t\t- RecordSet\r\n",
        "description": "No Attributes\r\n",
        "prefix": "route53-recordsetgroup"
    },
    "AWS::Route53Resolver::ResolverEndpoint": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Route53Resolver::ResolverEndpoint\"\r\n\tProperties:\r\n\t\tIpAddresses: #required\r\n\t\t\t- IpAddressRequest\r\n\t\tDirection: String #required\r\n\t\tSecurityGroupIds: #required\r\n\t\t\t- String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tName: String\r\n",
        "description": "Attributes:\r\n  ResolverEndpointId\r\n  IpAddressCount\r\n  Arn\r\n  Direction\r\n  HostVPCId\r\n  Name\r\n",
        "prefix": "route53resolver-resolverendpoint"
    },
    "AWS::Route53Resolver::ResolverQueryLoggingConfig": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Route53Resolver::ResolverQueryLoggingConfig\"\r\n\tProperties:\r\n\t\tName: String\r\n\t\tDestinationArn: String\r\n",
        "description": "Attributes:\r\n  Id\r\n  OwnerId\r\n  Status\r\n  ShareStatus\r\n  AssociationCount\r\n  Arn\r\n  CreatorRequestId\r\n  CreationTime\r\n",
        "prefix": "route53resolver-resolverqueryloggingconfig"
    },
    "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation\"\r\n\tProperties:\r\n\t\tResolverQueryLogConfigId: String\r\n\t\tResourceId: String\r\n",
        "description": "Attributes:\r\n  Id\r\n  Status\r\n  Error\r\n  ErrorMessage\r\n  CreationTime\r\n",
        "prefix": "route53resolver-resolverqueryloggingconfigassociation"
    },
    "AWS::Route53Resolver::ResolverRule": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Route53Resolver::ResolverRule\"\r\n\tProperties:\r\n\t\tResolverEndpointId: String\r\n\t\tDomainName: String #required\r\n\t\tRuleType: String #required\r\n\t\tTargetIps:\r\n\t\t\t- TargetAddress\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tName: String\r\n",
        "description": "Attributes:\r\n  ResolverEndpointId\r\n  DomainName\r\n  ResolverRuleId\r\n  Arn\r\n  TargetIps\r\n  Name\r\n",
        "prefix": "route53resolver-resolverrule"
    },
    "AWS::Route53Resolver::ResolverRuleAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Route53Resolver::ResolverRuleAssociation\"\r\n\tProperties:\r\n\t\tVPCId: String #required\r\n\t\tResolverRuleId: String #required\r\n\t\tName: String\r\n",
        "description": "Attributes:\r\n  VPCId\r\n  ResolverRuleId\r\n  ResolverRuleAssociationId\r\n  Name\r\n",
        "prefix": "route53resolver-resolverruleassociation"
    },
    "AWS::S3::AccessPoint": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::S3::AccessPoint\"\r\n\tProperties:\r\n\t\tName: String\r\n\t\tBucket: String #required\r\n\t\tVpcConfiguration:\r\n\t\t\tVpcConfiguration\r\n\t\tPublicAccessBlockConfiguration:\r\n\t\t\tPublicAccessBlockConfiguration\r\n\t\tPolicy: Json\r\n\t\tPolicyStatus: Json\r\n\t\tNetworkOrigin: String\r\n\t\tCreationDate: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "s3-accesspoint"
    },
    "AWS::S3::Bucket": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::S3::Bucket\"\r\n\tProperties:\r\n\t\tAccelerateConfiguration:\r\n\t\t\tAccelerateConfiguration\r\n\t\tAccessControl: String\r\n\t\tAnalyticsConfigurations:\r\n\t\t\t- AnalyticsConfiguration\r\n\t\tBucketEncryption:\r\n\t\t\tBucketEncryption\r\n\t\tBucketName: String\r\n\t\tCorsConfiguration:\r\n\t\t\tCorsConfiguration\r\n\t\tIntelligentTieringConfigurations:\r\n\t\t\t- IntelligentTieringConfiguration\r\n\t\tInventoryConfigurations:\r\n\t\t\t- InventoryConfiguration\r\n\t\tLifecycleConfiguration:\r\n\t\t\tLifecycleConfiguration\r\n\t\tLoggingConfiguration:\r\n\t\t\tLoggingConfiguration\r\n\t\tMetricsConfigurations:\r\n\t\t\t- MetricsConfiguration\r\n\t\tNotificationConfiguration:\r\n\t\t\tNotificationConfiguration\r\n\t\tObjectLockConfiguration:\r\n\t\t\tObjectLockConfiguration\r\n\t\tObjectLockEnabled: Boolean\r\n\t\tOwnershipControls:\r\n\t\t\tOwnershipControls\r\n\t\tPublicAccessBlockConfiguration:\r\n\t\t\tPublicAccessBlockConfiguration\r\n\t\tReplicationConfiguration:\r\n\t\t\tReplicationConfiguration\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tVersioningConfiguration:\r\n\t\t\tVersioningConfiguration\r\n\t\tWebsiteConfiguration:\r\n\t\t\tWebsiteConfiguration\r\n",
        "description": "Attributes:\r\n  Arn\r\n  DomainName\r\n  DualStackDomainName\r\n  RegionalDomainName\r\n  WebsiteURL\r\n",
        "prefix": "s3-bucket"
    },
    "AWS::S3::BucketPolicy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::S3::BucketPolicy\"\r\n\tProperties:\r\n\t\tBucket: String #required\r\n\t\tPolicyDocument: Json #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "s3-bucketpolicy"
    },
    "AWS::S3::StorageLens": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::S3::StorageLens\"\r\n\tProperties:\r\n\t\tStorageLensConfiguration: #required\r\n\t\t\tStorageLensConfiguration\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  StorageLensArn\r\n",
        "prefix": "s3-storagelens"
    },
    "AWS::SDB::Domain": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SDB::Domain\"\r\n\tProperties:\r\n\t\tDescription: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "sdb-domain"
    },
    "AWS::SES::ConfigurationSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SES::ConfigurationSet\"\r\n\tProperties:\r\n\t\tName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ses-configurationset"
    },
    "AWS::SES::ConfigurationSetEventDestination": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SES::ConfigurationSetEventDestination\"\r\n\tProperties:\r\n\t\tConfigurationSetName: String #required\r\n\t\tEventDestination: #required\r\n\t\t\tEventDestination\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ses-configurationseteventdestination"
    },
    "AWS::SES::ReceiptFilter": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SES::ReceiptFilter\"\r\n\tProperties:\r\n\t\tFilter: #required\r\n\t\t\tFilter\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ses-receiptfilter"
    },
    "AWS::SES::ReceiptRule": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SES::ReceiptRule\"\r\n\tProperties:\r\n\t\tAfter: String\r\n\t\tRule: #required\r\n\t\t\tRule\r\n\t\tRuleSetName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ses-receiptrule"
    },
    "AWS::SES::ReceiptRuleSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SES::ReceiptRuleSet\"\r\n\tProperties:\r\n\t\tRuleSetName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ses-receiptruleset"
    },
    "AWS::SES::Template": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SES::Template\"\r\n\tProperties:\r\n\t\tTemplate:\r\n\t\t\tTemplate\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ses-template"
    },
    "AWS::SNS::Subscription": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SNS::Subscription\"\r\n\tProperties:\r\n\t\tDeliveryPolicy: Json\r\n\t\tEndpoint: String\r\n\t\tFilterPolicy: Json\r\n\t\tProtocol: String #required\r\n\t\tRawMessageDelivery: Boolean\r\n\t\tRedrivePolicy: Json\r\n\t\tRegion: String\r\n\t\tSubscriptionRoleArn: String\r\n\t\tTopicArn: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "sns-subscription"
    },
    "AWS::SNS::Topic": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SNS::Topic\"\r\n\tProperties:\r\n\t\tContentBasedDeduplication: Boolean\r\n\t\tDisplayName: String\r\n\t\tFifoTopic: Boolean\r\n\t\tKmsMasterKeyId: String\r\n\t\tSubscription:\r\n\t\t\t- Subscription\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tTopicName: String\r\n",
        "description": "Attributes:\r\n  TopicName\r\n",
        "prefix": "sns-topic"
    },
    "AWS::SNS::TopicPolicy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SNS::TopicPolicy\"\r\n\tProperties:\r\n\t\tPolicyDocument: Json #required\r\n\t\tTopics: #required\r\n\t\t\t- String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "sns-topicpolicy"
    },
    "AWS::SQS::Queue": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SQS::Queue\"\r\n\tProperties:\r\n\t\tContentBasedDeduplication: Boolean\r\n\t\tDelaySeconds: Integer\r\n\t\tFifoQueue: Boolean\r\n\t\tKmsDataKeyReusePeriodSeconds: Integer\r\n\t\tKmsMasterKeyId: String\r\n\t\tMaximumMessageSize: Integer\r\n\t\tMessageRetentionPeriod: Integer\r\n\t\tQueueName: String\r\n\t\tReceiveMessageWaitTimeSeconds: Integer\r\n\t\tRedrivePolicy: Json\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tVisibilityTimeout: Integer\r\n",
        "description": "Attributes:\r\n  Arn\r\n  QueueName\r\n",
        "prefix": "sqs-queue"
    },
    "AWS::SQS::QueuePolicy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SQS::QueuePolicy\"\r\n\tProperties:\r\n\t\tPolicyDocument: Json #required\r\n\t\tQueues: #required\r\n\t\t\t- String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "sqs-queuepolicy"
    },
    "AWS::SSM::Association": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SSM::Association\"\r\n\tProperties:\r\n\t\tAssociationName: String\r\n\t\tDocumentVersion: String\r\n\t\tInstanceId: String\r\n\t\tName: String #required\r\n\t\tParameters:\r\n\t\t\tMap\r\n\t\tScheduleExpression: String\r\n\t\tTargets:\r\n\t\t\t- Target\r\n\t\tOutputLocation:\r\n\t\t\tInstanceAssociationOutputLocation\r\n\t\tAutomationTargetParameterName: String\r\n\t\tMaxErrors: String\r\n\t\tMaxConcurrency: String\r\n\t\tComplianceSeverity: String\r\n\t\tSyncCompliance: String\r\n\t\tWaitForSuccessTimeoutSeconds: Integer\r\n\t\tApplyOnlyAtCronInterval: Boolean\r\n",
        "description": "Attributes:\r\n  AssociationId\r\n",
        "prefix": "ssm-association"
    },
    "AWS::SSM::Document": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SSM::Document\"\r\n\tProperties:\r\n\t\tContent: Json #required\r\n\t\tDocumentType: String\r\n\t\tName: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ssm-document"
    },
    "AWS::SSM::MaintenanceWindow": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SSM::MaintenanceWindow\"\r\n\tProperties:\r\n\t\tStartDate: String\r\n\t\tDescription: String\r\n\t\tAllowUnassociatedTargets: Boolean #required\r\n\t\tCutoff: Integer #required\r\n\t\tSchedule: String #required\r\n\t\tDuration: Integer #required\r\n\t\tScheduleOffset: Integer\r\n\t\tEndDate: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tName: String #required\r\n\t\tScheduleTimezone: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ssm-maintenancewindow"
    },
    "AWS::SSM::MaintenanceWindowTarget": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SSM::MaintenanceWindowTarget\"\r\n\tProperties:\r\n\t\tOwnerInformation: String\r\n\t\tDescription: String\r\n\t\tWindowId: String #required\r\n\t\tResourceType: String #required\r\n\t\tTargets: #required\r\n\t\t\t- Targets\r\n\t\tName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ssm-maintenancewindowtarget"
    },
    "AWS::SSM::MaintenanceWindowTask": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SSM::MaintenanceWindowTask\"\r\n\tProperties:\r\n\t\tMaxErrors: String #required\r\n\t\tDescription: String\r\n\t\tServiceRoleArn: String\r\n\t\tPriority: Integer #required\r\n\t\tMaxConcurrency: String #required\r\n\t\tTargets: #required\r\n\t\t\t- Target\r\n\t\tName: String\r\n\t\tTaskArn: String #required\r\n\t\tTaskInvocationParameters:\r\n\t\t\tTaskInvocationParameters\r\n\t\tWindowId: String #required\r\n\t\tTaskParameters: Json\r\n\t\tTaskType: String #required\r\n\t\tLoggingInfo:\r\n\t\t\tLoggingInfo\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ssm-maintenancewindowtask"
    },
    "AWS::SSM::Parameter": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SSM::Parameter\"\r\n\tProperties:\r\n\t\tType: String #required\r\n\t\tDescription: String\r\n\t\tPolicies: String\r\n\t\tAllowedPattern: String\r\n\t\tTier: String\r\n\t\tValue: String #required\r\n\t\tDataType: String\r\n\t\tTags: Json\r\n\t\tName: String\r\n",
        "description": "Attributes:\r\n  Type\r\n  Value\r\n",
        "prefix": "ssm-parameter"
    },
    "AWS::SSM::PatchBaseline": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SSM::PatchBaseline\"\r\n\tProperties:\r\n\t\tOperatingSystem: String\r\n\t\tDescription: String\r\n\t\tApprovalRules:\r\n\t\t\tRuleGroup\r\n\t\tSources:\r\n\t\t\t- PatchSource\r\n\t\tName: String #required\r\n\t\tRejectedPatches:\r\n\t\t\t- String\r\n\t\tApprovedPatches:\r\n\t\t\t- String\r\n\t\tRejectedPatchesAction: String\r\n\t\tPatchGroups:\r\n\t\t\t- String\r\n\t\tApprovedPatchesComplianceLevel: String\r\n\t\tApprovedPatchesEnableNonSecurity: Boolean\r\n\t\tGlobalFilters:\r\n\t\t\tPatchFilterGroup\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ssm-patchbaseline"
    },
    "AWS::SSM::ResourceDataSync": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SSM::ResourceDataSync\"\r\n\tProperties:\r\n\t\tS3Destination:\r\n\t\t\tS3Destination\r\n\t\tKMSKeyArn: String\r\n\t\tSyncSource:\r\n\t\t\tSyncSource\r\n\t\tBucketName: String\r\n\t\tBucketRegion: String\r\n\t\tSyncFormat: String\r\n\t\tSyncName: String #required\r\n\t\tSyncType: String\r\n\t\tBucketPrefix: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "ssm-resourcedatasync"
    },
    "AWS::SSO::Assignment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SSO::Assignment\"\r\n\tProperties:\r\n\t\tInstanceArn: String #required\r\n\t\tTargetId: String #required\r\n\t\tTargetType: String #required\r\n\t\tPermissionSetArn: String #required\r\n\t\tPrincipalType: String #required\r\n\t\tPrincipalId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "sso-assignment"
    },
    "AWS::SSO::PermissionSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SSO::PermissionSet\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tDescription: String\r\n\t\tInstanceArn: String #required\r\n\t\tSessionDuration: String\r\n\t\tRelayStateType: String\r\n\t\tManagedPolicies:\r\n\t\t\t- String\r\n\t\tInlinePolicy: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  PermissionSetArn\r\n",
        "prefix": "sso-permissionset"
    },
    "AWS::SageMaker::CodeRepository": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SageMaker::CodeRepository\"\r\n\tProperties:\r\n\t\tCodeRepositoryName: String\r\n\t\tGitConfig: #required\r\n\t\t\tGitConfig\r\n",
        "description": "Attributes:\r\n  CodeRepositoryName\r\n",
        "prefix": "sagemaker-coderepository"
    },
    "AWS::SageMaker::Endpoint": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SageMaker::Endpoint\"\r\n\tProperties:\r\n\t\tRetainAllVariantProperties: Boolean\r\n\t\tEndpointName: String\r\n\t\tExcludeRetainedVariantProperties:\r\n\t\t\t- VariantProperty\r\n\t\tEndpointConfigName: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  EndpointName\r\n",
        "prefix": "sagemaker-endpoint"
    },
    "AWS::SageMaker::EndpointConfig": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SageMaker::EndpointConfig\"\r\n\tProperties:\r\n\t\tDataCaptureConfig:\r\n\t\t\tDataCaptureConfig\r\n\t\tProductionVariants: #required\r\n\t\t\t- ProductionVariant\r\n\t\tKmsKeyId: String\r\n\t\tEndpointConfigName: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  EndpointConfigName\r\n",
        "prefix": "sagemaker-endpointconfig"
    },
    "AWS::SageMaker::Model": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SageMaker::Model\"\r\n\tProperties:\r\n\t\tExecutionRoleArn: String #required\r\n\t\tEnableNetworkIsolation: Boolean\r\n\t\tPrimaryContainer:\r\n\t\t\tContainerDefinition\r\n\t\tModelName: String\r\n\t\tVpcConfig:\r\n\t\t\tVpcConfig\r\n\t\tContainers:\r\n\t\t\t- ContainerDefinition\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  ModelName\r\n",
        "prefix": "sagemaker-model"
    },
    "AWS::SageMaker::MonitoringSchedule": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SageMaker::MonitoringSchedule\"\r\n\tProperties:\r\n\t\tMonitoringScheduleArn: String\r\n\t\tMonitoringScheduleName: String #required\r\n\t\tMonitoringScheduleConfig: #required\r\n\t\t\tMonitoringScheduleConfig\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tEndpointName: String\r\n\t\tFailureReason: String\r\n\t\tLastMonitoringExecutionSummary:\r\n\t\t\tMonitoringExecutionSummary\r\n\t\tMonitoringScheduleStatus: String\r\n",
        "description": "Attributes:\r\n  CreationTime\r\n  LastModifiedTime\r\n",
        "prefix": "sagemaker-monitoringschedule"
    },
    "AWS::SageMaker::NotebookInstance": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SageMaker::NotebookInstance\"\r\n\tProperties:\r\n\t\tKmsKeyId: String\r\n\t\tVolumeSizeInGB: Integer\r\n\t\tAdditionalCodeRepositories:\r\n\t\t\t- String\r\n\t\tDefaultCodeRepository: String\r\n\t\tDirectInternetAccess: String\r\n\t\tAcceleratorTypes:\r\n\t\t\t- String\r\n\t\tSubnetId: String\r\n\t\tSecurityGroupIds:\r\n\t\t\t- String\r\n\t\tRoleArn: String #required\r\n\t\tRootAccess: String\r\n\t\tNotebookInstanceName: String\r\n\t\tInstanceType: String #required\r\n\t\tLifecycleConfigName: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  NotebookInstanceName\r\n",
        "prefix": "sagemaker-notebookinstance"
    },
    "AWS::SageMaker::NotebookInstanceLifecycleConfig": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SageMaker::NotebookInstanceLifecycleConfig\"\r\n\tProperties:\r\n\t\tOnStart:\r\n\t\t\t- NotebookInstanceLifecycleHook\r\n\t\tNotebookInstanceLifecycleConfigName: String\r\n\t\tOnCreate:\r\n\t\t\t- NotebookInstanceLifecycleHook\r\n",
        "description": "Attributes:\r\n  NotebookInstanceLifecycleConfigName\r\n",
        "prefix": "sagemaker-notebookinstancelifecycleconfig"
    },
    "AWS::SageMaker::Workteam": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SageMaker::Workteam\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tNotificationConfiguration:\r\n\t\t\tNotificationConfiguration\r\n\t\tWorkteamName: String\r\n\t\tMemberDefinitions:\r\n\t\t\t- MemberDefinition\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  WorkteamName\r\n",
        "prefix": "sagemaker-workteam"
    },
    "AWS::SecretsManager::ResourcePolicy": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SecretsManager::ResourcePolicy\"\r\n\tProperties:\r\n\t\tBlockPublicPolicy: Boolean\r\n\t\tSecretId: String #required\r\n\t\tResourcePolicy: Json #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "secretsmanager-resourcepolicy"
    },
    "AWS::SecretsManager::RotationSchedule": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SecretsManager::RotationSchedule\"\r\n\tProperties:\r\n\t\tSecretId: String #required\r\n\t\tHostedRotationLambda:\r\n\t\t\tHostedRotationLambda\r\n\t\tRotationLambdaARN: String\r\n\t\tRotationRules:\r\n\t\t\tRotationRules\r\n",
        "description": "No Attributes\r\n",
        "prefix": "secretsmanager-rotationschedule"
    },
    "AWS::SecretsManager::Secret": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SecretsManager::Secret\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tKmsKeyId: String\r\n\t\tSecretString: String\r\n\t\tGenerateSecretString:\r\n\t\t\tGenerateSecretString\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tName: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "secretsmanager-secret"
    },
    "AWS::SecretsManager::SecretTargetAttachment": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SecretsManager::SecretTargetAttachment\"\r\n\tProperties:\r\n\t\tSecretId: String #required\r\n\t\tTargetType: String #required\r\n\t\tTargetId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "secretsmanager-secrettargetattachment"
    },
    "AWS::SecurityHub::Hub": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::SecurityHub::Hub\"\r\n\tProperties:\r\n\t\tTags: Json\r\n",
        "description": "No Attributes\r\n",
        "prefix": "securityhub-hub"
    },
    "AWS::ServiceCatalog::AcceptedPortfolioShare": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceCatalog::AcceptedPortfolioShare\"\r\n\tProperties:\r\n\t\tAcceptLanguage: String\r\n\t\tPortfolioId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "servicecatalog-acceptedportfolioshare"
    },
    "AWS::ServiceCatalog::CloudFormationProduct": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceCatalog::CloudFormationProduct\"\r\n\tProperties:\r\n\t\tReplaceProvisioningArtifacts: Boolean\r\n\t\tOwner: String #required\r\n\t\tSupportDescription: String\r\n\t\tDescription: String\r\n\t\tDistributor: String\r\n\t\tSupportEmail: String\r\n\t\tAcceptLanguage: String\r\n\t\tSupportUrl: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tName: String #required\r\n\t\tProvisioningArtifactParameters: #required\r\n\t\t\t- ProvisioningArtifactProperties\r\n",
        "description": "Attributes:\r\n  ProductName\r\n  ProvisioningArtifactIds\r\n  ProvisioningArtifactNames\r\n",
        "prefix": "servicecatalog-cloudformationproduct"
    },
    "AWS::ServiceCatalog::CloudFormationProvisionedProduct": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceCatalog::CloudFormationProvisionedProduct\"\r\n\tProperties:\r\n\t\tAcceptLanguage: String\r\n\t\tNotificationArns:\r\n\t\t\t- String\r\n\t\tPathId: String\r\n\t\tPathName: String\r\n\t\tProductId: String\r\n\t\tProductName: String\r\n\t\tProvisionedProductName: String\r\n\t\tProvisioningArtifactId: String\r\n\t\tProvisioningArtifactName: String\r\n\t\tProvisioningParameters:\r\n\t\t\t- ProvisioningParameter\r\n\t\tProvisioningPreferences:\r\n\t\t\tProvisioningPreferences\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  ProvisionedProductId\r\n  RecordId\r\n  CloudformationStackArn\r\n  Outputs\r\n",
        "prefix": "servicecatalog-cloudformationprovisionedproduct"
    },
    "AWS::ServiceCatalog::LaunchNotificationConstraint": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceCatalog::LaunchNotificationConstraint\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tNotificationArns: #required\r\n\t\t\t- String\r\n\t\tAcceptLanguage: String\r\n\t\tPortfolioId: String #required\r\n\t\tProductId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "servicecatalog-launchnotificationconstraint"
    },
    "AWS::ServiceCatalog::LaunchRoleConstraint": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceCatalog::LaunchRoleConstraint\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tLocalRoleName: String\r\n\t\tAcceptLanguage: String\r\n\t\tPortfolioId: String #required\r\n\t\tProductId: String #required\r\n\t\tRoleArn: String\r\n",
        "description": "No Attributes\r\n",
        "prefix": "servicecatalog-launchroleconstraint"
    },
    "AWS::ServiceCatalog::LaunchTemplateConstraint": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceCatalog::LaunchTemplateConstraint\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tAcceptLanguage: String\r\n\t\tPortfolioId: String #required\r\n\t\tProductId: String #required\r\n\t\tRules: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "servicecatalog-launchtemplateconstraint"
    },
    "AWS::ServiceCatalog::Portfolio": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceCatalog::Portfolio\"\r\n\tProperties:\r\n\t\tProviderName: String #required\r\n\t\tDescription: String\r\n\t\tDisplayName: String #required\r\n\t\tAcceptLanguage: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  PortfolioName\r\n",
        "prefix": "servicecatalog-portfolio"
    },
    "AWS::ServiceCatalog::PortfolioPrincipalAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceCatalog::PortfolioPrincipalAssociation\"\r\n\tProperties:\r\n\t\tPrincipalARN: String #required\r\n\t\tAcceptLanguage: String\r\n\t\tPortfolioId: String #required\r\n\t\tPrincipalType: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "servicecatalog-portfolioprincipalassociation"
    },
    "AWS::ServiceCatalog::PortfolioProductAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceCatalog::PortfolioProductAssociation\"\r\n\tProperties:\r\n\t\tSourcePortfolioId: String\r\n\t\tAcceptLanguage: String\r\n\t\tPortfolioId: String #required\r\n\t\tProductId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "servicecatalog-portfolioproductassociation"
    },
    "AWS::ServiceCatalog::PortfolioShare": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceCatalog::PortfolioShare\"\r\n\tProperties:\r\n\t\tAccountId: String #required\r\n\t\tAcceptLanguage: String\r\n\t\tPortfolioId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "servicecatalog-portfolioshare"
    },
    "AWS::ServiceCatalog::ResourceUpdateConstraint": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceCatalog::ResourceUpdateConstraint\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tAcceptLanguage: String\r\n\t\tTagUpdateOnProvisionedProduct: String #required\r\n\t\tPortfolioId: String #required\r\n\t\tProductId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "servicecatalog-resourceupdateconstraint"
    },
    "AWS::ServiceCatalog::StackSetConstraint": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceCatalog::StackSetConstraint\"\r\n\tProperties:\r\n\t\tDescription: String #required\r\n\t\tStackInstanceControl: String #required\r\n\t\tAcceptLanguage: String\r\n\t\tPortfolioId: String #required\r\n\t\tProductId: String #required\r\n\t\tRegionList: #required\r\n\t\t\t- String\r\n\t\tAdminRole: String #required\r\n\t\tAccountList: #required\r\n\t\t\t- String\r\n\t\tExecutionRole: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "servicecatalog-stacksetconstraint"
    },
    "AWS::ServiceCatalog::TagOption": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceCatalog::TagOption\"\r\n\tProperties:\r\n\t\tActive: Boolean\r\n\t\tValue: String #required\r\n\t\tKey: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "servicecatalog-tagoption"
    },
    "AWS::ServiceCatalog::TagOptionAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceCatalog::TagOptionAssociation\"\r\n\tProperties:\r\n\t\tTagOptionId: String #required\r\n\t\tResourceId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "servicecatalog-tagoptionassociation"
    },
    "AWS::ServiceDiscovery::HttpNamespace": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceDiscovery::HttpNamespace\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  Id\r\n  Arn\r\n",
        "prefix": "servicediscovery-httpnamespace"
    },
    "AWS::ServiceDiscovery::Instance": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceDiscovery::Instance\"\r\n\tProperties:\r\n\t\tInstanceAttributes: Json #required\r\n\t\tInstanceId: String\r\n\t\tServiceId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "servicediscovery-instance"
    },
    "AWS::ServiceDiscovery::PrivateDnsNamespace": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceDiscovery::PrivateDnsNamespace\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tVpc: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  Id\r\n  Arn\r\n",
        "prefix": "servicediscovery-privatednsnamespace"
    },
    "AWS::ServiceDiscovery::PublicDnsNamespace": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceDiscovery::PublicDnsNamespace\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  Id\r\n  Arn\r\n",
        "prefix": "servicediscovery-publicdnsnamespace"
    },
    "AWS::ServiceDiscovery::Service": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::ServiceDiscovery::Service\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tHealthCheckCustomConfig:\r\n\t\t\tHealthCheckCustomConfig\r\n\t\tDnsConfig:\r\n\t\t\tDnsConfig\r\n\t\tNamespaceId: String\r\n\t\tHealthCheckConfig:\r\n\t\t\tHealthCheckConfig\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tName: String\r\n",
        "description": "Attributes:\r\n  Id\r\n  Arn\r\n  Name\r\n",
        "prefix": "servicediscovery-service"
    },
    "AWS::Signer::ProfilePermission": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Signer::ProfilePermission\"\r\n\tProperties:\r\n\t\tProfileName: String #required\r\n\t\tProfileVersion: String\r\n\t\tAction: String #required\r\n\t\tPrincipal: String #required\r\n\t\tStatementId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "signer-profilepermission"
    },
    "AWS::Signer::SigningProfile": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Signer::SigningProfile\"\r\n\tProperties:\r\n\t\tSignatureValidityPeriod:\r\n\t\t\tSignatureValidityPeriod\r\n\t\tPlatformId: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  ProfileName\r\n  ProfileVersion\r\n  Arn\r\n  ProfileVersionArn\r\n",
        "prefix": "signer-signingprofile"
    },
    "AWS::StepFunctions::Activity": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::StepFunctions::Activity\"\r\n\tProperties:\r\n\t\tTags:\r\n\t\t\t- TagsEntry\r\n\t\tName: String #required\r\n",
        "description": "Attributes:\r\n  Name\r\n",
        "prefix": "stepfunctions-activity"
    },
    "AWS::StepFunctions::StateMachine": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::StepFunctions::StateMachine\"\r\n\tProperties:\r\n\t\tDefinitionString: String\r\n\t\tRoleArn: String #required\r\n\t\tStateMachineName: String\r\n\t\tStateMachineType: String\r\n\t\tLoggingConfiguration:\r\n\t\t\tLoggingConfiguration\r\n\t\tTracingConfiguration:\r\n\t\t\tTracingConfiguration\r\n\t\tDefinitionS3Location:\r\n\t\t\tS3Location\r\n\t\tDefinitionSubstitutions:\r\n\t\t\tDefinitionSubstitutions\r\n\t\tTags:\r\n\t\t\t- TagsEntry\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Name\r\n",
        "prefix": "stepfunctions-statemachine"
    },
    "AWS::Synthetics::Canary": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Synthetics::Canary\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tCode: #required\r\n\t\t\tCode\r\n\t\tArtifactS3Location: String #required\r\n\t\tSchedule: #required\r\n\t\t\tSchedule\r\n\t\tExecutionRoleArn: String #required\r\n\t\tRuntimeVersion: String #required\r\n\t\tSuccessRetentionPeriod: Integer\r\n\t\tFailureRetentionPeriod: Integer\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tVPCConfig:\r\n\t\t\tVPCConfig\r\n\t\tRunConfig:\r\n\t\t\tRunConfig\r\n\t\tStartCanaryAfterCreation: Boolean #required\r\n",
        "description": "Attributes:\r\n  Id\r\n  State\r\n",
        "prefix": "synthetics-canary"
    },
    "AWS::Timestream::Database": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Timestream::Database\"\r\n\tProperties:\r\n\t\tDatabaseName: String\r\n\t\tKmsKeyId: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "timestream-database"
    },
    "AWS::Timestream::Table": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Timestream::Table\"\r\n\tProperties:\r\n\t\tDatabaseName: String #required\r\n\t\tTableName: String\r\n\t\tRetentionProperties: Json\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n",
        "prefix": "timestream-table"
    },
    "AWS::Transfer::Server": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Transfer::Server\"\r\n\tProperties:\r\n\t\tLoggingRole: String\r\n\t\tProtocols:\r\n\t\t\t- Protocol\r\n\t\tIdentityProviderDetails:\r\n\t\t\tIdentityProviderDetails\r\n\t\tEndpointType: String\r\n\t\tSecurityPolicyName: String\r\n\t\tEndpointDetails:\r\n\t\t\tEndpointDetails\r\n\t\tIdentityProviderType: String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tCertificate: String\r\n",
        "description": "Attributes:\r\n  ServerId\r\n  Arn\r\n",
        "prefix": "transfer-server"
    },
    "AWS::Transfer::User": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::Transfer::User\"\r\n\tProperties:\r\n\t\tPolicy: String\r\n\t\tRole: String #required\r\n\t\tHomeDirectory: String\r\n\t\tHomeDirectoryType: String\r\n\t\tServerId: String #required\r\n\t\tUserName: String #required\r\n\t\tHomeDirectoryMappings:\r\n\t\t\t- HomeDirectoryMapEntry\r\n\t\tSshPublicKeys:\r\n\t\t\t- SshPublicKey\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  ServerId\r\n  UserName\r\n  Arn\r\n",
        "prefix": "transfer-user"
    },
    "AWS::WAF::ByteMatchSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAF::ByteMatchSet\"\r\n\tProperties:\r\n\t\tByteMatchTuples:\r\n\t\t\t- ByteMatchTuple\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "waf-bytematchset"
    },
    "AWS::WAF::IPSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAF::IPSet\"\r\n\tProperties:\r\n\t\tIPSetDescriptors:\r\n\t\t\t- IPSetDescriptor\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "waf-ipset"
    },
    "AWS::WAF::Rule": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAF::Rule\"\r\n\tProperties:\r\n\t\tMetricName: String #required\r\n\t\tName: String #required\r\n\t\tPredicates:\r\n\t\t\t- Predicate\r\n",
        "description": "No Attributes\r\n",
        "prefix": "waf-rule"
    },
    "AWS::WAF::SizeConstraintSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAF::SizeConstraintSet\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tSizeConstraints: #required\r\n\t\t\t- SizeConstraint\r\n",
        "description": "No Attributes\r\n",
        "prefix": "waf-sizeconstraintset"
    },
    "AWS::WAF::SqlInjectionMatchSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAF::SqlInjectionMatchSet\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tSqlInjectionMatchTuples:\r\n\t\t\t- SqlInjectionMatchTuple\r\n",
        "description": "No Attributes\r\n",
        "prefix": "waf-sqlinjectionmatchset"
    },
    "AWS::WAF::WebACL": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAF::WebACL\"\r\n\tProperties:\r\n\t\tDefaultAction: #required\r\n\t\t\tWafAction\r\n\t\tMetricName: String #required\r\n\t\tName: String #required\r\n\t\tRules:\r\n\t\t\t- ActivatedRule\r\n",
        "description": "No Attributes\r\n",
        "prefix": "waf-webacl"
    },
    "AWS::WAF::XssMatchSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAF::XssMatchSet\"\r\n\tProperties:\r\n\t\tName: String #required\r\n\t\tXssMatchTuples: #required\r\n\t\t\t- XssMatchTuple\r\n",
        "description": "No Attributes\r\n",
        "prefix": "waf-xssmatchset"
    },
    "AWS::WAFRegional::ByteMatchSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAFRegional::ByteMatchSet\"\r\n\tProperties:\r\n\t\tByteMatchTuples:\r\n\t\t\t- ByteMatchTuple\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "wafregional-bytematchset"
    },
    "AWS::WAFRegional::GeoMatchSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAFRegional::GeoMatchSet\"\r\n\tProperties:\r\n\t\tGeoMatchConstraints:\r\n\t\t\t- GeoMatchConstraint\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "wafregional-geomatchset"
    },
    "AWS::WAFRegional::IPSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAFRegional::IPSet\"\r\n\tProperties:\r\n\t\tIPSetDescriptors:\r\n\t\t\t- IPSetDescriptor\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "wafregional-ipset"
    },
    "AWS::WAFRegional::RateBasedRule": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAFRegional::RateBasedRule\"\r\n\tProperties:\r\n\t\tMetricName: String #required\r\n\t\tRateLimit: Integer #required\r\n\t\tMatchPredicates:\r\n\t\t\t- Predicate\r\n\t\tRateKey: String #required\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "wafregional-ratebasedrule"
    },
    "AWS::WAFRegional::RegexPatternSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAFRegional::RegexPatternSet\"\r\n\tProperties:\r\n\t\tRegexPatternStrings: #required\r\n\t\t\t- String\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "wafregional-regexpatternset"
    },
    "AWS::WAFRegional::Rule": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAFRegional::Rule\"\r\n\tProperties:\r\n\t\tMetricName: String #required\r\n\t\tPredicates:\r\n\t\t\t- Predicate\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "wafregional-rule"
    },
    "AWS::WAFRegional::SizeConstraintSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAFRegional::SizeConstraintSet\"\r\n\tProperties:\r\n\t\tSizeConstraints:\r\n\t\t\t- SizeConstraint\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "wafregional-sizeconstraintset"
    },
    "AWS::WAFRegional::SqlInjectionMatchSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAFRegional::SqlInjectionMatchSet\"\r\n\tProperties:\r\n\t\tSqlInjectionMatchTuples:\r\n\t\t\t- SqlInjectionMatchTuple\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "wafregional-sqlinjectionmatchset"
    },
    "AWS::WAFRegional::WebACL": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAFRegional::WebACL\"\r\n\tProperties:\r\n\t\tMetricName: String #required\r\n\t\tDefaultAction: #required\r\n\t\t\tAction\r\n\t\tRules:\r\n\t\t\t- Rule\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "wafregional-webacl"
    },
    "AWS::WAFRegional::WebACLAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAFRegional::WebACLAssociation\"\r\n\tProperties:\r\n\t\tResourceArn: String #required\r\n\t\tWebACLId: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "wafregional-webaclassociation"
    },
    "AWS::WAFRegional::XssMatchSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAFRegional::XssMatchSet\"\r\n\tProperties:\r\n\t\tXssMatchTuples:\r\n\t\t\t- XssMatchTuple\r\n\t\tName: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "wafregional-xssmatchset"
    },
    "AWS::WAFv2::IPSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAFv2::IPSet\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tName: String\r\n\t\tScope: String #required\r\n\t\tIPAddressVersion: String #required\r\n\t\tAddresses: #required\r\n\t\t\t- String\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Id\r\n",
        "prefix": "wafv2-ipset"
    },
    "AWS::WAFv2::RegexPatternSet": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAFv2::RegexPatternSet\"\r\n\tProperties:\r\n\t\tDescription: String\r\n\t\tName: String\r\n\t\tRegularExpressionList: #required\r\n\t\t\t- String\r\n\t\tScope: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Id\r\n",
        "prefix": "wafv2-regexpatternset"
    },
    "AWS::WAFv2::RuleGroup": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAFv2::RuleGroup\"\r\n\tProperties:\r\n\t\tCapacity: Integer #required\r\n\t\tDescription: String\r\n\t\tName: String\r\n\t\tScope: String #required\r\n\t\tRules:\r\n\t\t\t- Rule\r\n\t\tVisibilityConfig: #required\r\n\t\t\tVisibilityConfig\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Id\r\n",
        "prefix": "wafv2-rulegroup"
    },
    "AWS::WAFv2::WebACL": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAFv2::WebACL\"\r\n\tProperties:\r\n\t\tDefaultAction: #required\r\n\t\t\tDefaultAction\r\n\t\tDescription: String\r\n\t\tName: String\r\n\t\tScope: String #required\r\n\t\tRules:\r\n\t\t\t- Rule\r\n\t\tVisibilityConfig: #required\r\n\t\t\tVisibilityConfig\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Arn\r\n  Capacity\r\n  Id\r\n",
        "prefix": "wafv2-webacl"
    },
    "AWS::WAFv2::WebACLAssociation": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WAFv2::WebACLAssociation\"\r\n\tProperties:\r\n\t\tResourceArn: String #required\r\n\t\tWebACLArn: String #required\r\n",
        "description": "No Attributes\r\n",
        "prefix": "wafv2-webaclassociation"
    },
    "AWS::WorkSpaces::ConnectionAlias": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WorkSpaces::ConnectionAlias\"\r\n\tProperties:\r\n\t\tConnectionString: String #required\r\n\t\tTags:\r\n\t\t\t- Tag\r\n",
        "description": "Attributes:\r\n  Associations\r\n  AliasId\r\n  ConnectionAliasState\r\n",
        "prefix": "workspaces-connectionalias"
    },
    "AWS::WorkSpaces::Workspace": {
        "body": "${1:LogicalID}:\r\n\tType: \"AWS::WorkSpaces::Workspace\"\r\n\tProperties:\r\n\t\tBundleId: String #required\r\n\t\tDirectoryId: String #required\r\n\t\tRootVolumeEncryptionEnabled: Boolean\r\n\t\tTags:\r\n\t\t\t- Tag\r\n\t\tUserName: String #required\r\n\t\tUserVolumeEncryptionEnabled: Boolean\r\n\t\tVolumeEncryptionKey: String\r\n\t\tWorkspaceProperties:\r\n\t\t\tWorkspaceProperties\r\n",
        "description": "No Attributes\r\n",
        "prefix": "workspaces-workspace"
    },
    "Alexa::ASK::Skill": {
        "body": "${1:LogicalID}:\r\n\tType: \"Alexa::ASK::Skill\"\r\n\tProperties:\r\n\t\tAuthenticationConfiguration: #required\r\n\t\t\tAuthenticationConfiguration\r\n\t\tVendorId: String #required\r\n\t\tSkillPackage: #required\r\n\t\t\tSkillPackage\r\n",
        "description": "No Attributes\r\n",
        "prefix": "alexa-ask-skill"
    }
}